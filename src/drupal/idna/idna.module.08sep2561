<?php
require_once ( dirname(__FILE__) . '/includes/configs.inc');
require_once ( dirname(__FILE__) . '/includes/utility.inc');

// qrcode
require_once ( dirname(__FILE__) . '/libraries/qrcode/qrlib.php');

// libraries firebase
require ( dirname(__FILE__) . '/libraries/firebase/vendor/autoload.php'); //'firebase/autoload.php';

// require_once 'ApnsPHP/Autoload.php';

/*
  https://github.com/immobiliare/ApnsPHP
*/
// -------- ApnsPHP
require_once ( dirname(__FILE__) . '/libraries/ApnsPHP/Autoload.php');

// -------- twilio_voice
require_once ( dirname(__FILE__) . '/libraries/twilio_voice/autoload.php');

// use Twilio\Jwt\AccessToken;
// use Twilio\Jwt\Grants\VoiceGrant;

use Twilio\Twiml;
use Twilio\Rest;
// use Twilio\Rest\Client;
// -------- twilio_voice

// use Twilio\Jwt\AccessToken;
// use Twilio\Jwt\Grants\VideoGrant;

use Twilio\Jwt\AccessToken;
use Twilio\Jwt\Grants\VideoGrant;


use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;

// const FIREBASE_DEFAULT_URL   = 'https://idna-614bd.firebaseio.com/';//'https://heart-id.firebaseio.com/';
// const FIREBASE_DEFAULT_PATH  = '/heart-id/';
// // const FIREBASE_REGISTER_PATH = 'user-register/';
// const FIREBASE_LOGIN_PATH = 'user-login/';
$debug;
$firebase;


function idna_init(){

  

  // $contents = file_get_contents('ls -l');
  // echo "<pre>";
  // echo exec('python /home/somkid/fb-id.py  2>&1', $output);
  // echo $output;
  // echo "</pre>";
  // echo "vv";

  // $process = new Process('pwd');
  // dpm($process->start());


 
  //------------------
  /*
  $process = new Symfony\Component\Process\Process('python /home/somkid/fb-id.py');
  $process->run();

  // executes after the command finishes
  if (!$process->isSuccessful()) {
      // throw new Symfony\Component\Process\Exception\ProcessFailedException($process);

    dpm($process);
  }

  echo $process->getOutput();
  */
  //------------------

  // --------- shell_exec ----------
  /*
  $output =  shell_exec("python /home/somkid/fb-id.py 'CoCohSmile' 2>&1");
  dpm($output);

  // เราจะได้ ค่า $output = ['xxxx'] โดยเราจะใช้คำสั่ง preg_match_all เพือดึง 'xxxx' ออกมา
  preg_match_all('/".*?"|\'.*?\'/', $output, $matches);
  print_r($matches[0][0]);
  */
  // --------- shell_exec ----------
  

  // $pid = pcntl_fork();
  // echo "<pre>";
  // var_dump(user_password(6));
  // echo "</pre>";

  // $iPod = stripos($_SERVER['HTTP_USER_AGENT'],"iPod");
  // $iPhone = stripos($_SERVER['HTTP_USER_AGENT'],"iPhone");
  // $iPad = stripos($_SERVER['HTTP_USER_AGENT'],"iPad");
  // $Android= stripos($_SERVER['HTTP_USER_AGENT'],"Android");

  // // //check if user is using ipod, iphone or ipad...
  // if( $iPod || $iPhone || $iPad ){
  //   echo "$iPod || $iPhone || $iPad";
  // }else if($Android){
  //   echo "$Android";
  // }

  // echo $pid = pcntl_fork();

  // $pid = pcntl_fork(); // fork
  // if ($pid > 0) { // child

  //     $sid = posix_setsid();
  //     if ($sid > 0) {
  //         $daemon->run();
  //     }
  // }

  // $pid = pcntl_fork();

  // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  
  // $to = config_pages_get('configure_idna', 'field_config_tag');
  // dpm($to);
  
  // $values = array("profiles"=>array(
  //                       "name"            => '$account->name',
  //                       "mail"            => '$account->mail',
  //                       "udid"            => 'auto-udid',
  //                       "platform"        => 'auto-platform',
  //                       "bundleidentifier"=> 'auto-bundleidentifier',
  //                       "version"         => 'auto-version',
  //                       "create"          => time(),
  //                       "update"          => time()
  //                     ));
        
  // dpm($firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 444 . '/', $values));
  // $vocabulary = taxonomy_vocabulary_machine_name_load('tags_friend_status');
  // $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));

  // dpm($terms);
  
  // define("IS_DEBUG", 1);
  
  global $debug;
  $debug = 1;

  /*
if ($debug) {
      $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate_dev')['uri']), strlen($GLOBALS['base_url'])); 
      $push = new ApnsPHP_Push(
        ApnsPHP_Abstract::ENVIRONMENT_SANDBOX,
        $apnsCert
      );
    }else{
      $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url']));
      $push = new ApnsPHP_Push(
        ApnsPHP_Abstract::ENVIRONMENT_PRODUCTION,
        $apnsCert
      );
    }
  */

  if ($debug) {
    define("CONFIG_PAGES_TYPE", "configure_idna_development");

    define("TAG", config_pages_get(CONFIG_PAGES_TYPE, 'field_config_tag_dev'));
    define("DEFUALT_IOS_URL_STORE_IDNA", config_pages_get(CONFIG_PAGES_TYPE, 'field_defualt_ios_url_store_dev'));
    define("DEFUALT_ANDROID_URL_STORE_IDNA", config_pages_get(CONFIG_PAGES_TYPE, 'field_android_url_store_idna_dev'));
    define("FIREBASE_URL", config_pages_get(CONFIG_PAGES_TYPE, 'field_firebase_default_url_dev'));


    define("CLOUD_MESSAGEING_KEY", config_pages_get(CONFIG_PAGES_TYPE, 'field_cloud_messaging_key_dev'));

    // field_apn_certificate_dev
    define("APN_CERTIFICATE", $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate_dev')['uri']), strlen($GLOBALS['base_url'])));
  }else{
    define("CONFIG_PAGES_TYPE", "configure_idna");

    define("TAG", config_pages_get(CONFIG_PAGES_TYPE, 'field_config_tag'));
    define("DEFUALT_IOS_URL_STORE_IDNA", config_pages_get(CONFIG_PAGES_TYPE, 'field_defualt_ios_url_store_idna'));
    define("DEFUALT_ANDROID_URL_STORE_IDNA", config_pages_get(CONFIG_PAGES_TYPE, 'field_android_url_store_idna'));
    define("FIREBASE_URL", config_pages_get(CONFIG_PAGES_TYPE, 'field_firebase_default_url'));


    define("CLOUD_MESSAGEING_KEY", config_pages_get(CONFIG_PAGES_TYPE, 'field_cloud_messaging_key'));

    define("APN_CERTIFICATE", $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url'])));
  }

  define("DEFUALT_PASSWORD", "HEARTIDNA");
  define("LENGTH_CHAT_ID", "20");
  define("QRCODE_SECRET_KEY", "aaa04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3");
  define("QRCODE_SECRET_IV", "bbb04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3");
  define("PATH_FOLDER_QRCODE", "sites/default/files/qrcode");

  define("FIREBASE_DEFAULT_PATH", '/idna/');
  define("FIREBASE_LOGIN_PATH", 'user/');
  define("FIREBASE_MY_APPLIPATIONS_PATH", 'my_applications/');
  define("FIREBASE_MY_APPLIPATIONS_POSTS_PATH", 'posts/');

  define("FIREBASE_CENTER_CHAT", 'center_chat/'); 

  // comments
  define("FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH", 'comments/');

  define("FIREBASE_CENTER", 'center/'); 
  define("FIREBASE_CENTER_SLIDE", 'center-slide/'); 
  define("FIREBASE_VOIP", 'voip/'); 


  // Chat groups
  define("FIREBASE_CHAT_GROUPS", 'chat_groups/'); 


  define("PATH_GROUPS", "groups");
  define("PATH_CLASSS", "classs");
  define("PATH_FOLLOWING", "following");


  // Bundle Identifier  
  // define("BI_IOS_BASIC", "heart.basic");
  
  define("BI_IOS_CHAT", "heart.chat");
  // define("BI_ANDROID_BASIC", "heart.basic");


  // define("BI_IOS_IDNA", "heart.idna");
  // define("BI_ANDROID_IDNA", "heart.idna");

  define("BUNDLE_IDENTIFIER", "heart.idna");


  define("BUNDLE_ONE_TO_ME", "one.to.me");

  // define("DEFUALT_LENGTH_CHAT_ID", 20); 

  // เป็น password ทีใช้ เข้าระบบ string uid ของ user ทีใช้สำหรับสร้าง  QRCode
  // define("QRCODE_SECRET_KEY", "aaa04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3");
  // define("QRCODE_SECRET_IV", "bbb04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3");

  define("FRIEND_STATUS_FRIEND", "10");
  define("FRIEND_STATUS_FRIEND_CANCEL", "13");
  define("FRIEND_STATUS_FRIEND_REQUEST", "11");  
  define("FRIEND_STATUS_WAIT_FOR_A_FRIEND", "12");  


  if ($debug) {
    /*
    mr.simajarn@gmail.com

    FRIENDLY NAME
    iDNA Development - Video

    SID
    SK620d550fb90459e6da0fe460e955d800

    KEY TYPE
    Standard

    SECRET
    seRvEwi0MvQ991iSCtq8KmxcmYr2SHk6
    */

    define("TWILIO_ACCOUNT_SID", "ACe35b4dd61ff6875ce26ee0e3ea9dd4dc");
    define("TWILIO_API_KEY", "SK620d550fb90459e6da0fe460e955d800");
    define("TWILIO_API_KEY_SECRET", "seRvEwi0MvQ991iSCtq8KmxcmYr2SHk6");
    define("TWILIO_PUSH_CREDENTIAL_SID", "");
    define("TWILIO_APP_SID", "AP5a5464cc136a4ac7877886a4f1d3df0c");
  }else{
    /*
    android.somkid@gmail.com
    */
    define("TWILIO_ACCOUNT_SID", "AC94429faf5d0c017fdde2eb9347c699e6");
    define("TWILIO_API_KEY", "SK5b11e67487ccf92915a1ede27b640dfa");
    define("TWILIO_API_KEY_SECRET", "QuGFTh7pvRKUV9VeFwC6FmIoGjXiFwcC");
    define("TWILIO_PUSH_CREDENTIAL_SID", "CR6279daf7d3f608853b78f863fd7dc995");
    define("TWILIO_APP_SID", "AP30c22ca482e1db49ceac6cd2ff19c37c");
  }

  // define("APN_CERTIFICATE", config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate'));
  // dpm(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate'));
  // $url_apn_certificate = file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']);
  // dpm($url_apn_certificate);

  
  global $firebase;

  /*
  เป็นการ load library firebase ในครั้งเท่านั้น
  *** การใช้งาน
    เราต้อง ประกาศ global $firebase ถึงเราจะสามารถนําไปใช้งานได้
  */
  $firebase = new \Firebase\FirebaseLib(FIREBASE_URL);
  /*
  module_load_include('module', 'opentok', 'opentok');

  $opentok_api_key = variable_get('opentok_api_key', NULL);
  $sessionId = opentok_create_session("1")->__toString();

  echo "opentok_api_key : " . $opentok_api_key . '</br>';
  echo "sessionId : " . $sessionId . '</br>';
  echo "opentok_get_token : " . opentok_get_token($sessionId);
  */

  // test_image_style_url();

  /*
  // ffmpeg_video_thumbnail_extract_frame
  try{
    // $ffmpeg = php_ffmpeg();
    // $video = $ffmpeg->open('public:///20180416_693282359.mp4');

    // dpm($video);

    #1
    $file = file_load('1108603');
    // $uri = $file->uri;

    //dpm($file->uri);

    dpm(ffmpeg_thumbnail_extract_frame($file));
    

    #2
    $ffmpeg = php_ffmpeg();//->create();
    // dpm($ffmpeg->create());
    // $video = $ffmpeg->open($file->uri);

    $video = $ffmpeg->open('sites/default/files/video_001.mp4');
    // $video_stream = $video->getStreams()->videos()->first();

    $at = FFMpeg\Coordinate\TimeCode::fromSeconds(1);

    // dpm($video_stream);
    // dpm($at);

    $v = $video
      ->frame($at)
      ->save('sites/default/files/z.png');

    dpm($v);
    

    // dpm(get_class_methods($ffmpeg));
  }
  catch (Exception $e) {
    // throw new RuntimeException(t('Error while extracting frame from @file, check php_ffmpeg log.', array('@file' => $file['uri'])), 0, $e);
    dpm( $e->getMessage() );
  }
  */

  // $video = $ffmpeg->open('/sites/default/files/20180415_977316720.mp4');
  // dpm($video);

  // module_load_include('module', 'ffmpeg_video_thumbnail', 'ffmpeg_video_thumbnail');

  // $path = ffmpeg_video_thumbnail_extract_frame('/sites/default/files/20180415_977316720.mp4', 1);
  // dpm($path);


  // dpm(___test());
}

/**
 * Implements hook_html_head_alter().
 */
// function idna_html_head_alter(&$head_elements) {
//   // Remove Generator META tag.
//   if (isset($head_elements['system_meta_generator'])) {
//     unset($head_elements['system_meta_generator']);
//   }
// }

function test_image_style_url()
{
  // /sites/default/files/20170119_213506711.png

  // public://20170119_213506711.png
  // var_dump(image_style_url('thumbnail', _load_image()->uri));

  // [7]  (null)  @"uri" : @"public:///20180406_64827038.png" 
  // var_dump(image_style_url('thumbnail', 'public:///20180406_64827038.png'));

  // [8]  (null)  @"uri" : @"public:///20180406_710453103.png"  

  // dpm(image_style_url('thumbnail','public:///20180406_710453103.png'));

  // var_dump(_load_image()->uri);

  // setDefualtClasss();

  // $profile = profile2_by_uid_load('548532', 'main');

  // dpm(_load_imag_defualt_profile());

  // $defualt_profile = (array)_load_imag_defualt_profile();

  // substr(file_create_url($defualt_profile['uri']), strlen($GLOBALS['base_url']));
          
  // $term = taxonomy_get_term_by_name('defualt_picture');

  // $term = taxonomy_vocabulary_machine_name_load('defualt_picture');

  // $term = taxonomy_get_tree_nested(taxonomy_vocabulary_machine_name_load("defualt_picture")->vid);;

  // $term = taxonomy_get_tree_nested(taxonomy_vocabulary_machine_name_load("defualt_picture")->vid);


  // $query = new EntityFieldQuery;
  // $result = $query
  //   ->entityCondition('entity_type', 'taxonomy_term')
  //   ->propertyCondition('name', 'defualt_picture')
  //   // ->propertyCondition('vid', 1)
  //   ->execute();

  // $term = taxonomy_get_tree(34);

  // var_dump($term);
  // echo "test_image_style_url";

  // $name = 'defualt_picture';
  // $myvoc = taxonomy_vocabulary_machine_name_load($name);
  // $tree = taxonomy_get_tree($myvoc->vid);
  // foreach ($tree as $term) {
  //  // echo $term->tid;
  //  $term = taxonomy_term_load($term->tid);
  //  // dpm(file_load($term->field_image[LANGUAGE_NONE][0]['fid']));

  //  dpm($term);

  //  // $item['picture']        = file_load($items->field_image[LANGUAGE_NONE][0]['fid']);
  // }


  /*
  $profile = profile2_by_uid_load('548553', 'main');

  // dpm($user_profile->field_field_my_class);

  if(isset($profile->field_field_my_class)){
    foreach ($profile->field_field_my_class[LANGUAGE_NONE] as $key => $value) {
      $items = field_collection_item_load($value['value']);     
      if (strcasecmp($items->field_class_name[LANGUAGE_NONE][0]['value'], 'friend') == 0) {
        dpm($value['value']);
        break;
      }
    } 
  }
  */
}

function get_friend_classs($profile){
  if(isset($profile->field_field_my_class)){
    foreach ($profile->field_field_my_class[LANGUAGE_NONE] as $key => $value) {
      $items = field_collection_item_load($value['value']);     
      if (strcasecmp($items->field_class_name[LANGUAGE_NONE][0]['value'], 'friend') == 0) {
        return $value['value'];
      }
    } 
  }

  return 0;
}


/*
http://learn-php-by-example.blogspot.com/2013/01/working-with-apple-push-notification.html

*/
function call(){
  /*
apn push "<ff38f7dc 0d34b6c5 82166cf5 ecbb0e31 14ca8160 b0387278 26ed306b 0e8e4a83>" -c VOIP.pem -m "Testing VoIP notifications"
  */



  // 395AA99183B9C31C2B6274DBFBBCD169C149C4F59782F4FDE9B8386866FF15F5
  $array_token_pkpush = array("ff38f7dc0d34b6c582166cf5ecbb0e3114ca8160b038727826ed306b0e8e4a83", "8597a025aae811c3c007f6c02d0864c99a0e3b081639edd2060c0968aa8b65f2", "2f82f053472c6bcbdf771d7ba280edba02709b41bfbf9ed718e8e1eb9b308363");

  foreach ($array_token_pkpush as &$token_pkpush) {
    // $value = $value * 2;
    // dpm($value);

    $apnsHost = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_host');//'gateway.sandbox.push.apple.com';
    $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url']));   // dpm(dirname(__FILE__) . '/' . 'VOIP.pem');
    $apnsPort = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_port'); // 2195;

    /*
    dpm($apnsHost);
    dpm($apnsCert);
    dpm($apnsPort);
    */

    // iphone 5s
    // $token_pkpush   = '395aa99183b9c31c2b6274dbfbbcd169c149c4f59782f4fde9b8386866ff15f5';

    // ipad
    // $token_pkpush = '7094ac021bd272647aa232eddc4c5254a4913f80a4c05b2232e4103deaaffb8c';
    $streamContext = stream_context_create();
    stream_context_set_option($streamContext, 'ssl', 'local_cert', $apnsCert);
    $apns = stream_socket_client('ssl://' . $apnsHost . ':' . $apnsPort, $error, $errorString, 2, STREAM_CLIENT_CONNECT, $streamContext);
    $payload['aps'] = array('alert' => 'Oh hai!', 'hasVideo' => 1, 'sound' => 'default', 'is_audio' => '0', 'UUID' => 'BFB35180-40F3-4F11-A165-DE96977086E1', 'handle'=>'test call');
    $output = json_encode($payload);
    $token = pack('H*', str_replace(' ', '', $token_pkpush));
    $apnsMessage = chr(0) . chr(0) . chr(32) . $token . chr(0) . chr(strlen($output)) . $output;
    $result = fwrite($apns, $apnsMessage);

    // dpm($result);
    // Expiry

    if (!$result){
      // echo 'Message not delivered<br/>';
    }
    else{
      // echo 'Message successfully delivered<br/>';
    }
    socket_close($apns);
    fclose($apns);
  }
}


/*
 * hook_help()
 * */
function idna_help($path, $arg)
{
  switch ($path) {
    case 'admin/help#idna':
      return t('Module iDNA');
    default:
      break;
  }
}

/**
 * Implements hook_permission().
 */
function idna_permission() {
  return array(
    'idna_permission' => array(
      'title' => t('iDNA Permissions.'),
    ),
    'idna_reset_heart_permission' => array(
      'title' => t('Reset Heart.'),
    )
  );
}

/*
 * hook_menu()
 * */
function idna_menu() { 
  // clear_twilio_outgoing_incomming_call
  $items['idna/clear_twilio_outgoing_incomming_call'] = array(
    'title' => t('ทดสอบ function clear_twilio_outgoing_incomming_call'),
    'page callback' => 'clear_twilio_outgoing_incomming_call',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['idna/test_function'] = array(
    'title' => t('ทดสอบ function test'),
    'page callback' => 'test_function',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['idna/test_add_data'] = array(
    'title' => t('ทดสอบ function add data'),
    'page callback' => 'test_add_data',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['idna/test_create_user'] = array(
    'title' => t('ทดสอบ test create user'),
    'page callback' => 'test_create_user',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['idna/test_create_center'] = array(
    'title' => t('ทดสอบ test create center'),
    'page callback' => 'test_create_center',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['idna/reset_heart'] = array(
    'title' => t('ทดสอบ Reset Heart'),
    'page callback' => 'reset_heart',
    'access arguments' => array('idna_reset_heart_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['qe'] = array(
    'page callback' => 'qe',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['idna/delete_user'] = array(
    'title' => t('ทดสอบ Delete User All'),
    'page callback' => 'delete_user',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['tw/voice_makeCall'] = array(
    'title' => t('Twilio Voice MakeCall : ถูกเรียกจาก twilio โดยจะ $_POST หรือ $_GET ค่ามาให้เรารองรับค่าเพือเอาไปใช้งานต่อ'),
    'page callback' => 'tw_voice_makeCall',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // incoming
  $items['tw/voice_incoming'] = array(
    'title' => t('Twilio Voice incoming : จะถูกเรียกหลักจาก โทรหาเพือนโดยใช้ api twilio( -tw_voice_placeCall()- )'),
    'page callback' => 'tw_voice_incoming',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // 
  $items['tw/parentStatusCallback'] = array(
    'title' => t('Twilio parentStatusCallback'),
    'page callback' => 'tw_parentStatusCallback',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['tw/clientStatusCallback'] = array(
    'title' => t('Twilio clientStatusCallback'),
    'page callback' => 'tw_clientStatusCallback',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['tw/waitUrl'] = array(
    'title' => t('Twilio waitUr : เสียงรอสาย'),
    'page callback' => 'tw_waitUrl',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['quickstart/twilio_client'] = array(
    'title' => t('Twilio voice - การทดสอบ TwilioClient'),
    'page callback' => 'quickstart_twilio_client',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['twilio/hook_group_rooms'] = array(
    'title' => t('Twilio video - การทดสอบ webhook group rooms [https://www.twilio.com/console/video/configure]'),
    'page callback' => 'hook_group_rooms',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  //  $items['idna/configs'] = array(
  //   'title' => t('หน้า Configs'),
  //   'page callback' => 'idna_configs',
  //   'access arguments' => array('idna_permission'),
  //   // 'access callback' => TRUE,
  //   'type' => MENU_CALLBACK,
  // );

  // ------------- live -----------------
  // nginx/live/publish
  $items['nginx/live/publish'] = array(
    'title' => t('function nginx/live/publish เป็น hook ที่บอกว่าการเริ่ม live'),
    'page callback' => 'nginx_live_publish',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  // nginx/live/publish_done
  $items['nginx/live/publish_done'] = array(
    'title' => t('function nginx/live/publish_done เป็น hook ที่บอกว่าการ live เสด'),
    'page callback' => 'nginx_live_publish_done',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  // nginx/live/recorded
  $items['nginx/live/recorded_done'] = array(
    'title' => t('function nginx/live/recorded_done'),
    'page callback' => 'nginx_live_recorded_done',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  // ------------- live -----------------

  // ------------- live -----------------
  // nginx/live_game/publish
  $items['nginx/live_game/publish'] = array(
    'title' => t('function nginx/live_game/publish เป็น hook ที่บอกว่าการเริ่ม live'),
    'page callback' => 'nginx_live_game_publish',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  // nginx/live/publish_done
  $items['nginx/live_game/publish_done'] = array(
    'title' => t('function nginx/live_game/publish_done เป็น hook ที่บอกว่าการ live เสด'),
    'page callback' => 'nginx_live_game_publish_done',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  // nginx/live/recorded
  $items['nginx/live_game/recorded_done'] = array(
    'title' => t('function nginx/live_game/recorded_done'),
    'page callback' => 'nginx_live_game_recorded_done',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  // ------------- live -----------------


  // -------- nginx video chat --------- 
  $items['nginx/vc/publish'] = array(
    'title' => t('function nginx/vc/publish'),
    'page callback' => 'nginx_vc_publish',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['nginx/vc/connect'] = array(
    'title' => t('function nginx/vc/connect'),
    'page callback' => 'nginx_vc_connect',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['nginx/vc/play'] = array(
    'title' => t('function nginx/vc/play'),
    'page callback' => 'nginx_vc_play',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['nginx/vc/done'] = array(
    'title' => t('function nginx/vc/done'),
    'page callback' => 'nginx_vc_done',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['nginx/vc/record_done'] = array(
    'title' => t('function nginx/vc/record_done'),
    'page callback' => 'nginx_vc_record_done',
    'access arguments' => array('idna_permission'),
    // 'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  // -------- nginx video chat --------- 

  return $items;
}


// -------- 
/*
/usr/bin/ffmpeg -i /home/somkid/1.mp4 -i /home/somkid/2.mp4 -filter_complex "[0:v][1:v][2:v]hstack=3,format=yuv420p[v];" -map "[v]" /home/somkid/output.mp4

/usr/bin/ffmpeg -i /home/somkid/1.mp4 -i /home/somkid/2.mp4 -c:v copy -c:a aac -strict experimental /home/somkid/output.mp4

/usr/bin/ffmpeg -i /home/somkid/1.mp4 -i /home/somkid/2.mp4 -c copy -map 0 -map 1 /home/somkid/output.mp4


/usr/bin/ffmpeg -i "concat:/home/somkid/1.mp4|/home/somkid/2.mp4" -c copy /home/somkid/output.mp4




/usr/bin/ffmpeg -i rtmp://139.59.228.56/live/1 -i rtmp://139.59.228.56/live/2 -shortest rtmp://139.59.228.56/live/1

ffmpeg -i /home/somkid/JasonMr.mp4 -vn -acodec copy /home/somkid/output-audio.aac


ffmpeg -i rtmp://139.59.228.56/live/1 -vn -acodec copy rtmp://139.59.228.56/live/2

*/
// background_process_start('___ffmpeg');
function ___ffmpeg(){
  exec('/usr/bin/ffmpeg -re -i /home/somkid/JasonMr.mp4 -c copy -f flv rtmp://localhost/live/test 2>&1', $output);
  var_dump($output);
}
// --------


// -------- nginx video chat --------- 
function nginx_vc_publish(){
  watchdog(TAG, 'nginx_vc_publish : %what', array('%what'=> serialize($_REQUEST)), WATCHDOG_INFO);

  return "nginx_vc_publish";
}


function nginx_vc_connect(){
  watchdog(TAG, 'nginx_vc_connect : %what', array('%what'=> serialize($_REQUEST)), WATCHDOG_INFO);

  return "nginx_vc_connect";
}

function nginx_vc_play(){
  watchdog(TAG, 'nginx_vc_play : %what', array('%what'=> serialize($_REQUEST)), WATCHDOG_INFO);

  return "nginx_vc_play";
}

function nginx_vc_done(){
  watchdog(TAG, 'nginx_vc_done : %what', array('%what'=> serialize($_REQUEST)), WATCHDOG_INFO);

  return "nginx_vc_done";
}

function nginx_vc_record_done(){
  watchdog(TAG, 'nginx_vc_record_done : %what', array('%what'=> serialize($_REQUEST)), WATCHDOG_INFO);

  return "nginx_vc_record_done";
}
// -------- nginx video chat --------- 


// -------- nginx live --------- 
function ___nginx_live($request){

  $live_name   = $request['name'];
  $live_status = $request['call'];

  // ------  test_live_streaming --------
  /*
  $node_query = new EntityFieldQuery();
  $node_output= $node_query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'test_live_streaming')
                ->fieldCondition('field_ls_object_id', 'value', $live_name, '=')
                ->execute();

  if (!empty($node_output['node'])) {
    $node_nids = array_keys($node_output['node']);
    foreach ($node_nids as $k => $nid) {
      $node = node_load($nid);
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_ls_status->set($live_status);
      $node_wrapper->save();

      watchdog(TAG, '___nginx_live > test_live_streaming', array(), WATCHDOG_INFO);

    }
  }
  */
  // ------  test_live_streaming --------


  // ;

  // $arr_live_name = explode("|", base64_decode($live_name));

  // if (count($arr_live_name) == 2) {
  // field_collection_item -- field_my_app_live_streaming --
  $my_app_query    = new EntityFieldQuery();
  $my_app_entities = $my_app_query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_my_app_live_streaming')
                    ->fieldCondition('field_ls_object_id', 'value', $live_name, '=')
                    ->execute();

  if (!empty($my_app_entities['field_collection_item'])) {
    $my_app_nids = array_keys($my_app_entities['field_collection_item']);
    foreach ($my_app_nids as $my_app_k => $my_app_id) {

      $my_app_item = field_collection_item_load($my_app_id);
      if ($my_app_item) {
        $my_app_wrapper = entity_metadata_wrapper('field_collection_item', $my_app_item);
        $my_app_wrapper->field_ls_status->set($live_status);
        $my_app_wrapper->save();


        watchdog(TAG, '___nginx_live > ls_status : %live_status - %my_app_id', array('%live_status'=>$live_status, '%my_app_id'=>$my_app_id), WATCHDOG_INFO);
      }
    }
  }

  watchdog(TAG, '___nginx_live > live_name : %live_name', array('%live_name'=>$live_name), WATCHDOG_INFO);
  // field_collection_item -- field_my_app_live_streaming --
  // }
}

function nginx_live_publish(){
  if (empty($_REQUEST) || empty($_REQUEST['name'])) {
    return;
  }
  
  watchdog(TAG, 'nginx_live_publish : %what', array('%what'=> serialize($_REQUEST)), WATCHDOG_INFO);
  /*
http://206.189.42.212/nginx/live/publish?app=live&flashver=&swfurl=&tcurl=rtmp://178.128.58.246/live/&pageurl=&addr=14.207.216.31&clientid=1&call=publish&name=Ly31j83pVFOMCXATVV7c&type=live
  */
 
  // background_process_start('___nginx_live', $_REQUEST);

  ___nginx_live($_REQUEST);

  return "nginx_live_publish";
}

function nginx_live_publish_done(){
  if (empty($_REQUEST) || empty($_REQUEST['name'])) {
    return;
  }

  /*
http://206.189.42.212/nginx/live/publish_done?app=live&flashver=&swfurl=&tcurl=rtmp://178.128.58.246/live/&pageurl=&addr=14.207.216.31&clientid=1&call=publish_done&name=Ly31j83pVFOMCXATVV7c
  */

  // watchdog(TAG, 'nginx_live_publish_done : %what', array('%what'=> serialize($_REQUEST)), WATCHDOG_INFO);

  // background_process_start('___nginx_live', $_REQUEST);

  ___nginx_live($_REQUEST);

  return "nginx_live_publish_done";
}

function nginx_live_recorded_done(){
  if (empty($_REQUEST)) {
    return;
  }

  // watchdog(TAG, 'nginx_live_recorded_done : %what', array('%what'=> serialize($_REQUEST)), WATCHDOG_INFO);

  return "nginx_live_recorded";
}
// -------- nginx live --------- 


// -------- nginx live game --------- 
function ___nginx_live_game($request){

  $live_name   = $request['name'];
  $live_status = $request['call'];

  // ------  test_live_streaming --------
  /*
  $node_query = new EntityFieldQuery();
  $node_output= $node_query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'test_live_streaming')
                ->fieldCondition('field_ls_object_id', 'value', $live_name, '=')
                ->execute();

  if (!empty($node_output['node'])) {
    $node_nids = array_keys($node_output['node']);
    foreach ($node_nids as $k => $nid) {
      $node = node_load($nid);
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_ls_status->set($live_status);
      $node_wrapper->save();

      watchdog(TAG, '___nginx_live > test_live_streaming', array(), WATCHDOG_INFO);

    }
  }
  */
  // ------  test_live_streaming --------


  // ;
/*
  // $arr_live_name = explode("|", base64_decode($live_name));

  // if (count($arr_live_name) == 2) {
  // field_collection_item -- field_my_app_live_streaming --
  $my_app_query    = new EntityFieldQuery();
  $my_app_entities = $my_app_query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_my_app_live_streaming')
                    ->fieldCondition('field_ls_object_id', 'value', $live_name, '=')
                    ->execute();

  if (!empty($my_app_entities['field_collection_item'])) {
    $my_app_nids = array_keys($my_app_entities['field_collection_item']);
    foreach ($my_app_nids as $my_app_k => $my_app_id) {

      $my_app_item = field_collection_item_load($my_app_id);
      if ($my_app_item) {
        $my_app_wrapper = entity_metadata_wrapper('field_collection_item', $my_app_item);
        $my_app_wrapper->field_ls_status->set($live_status);
        $my_app_wrapper->save();


        watchdog(TAG, '___nginx_live > ls_status : %live_status - %my_app_id', array('%live_status'=>$live_status, '%my_app_id'=>$my_app_id), WATCHDOG_INFO);
      }
    }
  }
  */

   // เราจะทำการ บันทึกการ สนทนาทั้งหมดไว้ที่ database ด้วย
  $content_type = "game_live_streaming";
  $query        = new EntityFieldQuery();
  $query_value  = $query->entityCondition('entity_type', 'node')
                         ->entityCondition('bundle', $content_type)
                         ->fieldCondition('field_ls_object_id', 'value', $live_name, '=')
                         ->execute();

  if (!empty($query_value['node'])) {
    $nids = array_keys($query_value['node']);

    foreach ($nids as $k => $nid) {
      $node = node_load($nid);
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_ls_status->set($live_status);
      $node_wrapper->save();

      watchdog(TAG, '___nginx_live_game > game_live_streaming', array(), WATCHDOG_INFO);
    }
  }else{

    $uid = base64_decode($live_name);

    $profile = profile2_by_uid_load($uid, 'main');

    $node = new stdClass();
    $node->title = $profile->field_profile_name[LANGUAGE_NONE][0]['value'];
    $node->type  = $content_type;
    $node->uid   = $uid;

    $node->field_ls_object_id[LANGUAGE_NONE][0]['value'] = $live_name;
    $node->field_ls_status[LANGUAGE_NONE][0]['value']    = $live_status;

    $node->language = LANGUAGE_NONE;
    $node->status   = 1;
    $node->comment  = 0; 
    $node = node_submit($node);
    node_save($node);
  }


  watchdog(TAG, '___nginx_live_game > live_game_name : %live_name', array('%live_name'=>$live_name), WATCHDOG_INFO);
  // field_collection_item -- field_my_app_live_streaming --
  // }
}

function nginx_live_game_publish(){
  if (empty($_REQUEST) || empty($_REQUEST['name'])) {
    return;
  }
  
  watchdog(TAG, 'nginx_live_game_publish : %what', array('%what'=> serialize($_REQUEST)), WATCHDOG_INFO);

  ___nginx_live_game($_REQUEST);

  return "nginx_live_publish";
}

function nginx_live_game_publish_done(){
  if (empty($_REQUEST) || empty($_REQUEST['name'])) {
    return;
  }

  watchdog(TAG, 'nginx_live_game_publish_done : %what', array('%what'=> serialize($_REQUEST)), WATCHDOG_INFO);

  ___nginx_live_game($_REQUEST);

  return "nginx_live_game_publish_done";
}

function nginx_live_game_recorded_done(){
  if (empty($_REQUEST)) {
    return;
  }

  // watchdog(TAG, 'nginx_live_recorded_done : %what', array('%what'=> serialize($_REQUEST)), WATCHDOG_INFO);

  return "nginx_live_game_recorded_done";
}
// -------- nginx live game --------- 


function idna_cronapi($op, $job = NULL) {


  // $items['example_sendmail_cron'] = array(
  //   'description' => 'Send mail with news',
  //   'rule' => '0 */2 * * *', // Every 2 hours
  //   // Note: i don't need to define a callback, i'll use "example_sendmail_cron"
  //   // function
  // );

  // $items['example_news_cron'] = array(
  //   'description' => 'Send mail with news',
  //   'rule' => '*/5 * * * *', // Every 5 minutes
  //   // i must call: example_news_fetch('all')
  //   'callback' => 'example_news_fetch',
  //   'arguments' => array('all'),
  // );

  $items['api_center'] = array(
    'description' => 'เป็น api สำหรับรัน ให้ center มีการ update ข้อมูลทุก 15 นาที',
    'rule' => '*/15 * * * *', // Every 5 minutes
    // i must call: example_news_fetch('all')
    'callback' => 'api_center',
    'arguments' => array('all'),
  );

  return $items;
}

function api_center($what) {
  watchdog(TAG, 'api_center : %what', array('%what'=> serialize($what)), WATCHDOG_INFO);

  test_create_center();
}

// function idna_configs(){

//   $name = 'configure_idna';

//   // $settings = array();
//   // $settings = array(
//   //   'ajax' => 0,
//   //   'hide_if_empty' => 1,
//   //   'default_tab' => 0,
//   //   'title' => 'My custom quicktab',
//   //   'renderer' => 'quicktabs',
//   //   'style' => 'nostyle',
//   // );

//   $block = module_invoke('quicktabs', 'block_view', $name); // Only change the machine name here,
//   print render($block);
// }

/*
  hook_mail
  Refer : http://drupal.stackexchange.com/questions/103892/passing-variables-in-drupal-mail
*/
function idna_mail($key, &$message, $params) {
  // global $user;

  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => LANGUAGE_NONE/*$message['language']->language*/,
  );

  watchdog(TAG, 'idna_mail > key : %key', array('%key'=> $key), WATCHDOG_INFO);

  switch ($key) {
    // Send a simple message from the contact form.
    case 'contact_message':{
      $message['subject'] = t('E-mail sent from @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('Code verify = @key', array('@key' => $params['verify_key']), $options);
      $message['body'][] = t('Password    = @key', array('@key' => $params['verify_key']), $options);
      $message['body'][] = t('--  @site-name team', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = check_plain($params['message']);

      watchdog(TAG, 'idna_mail > contact_message : %message', array('%message'=> serialize($message)), WATCHDOG_INFO);
    }
      break;

    case 'user_forgot_password':{
      $message['subject'] = t('Replacement login information for @name at @site-name', array('@name' => $params['name'], '@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('New Password    = @key', array('@key' => $params['verify_key']), $options);
      $message['body'][] = t('--  @site-name team', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = check_plain($params['message']);



      watchdog(TAG, 'idna_mail > user_forgot_password : %message', array('%message'=> serialize($message)), WATCHDOG_INFO);

    }
    break;
  }
}

/*
  hook_user_login()
  $bundleidentifier : heart.idna or heart.dna
  $platform         : ios, android
*/
function idna_user_login(&$edit, $account) {
  global $firebase;

  if (check_header()) {
    $getallheaders = nginx_getallheaders();

    watchdog(TAG, 'idna_user_login header: %header', array('%header'=> serialize($getallheaders)), WATCHDOG_INFO);

    /*
    เป้น การ load friends ของ uid ขึ้นมาเช็ดว่า friend_id เป้น friend เราอยุ่หรือไม่
    */
    $profile = profile2_by_uid_load($account->uid, 'main');

    $flag = TRUE;

    if(isset($profile->field_device_access[LANGUAGE_NONE])){
      foreach ($profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);

        if (strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $getallheaders['udid']) == 0) {

          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          if(strcasecmp($item_load->field_device_name[LANGUAGE_NONE][0]['value'], base64_decode($getallheaders['device_name'])) != 0){
            $wrapper->field_device_name->set(base64_decode($getallheaders['device_name']));
          }

          if(strcasecmp($item_load->field_device_access_version[LANGUAGE_NONE][0]['value'], $getallheaders['version_application']) != 0){
            $wrapper->field_device_access_version->set($getallheaders['version_application']);
          }

          if(strcasecmp($item_load->field_device_access_build[LANGUAGE_NONE][0]['value'], $getallheaders['build']) != 0){
            $wrapper->field_device_access_build->set($getallheaders['build']);
          }


          // field_key_token_notification
          if(strcasecmp($item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'], $getallheaders['token_notification']) != 0){
            $wrapper->field_key_token_notification->set($getallheaders['token_notification']);
          }

          // field_pushkit_token
          if(strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], $getallheaders['token_pushkit']) != 0){
            $wrapper->field_pushkit_token->set($getallheaders['token_pushkit']);
          }

          $wrapper->field_is_login->set("1");
          $wrapper->field_online->set("1");
          $wrapper->save();

       
          $val = array(
              "udid"          => $wrapper->field_udid->value(),
              "platform"      => $wrapper->field_platform->value(),
              "bundle_identifier"      => $wrapper->field_bundle_identifier->value(),
              "device_name"   => base64_decode($getallheaders['device_name']),
              "model_number"  => $wrapper->field_model_number->value(),
              "version"       => $getallheaders['version_application'],
              "build"         => $getallheaders['build'],
              "is_login"      => '1',
              "online"        => '1',
              "token_notification" => $getallheaders['token_notification'],
              "token_pushkit" => $getallheaders['token_pushkit']
            );
          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profiles/device_access/' . $value['value'] . "/", $val);

          $flag = FALSE;
          break;
        }
      }
    }

    if ($flag) {
      $values = array();
      $values['field_name'] = 'field_device_access'; 
      $values['field_udid'][LANGUAGE_NONE][0]['value']              = $getallheaders['udid'];
      $values['field_platform'][LANGUAGE_NONE][0]['value']          = $getallheaders['platform'];
      $values['field_bundle_identifier'][LANGUAGE_NONE][0]['value'] = $getallheaders['bundle_identifier'];
      $values['field_device_name'][LANGUAGE_NONE][0]['value']       = base64_decode($getallheaders['device_name']);
      $values['field_model_number'][LANGUAGE_NONE][0]['value']      = $getallheaders['model_number'];
      $values['field_device_access_version'][LANGUAGE_NONE][0]['value']    = $getallheaders['version_application'];
      $values['field_device_access_build'][LANGUAGE_NONE][0]['value']      = $getallheaders['build'];
      $values['field_is_login'][LANGUAGE_NONE][0]['value']                 = '1';
      $values['field_online'][LANGUAGE_NONE][0]['value']                   = '1';
      $values['field_key_token_notification'][LANGUAGE_NONE][0]['value']   = $getallheaders['token_notification'];
      $values['field_pushkit_token'][LANGUAGE_NONE][0]['value']            = $getallheaders['token_pushkit'];

      // Create the field collection entry and associate it with the profile
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity('profile2', $profile);
      $field_entity->save();

      $values = array(
        "udid"              => $getallheaders['udid'],
        "platform"          => $getallheaders['platform'],
        "bundle_identifier" => $getallheaders['bundle_identifier'],
        "device_name"       => base64_decode($getallheaders['device_name']),
        "model_number"      => $getallheaders['model_number'],
        "version"           => $getallheaders['version_application'],
        "build"             => $getallheaders['build'],
        "is_login"          => '1',
        "online"            => '1',
        "token_notification"=> $getallheaders['token_notification'],
        "token_pushkit"     => $getallheaders['token_pushkit']
      );
      $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profiles/device_access/' . $field_entity->item_id . "/", $values);
      

      /*
      $chat_id = generateRandomString(config_pages_get(CONFIG_PAGES_TYPE, 'field_defualt_length_chat_id', 20));

      // เป็นการเพือนให้ตัวเรา
      $user_profile = profile2_by_uid_load($uid, 'main');

      $friend_values = array();
      $friend_values['field_name'] = 'field_profile_friends'; // field collection name

      $friend_values['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $friend_id;
      $friend_values['field_change_friend_name'][LANGUAGE_NONE][0]['value'] = '';
      $friend_values['field_friend_status'][LANGUAGE_NONE][0]['tid'] = FRIEND_STATUS_WAIT_FOR_A_FRIEND;
    
      $field_entity = entity_create('field_collection_item', $friend_values);
      $field_entity->setHostEntity('profile2', $user_profile);
      $field_entity->save();

      //  $field_entity->item_id;

      $values = array(
        "status"       => FRIEND_STATUS_WAIT_FOR_A_FRIEND,
        "chat_id"      => $chat_id,
        "item_id"      => $field_entity->item_id,
        "create"       => time()
      );
      $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/friends/' . $friend_id . "/", $values);
      */
    }
  }
}

/**
  QRCode Login
*/
function qrcode_login(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  // $param = json_decode(file_get_contents('php://input'), true);
  if (empty($_REQUEST['uid']) || empty($_REQUEST['user'])) {
    $result['result'] = FALSE;
    $result['message'] = "Error : function qrcode_login params()";
    return $result;
  }

  global $firebase;
  $uid        = $_REQUEST['uid'];
  $user       = json_decode($_REQUEST['user']); // 

  $getallheaders = nginx_getallheaders();

  // watchdog(TAG, 'idna_user_login header: %header', array('%header'=> serialize($getallheaders)), WATCHDOG_INFO);

  // เป้น การ load friends ของ uid ขึ้นมาเช็ดว่า friend_id เป้น friend เราอยุ่หรือไม่
  $profile = profile2_by_uid_load($uid, 'main');

  // $result['profile'] = $profile;
  $result['_REQUEST'] = $_REQUEST;
  
  $flag = TRUE;
  if(isset($profile->field_device_access)){
    foreach ($profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
      $item_load = field_collection_item_load($value['value']);

      if (strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $getallheaders['udid']) == 0) {

        $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
        if(strcasecmp($item_load->field_device_name[LANGUAGE_NONE][0]['value'], base64_decode($getallheaders['device_name'])) != 0){
          $wrapper->field_device_name->set(base64_decode($getallheaders['device_name']));
        }

        if(strcasecmp($item_load->field_device_access_version[LANGUAGE_NONE][0]['value'], $getallheaders['version_application']) != 0){
          $wrapper->field_device_access_version->set($getallheaders['version_application']);
        }

        if(strcasecmp($item_load->field_device_access_build[LANGUAGE_NONE][0]['value'], $getallheaders['build']) != 0){
          $wrapper->field_device_access_build->set($getallheaders['build']);
        }

        // field_key_token_notification
        if(strcasecmp($item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'], $getallheaders['token_notification']) != 0){
          $wrapper->field_key_token_notification->set($getallheaders['token_notification']);
        }

        // field_pushkit_token
        if(strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], $getallheaders['token_pushkit']) != 0){
          $wrapper->field_pushkit_token->set($getallheaders['token_pushkit']);
        }

        $wrapper->field_is_login->set("1");
        $wrapper->field_online->set("1");
        $wrapper->save();

        $val = array(
            "udid"          => $wrapper->field_udid->value(),
            "platform"      => $wrapper->field_platform->value(),
            "bundle_identifier"      => $wrapper->field_bundle_identifier->value(),
            "device_name"   => base64_decode($getallheaders['device_name']),
            "model_number"  => $wrapper->field_model_number->value(),
            "version"       => $getallheaders['version_application'],
            "build"         => $getallheaders['build'],
            "is_login"      => '1',
            "online"        => '1',
            "token_notification" => $getallheaders['token_notification'],
            "token_pushkit" => $getallheaders['token_pushkit']
          );
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $value['value'] . "/", $val);

        $flag = FALSE;
        break;
      }
    }
  }

  if ($flag) {
    $values = array();
    $values['field_name'] = 'field_device_access'; 
    $values['field_udid'][LANGUAGE_NONE][0]['value']              = $getallheaders['udid'];
    $values['field_platform'][LANGUAGE_NONE][0]['value']          = $getallheaders['platform'];
    $values['field_bundle_identifier'][LANGUAGE_NONE][0]['value'] = $getallheaders['bundle_identifier'];
    $values['field_device_name'][LANGUAGE_NONE][0]['value']       = base64_decode($getallheaders['device_name']);
    $values['field_model_number'][LANGUAGE_NONE][0]['value']      = $getallheaders['model_number'];
    $values['field_device_access_version'][LANGUAGE_NONE][0]['value']    = $getallheaders['version_application'];
    $values['field_device_access_build'][LANGUAGE_NONE][0]['value']      = $getallheaders['build'];
    $values['field_is_login'][LANGUAGE_NONE][0]['value']                 = '1';
    $values['field_online'][LANGUAGE_NONE][0]['value']                   = '1';
    $values['field_key_token_notification'][LANGUAGE_NONE][0]['value']   = $getallheaders['token_notification'];
    $values['field_pushkit_token'][LANGUAGE_NONE][0]['value']            = $getallheaders['token_pushkit'];

    // Create the field collection entry and associate it with the profile
    $field_entity = entity_create('field_collection_item', $values);
    $field_entity->setHostEntity('profile2', $profile);
    $field_entity->save();


    $values = array(
      "udid"              => $getallheaders['udid'],
      "platform"          => $getallheaders['platform'],
      "bundle_identifier" => $getallheaders['bundle_identifier'],
      "device_name"       => base64_decode($getallheaders['device_name']),
      "model_number"      => $getallheaders['model_number'],
      "version"           => $getallheaders['version_application'],
      "build"             => $getallheaders['build'],
      "is_login"          => '1',
      "online"            => '1',
      "token_notification"=> $getallheaders['token_notification'],
      "token_pushkit"     => $getallheaders['token_pushkit']
    );
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $field_entity->item_id . "/", $values);
  }
  
  $result['result'] = TRUE;
  $result['account'] = $user ;
  $result['data']   = onLoadDataUser($user);
  return $result;
}

/*
 * hook_user_insert()
 * this hook triggered when a user registered . you can implement it in your custom module.
 * กรณีมีการ add new user จะมีการเรียก hook_user_insert() เราต้องการที่จะสร้าง qrcode ให้ user ที่คนที่อยู่ในระบบ
 */
function idna_user_insert(&$edit, $account, $category) {

  global $firebase;


  if (check_header()) {
    # code...
    $getallheaders = nginx_getallheaders();

    $udid          = $getallheaders['udid'];
    $platform      = $getallheaders['platform'];
    $bundle_identifier  = $getallheaders['bundle_identifier'];
    $version_application= $getallheaders['version_application'];

    $my_id = generateMyID($account->uid);

    // module_load_include('module', 'opentok', 'opentok');
    // $opentok_session_id = opentok_create_session($account->uid)->__toString();

    $badges = array("contact"=>"0", "recent"=>"0", "center"=>"0", "setting"=>"0");

    switch ($platform) {
      case 'ios':
      case 'android':{

          generatorQRCode($account, $platform, $bundle_identifier);

          $profile = profile2_by_uid_load($account->uid, 'main');

          $my_id_item_id = setDefualtMyID($profile, $my_id);
          $badges_item_id = setDefualtBadges($profile);

          $sound_call_waiting_item_id = setDefualtSoundCallWaiting($profile);

          $url_my_qrcode = substr(file_create_url($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));

          
          // $profile->field_opentok_session_id[LANGUAGE_NONE][0]['value'] = $opentok_session_id;
          // profile2_save($profile);

          $mid_value = array();
          $mid_value[$my_id_item_id] = array( "value"    => $my_id, 
                                              "is_edit"  => "1", 
                                              "enabled"  => "1");

          $sound_call_waiting_value = array();
          $sound_call_waiting_value[$sound_call_waiting_item_id] = array("nid"    => "396", 
                                                                          "title"  => "Default Sound Call waiting", 
                                                                          "sound_url"  => "/sites/default/files/sound_call_waiting/sexiest_romantic_mp3.mp3");


          // $defualt_profile = (array)get_defualt_picture(30);
          // $defualt_profile_image_url = substr(file_create_url(image_style_url('medium', getDefualtProfilePicture())), strlen($GLOBALS['base_url']));

          // $defualt_card_background = (array)get_defualt_picture(31);
          // $bg_url = substr(file_create_url(image_style_url('medium', $defualt_card_background['uri'])), strlen($GLOBALS['base_url']));

          

          // add profile ให้กับ user
          $values = array("profiles"=>array(
                          "name"            => $account->name,
                          "url_my_qrcode"   => $url_my_qrcode,
                          "image_url"       => getDefualtProfilePicture(),
                          "bg_url"          => getDefualtBackgroundCardPicture(),
                          "my_id"           => $mid_value,
                          "sound_call_waiting"  => $sound_call_waiting_value,
                          "badge"           => '0',
                          "badges"          => array($badges_item_id=>$badges),
                        ));
          
          /*
           #1 : บันทึก profile ตัวเองไว้ที่ firebase
          */
          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/', $values);


          setDefualtClasss($profile);
          // setDefualtBadges($profile);

          /*
          Load เพือนทั้งหมดขึ้นมาก่อน
          *
          foreach (load_user() as $friend_id => $value){
            if (strcasecmp($account->uid, $friend_id) != 0) {

              $chat_id = generateRandomString(DEFUALT_LENGTH_CHAT_ID);

              
              // เป็นการเพือนให้ตัวเรา
              
              $user_profile = profile2_by_uid_load($account->uid, 'main');

              $friend_values = array();
              $friend_values['field_name'] = 'field_profile_friends'; // field collection name

              $friend_values['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $friend_id;
              $friend_values['field_change_friend_name'][LANGUAGE_NONE][0]['value'] = '';
              $friend_values['field_friend_status'][LANGUAGE_NONE][0]['tid'] = 10;
            
              $field_entity = entity_create('field_collection_item', $friend_values);
              $field_entity->setHostEntity('profile2', $user_profile);
              $field_entity->save();

              //  $field_entity->item_id;

              $values = array(
                "status"       => 'friend',
                "chat_id"      => $chat_id,
                "item_id"      => $field_entity->item_id,
                "create"       => time()
              );
              $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/friends/' . $friend_id . "/", $values);
              

              
              // เป็นการเพิ่มตัวเรา  ให้เพือน
              
              $friend_profile = profile2_by_uid_load($friend_id, 'main');

              $user_values = array();
              $user_values['field_name'] = 'field_profile_friends'; // field collection name

              $user_values['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $account->uid;
              $user_values['field_change_friend_name'][LANGUAGE_NONE][0]['value'] = '';
              $user_values['field_friend_status'][LANGUAGE_NONE][0]['tid'] = 10;
            
              $field_entity = entity_create('field_collection_item', $user_values);
              $field_entity->setHostEntity('profile2', $friend_profile);
              $field_entity->save();

              $values = array(
                "status"       => 'friend',
                "chat_id"      => $chat_id,
                "item_id"      => $field_entity->item_id,
                "create"       => time()
              );
              $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/friends/' . $account->uid . "/", $values);
            }
          }  
          // end foreach 
          */
          
        }
        break;
      
      default:
        # code...
        break;
    }
  }else{

      try {
    
        // เกิดจากเราใช้ระบบหลังบ้านเราสร้างขึ้น
        // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

        generatorQRCode($account, "ios", BUNDLE_IDENTIFIER);

        $profile = profile2_by_uid_load($account->uid, 'main');

        $my_id = generateMyID($account->uid);

        $my_id_item_id = setDefualtMyID($profile, $my_id);
        $badges_item_id = setDefualtBadges($profile);

        $sound_call_waiting_item_id = setDefualtSoundCallWaiting($profile);


        $url_my_qrcode = substr(file_create_url($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));

        // $profile->field_opentok_session_id[LANGUAGE_NONE][0]['value'] = $opentok_session_id;
        // profile2_save($profile);


        $mid_value = array();
        $mid_value[$my_id_item_id] = array("value"     => $my_id, 
                                      "is_edit"   => "1", 
                                      "enabled"   => "1");


        $sound_call_waiting_value = array();
        $sound_call_waiting_value[$sound_call_waiting_item_id] = array("nid"    => "396", 
                                                                       "title"  => "Default Sound Call waiting", 
                                                                       "sound_url"  => "/sites/default/files/sound_call_waiting/sexiest_romantic_mp3.mp3");


        // $defualt_profile = (array)get_defualt_picture(30);
        // $image_url = substr(file_create_url($defualt_profile['uri']), strlen($GLOBALS['base_url']));
        // $defualt_profile_image_url = substr(file_create_url(image_style_url('medium', getDefualtProfilePicture())), strlen($GLOBALS['base_url']));

        // $defualt_card_background = (array)get_defualt_picture(31);
        // $bg_url = substr(file_create_url($defualt_card_background['uri']), strlen($GLOBALS['base_url']));
          
        // add profile ให้กับ user
        $values = array("profiles"=>array(
                            "name"            => $account->name,
                            "url_my_qrcode"   => $url_my_qrcode,
                            "image_url"       => getDefualtProfilePicture(),
                            "bg_url"          => getDefualtBackgroundCardPicture(),
                            "my_id"           => $mid_value,
                            "sound_call_waiting"  => $sound_call_waiting_value,
                            "badge"           => '0',
                            "badges"          => array($badges_item_id=>$badges),
                          ));
            
        $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/', $values);


        setDefualtClasss($profile);
        // setDefualtBadges($profile);

        // Check is Friend ?, if is not is add friend 
        /*
        foreach (load_user() as $friend_id => $value){
          if (strcasecmp($account->uid, $friend_id) != 0) {

            $chat_id = generateRandomString(DEFUALT_LENGTH_CHAT_ID);

            // เป็นการเพือนให้ตัวเรา
            $user_profile = profile2_by_uid_load($account->uid, 'main');

            $friend_values = array();
            $friend_values['field_name'] = 'field_profile_friends'; // field collection name

            $friend_values['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $friend_id;
            $friend_values['field_change_friend_name'][LANGUAGE_NONE][0]['value'] = '';
            $friend_values['field_friend_status'][LANGUAGE_NONE][0]['tid'] = 10;
          
            $field_entity = entity_create('field_collection_item', $friend_values);
            $field_entity->setHostEntity('profile2', $user_profile);
            $field_entity->save();

            $values = array(
              "status"       => 'friend',
              "chat_id"      => $chat_id,
              "item_id"      => $field_entity->item_id,
              "create"       => time()
            );
            $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/friends/' . $friend_id . "/", $values);
            

            // เป็นการเพิ่มตัวเรา  ให้เพือน
            $friend_profile = profile2_by_uid_load($friend_id, 'main');

            $user_values = array();
            $user_values['field_name'] = 'field_profile_friends'; // field collection name

            $user_values['field_friend_uid'][LANGUAGE_NONE][0]['value'] = $account->uid;
            $user_values['field_change_friend_name'][LANGUAGE_NONE][0]['value'] = '';
            $user_values['field_friend_status'][LANGUAGE_NONE][0]['tid'] = 10;
          
            $field_entity = entity_create('field_collection_item', $user_values);
            $field_entity->setHostEntity('profile2', $friend_profile);
            $field_entity->save();

            $values = array(
              "status"       => 'friend',
              "chat_id"      => $chat_id,
              "item_id"      => $field_entity->item_id,
              "create"       => time()
            );
            $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/friends/' . $account->uid . "/", $values);
            
          }
        }  
        // end foreach
        */
      } catch (Exception $e) {
          watchdog(TAG, 'Caught exception: %message', array('%message' => $e->getMessage()), WATCHDOG_INFO);
      }
  }

  create_defualt_application($account->uid);
}

/*
 *  hook_user_delete()
 *  this hook triggered when delete user
*/
function idna_user_delete($account) {  
  watchdog('user', 'idna_user_delete : %userid deleted, Firebase Delete User', array('%userid' => $account->uid), WATCHDOG_NOTICE, $link = NULL);

  global $firebase;

  $profile = profile2_by_uid_load($account->uid, 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.
    
    // ดึงเพือนมาทั้งหมด
    $data_item_load = field_collection_item_load($value['value']);

    // load uid ของ friend ที่เป็นเพือนของเรา เพือ่เราจะไปลบเรา ออกจากเพือนด้วย
    $friend_id = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];
    $fprofile = profile2_by_uid_load($friend_id, 'main');

    if ($fprofile) {
      # code...
      foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $fkey => $fvalue) {
        $fdata_item_load = field_collection_item_load($fvalue['value']);

        if($fdata_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $account->uid){
          $wrapper = entity_metadata_wrapper('field_collection_item', $fdata_item_load);    
          entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
          break;
        }
      }

      // ลบ เราที่เป้นเพือน ของเพือน ออกด้วย
      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/friends/' . $account->uid);
    }
  }

  $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid);
}

/*
 *  hook_user_update()
 *  this hook triggered when update user
*/
// function idna_user_update(&$edit, $account, $category) {
//   watchdog(TAG, 'User Update = %uid', array('%uid' => $account->uid), WATCHDOG_INFO);
// }

/*
 * function hook_profile2_update($profile) {
 *
*/
function idna_profile2_update($profile) {
  // watchdog(TAG, 'idna_profile2_update => %profile', array('%profile' => serialize($profile)), WATCHDOG_INFO);

  /*
  try {

    // ชื่อ
    $profile_name ="";
    if(isset($profile->field_profile_name)){
      if (!empty($profile->field_profile_name[LANGUAGE_NONE])) {
        $profile_name = $profile->field_profile_name[LANGUAGE_NONE][0]['value'];
      }
    }

    // นามสกุล
    $profile_subname ="";
    if(isset($profile->field_profile_subname)){
      if (!empty($profile->field_profile_subname[LANGUAGE_NONE])) {
        $profile_subname = $profile->field_profile_subname[LANGUAGE_NONE][0]['value'];
      }
    }

    // นามสกุล
    $profile_display_name ="";
    if(isset($profile->field_profile_display_name)){
      if (!empty($profile->field_profile_display_name[LANGUAGE_NONE])) {
        $profile_display_name = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
      }
    }

    // รูปโปรไฟล์
    $profile_picture = array();
    if(isset($profile->field_profile_image)){
      if (!empty($profile->field_profile_image[LANGUAGE_NONE])) {
        $profile_picture = file_load($profile->field_profile_image[LANGUAGE_NONE][0]['fid']);
      }
    }

    // My ID
    $my_id ="";
    if(isset($profile->field_profile_heart_id)){
      if (!empty($profile->field_profile_heart_id[LANGUAGE_NONE])) {
        $my_id = $profile->field_profile_heart_id[LANGUAGE_NONE][0]['value'];
      }
    }

    // เบอร์โทร
    $profile_multi_phone = array();
    if(isset($profile->field_profile_multi_phone)){
      if (!empty($profile->field_profile_multi_phone[LANGUAGE_NONE])) {
        foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $key => $value) {
          $item = field_collection_item_load($value['value']);

          $tmp = array();
          $tmp["name"] = $item->field_phone_number[LANGUAGE_NONE][0]['value'];

          // array_push($profile_multi_phone, $item->field_phone_number[LANGUAGE_NONE][0]['value']);

          $profile_multi_phone[$value['value']] = $tmp;
        }
      }
    }

    // email
    $profile_multi_email = array();
    if(isset($profile->field_profile_multi_email)){
      if (!empty($profile->field_profile_multi_email[LANGUAGE_NONE])) {
        foreach ($profile->field_profile_multi_email[LANGUAGE_NONE] as $key => $value) {
          $item = field_collection_item_load($value['value']);

          $tmp = array();
          $tmp["name"] = $item->field_email_text[LANGUAGE_NONE][0]['value'];

          // array_push($profile_multi_email, $item->field_email_text[LANGUAGE_NONE][0]['value']);
          $profile_multi_email[$value['value']] = $tmp;
        }
      }
    }

    $status_message ="";
    if(isset($profile->field_profile_status_message)){
      if (!empty($profile->field_profile_status_message[LANGUAGE_NONE])) {
        $status_message = $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'];
      }
    }

    // อุปกรณ์ที่ User Access
    $device_access = array();
    if(isset($profile->field_device_access)){
      if (!empty($profile->field_device_access[LANGUAGE_NONE])) {
        foreach ($profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
          $items = field_collection_item_load($value['value']);
          // array_push($device_access, $item->field_email_text[LANGUAGE_NONE][0]['value']);

          // field_udid
          // field_token
          // field_platform
          // field_bundle_identifier

          $item = array();
          $item['bundleidentifier'] =$items->field_bundle_identifier[LANGUAGE_NONE][0]['value'];
          $item['online'] ='1';
          $item['platform'] =$items->field_platform[LANGUAGE_NONE][0]['value'];

          $device_access[$items->field_udid[LANGUAGE_NONE][0]['value']] = $item;
        }
      }
    }

    $contacts = array();
    if(isset($profile->field_profile_friends)){
      if (!empty($profile->field_profile_friends[LANGUAGE_NONE])) {
        foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
          $items = field_collection_item_load($value['value']);
          // array_push($device_access, $item->field_email_text[LANGUAGE_NONE][0]['value']);

          // UID ของเพื่อน                       : field_friend_uid
          // จำนวน Heart ที่เราได้รับจากเพือนคนนี้ : field_heart_receive
          // เวลาที่เราได้รับจากเพือนคนนี้         : field_datetime_receive
          // จำนวน Heart ที่เราส่งถึงเพือนคนนี้    : field_heart_send
          // เวลาที่เราส่งถึงเพือนคนนี้            : field_datetime_send
          // สถานะ เพือน                        : field_heart_friend_status
          // ชื่อเพือน                           : field_friend_name
          // ชื่อของเพื่อนที่เราตั้ง                : field_display_name
          // ปิดเสียง notifications             : field_turn_off_notifications

        
          
          $item = array();
          $item['uid']            = $items->field_friend_uid[LANGUAGE_NONE][0]['value'];
          $item['friend_name']    = $items->field_friend_name[LANGUAGE_NONE][0]['value'];
          $item['default_name']   = $items->field_display_name[LANGUAGE_NONE][0]['value'];
          $item['friend_status']  = $items->field_heart_friend_status[LANGUAGE_NONE][0]['value'];
          $item['status_message'] = $items->field_profile_status_message[LANGUAGE_NONE][0]['value'];
          $item['platform']       = $items->field_platform[LANGUAGE_NONE][0]['value'];
          $item['send']           = $items->field_heart_send[LANGUAGE_NONE][0]['value'];
          $item['receive']        = $items->field_heart_receive[LANGUAGE_NONE][0]['value'];
          $item['notifications_status']  = $items->field_turn_off_notifications[LANGUAGE_NONE][0]['value'];

          // field_turn_off_notifications

          $item['picture'] = array();
          $fprofile = profile2_by_uid_load($items->field_friend_uid[LANGUAGE_NONE][0]['value'], 'main');
          if (isset($fprofile->field_profile_image)) {
            # code...
            if (!empty($fprofile->field_profile_image[LANGUAGE_NONE])) {
              $item['picture'] = $fprofile->field_profile_image[LANGUAGE_NONE][0];
            }
          }
          $contacts[$items->field_friend_uid[LANGUAGE_NONE][0]['value']] = $item;
        }
      }
    }

    $qrcodes = array();
    // My QRCode (Heart App) ios
    $profile_my_qrcode = array();
    if(isset($profile->field_profile_my_qrcode)){
      if (!empty($profile->field_profile_my_qrcode[LANGUAGE_NONE])) {
        $item = array();
        $qrcodes['ios'][str_replace('.', '_', BI_IOS_idna)] = file_load($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['fid']) ;
      }
    }

    // My QRCode (DNA App) ios 
    $profile_my_qrcode_dna = array();
    if(isset($profile->field_profile_my_qrcode_dna)){
      if (!empty($profile->field_profile_my_qrcode_dna[LANGUAGE_NONE])) {
        $item = array();

        $qrcodes['ios'][str_replace('.', '_', BI_IOS_IDNA)] = file_load($profile->field_profile_my_qrcode_dna[LANGUAGE_NONE][0]['fid']) ;
      }
    }

    // My QRCode Android (Heart app) android
    $profile_my_qrcode_android = array();
    if(isset($profile->field_profile_my_qrcode_android)){
      if (!empty($profile->field_profile_my_qrcode_android[LANGUAGE_NONE])) {
        $item = array();

        $qrcodes['android'][str_replace('.', '_', BI_ANDROID_idna)] = file_load($profile->field_profile_my_qrcode_android[LANGUAGE_NONE][0]['fid']) ;
      }
    }

    // My QRCode DNA Android (DNA App)  
    $profile_my_qrcode_dna_andr = array();
    if(isset($profile->field_profile_my_qrcode_dna_andr)){
      if (!empty($profile->field_profile_my_qrcode_dna_andr[LANGUAGE_NONE])) {
        $item = array();

        $qrcodes['android'][str_replace('.', '_', BI_ANDROID_IDNA)] = file_load($profile->field_profile_my_qrcode_dna_andr[LANGUAGE_NONE][0]['fid']) ;
      }
    }

    // My Application : field_my_application
    $my_applications = array();
    if(isset($profile->field_my_application)){
      if (!empty($profile->field_my_application[LANGUAGE_NONE])) {
        foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
          $items = field_collection_item_load($value['value']);
          
          $item = array();
          $item['item_id']        = $value['value'];
          $item['name']           = $items->field_my_app_name[LANGUAGE_NONE][0]['value'];
          $item['category']       = $items->field_my_app_category[LANGUAGE_NONE][0]['tid'];
          $item['picture']        = file_load($items->field_image[LANGUAGE_NONE][0]['fid']);

          
          $posts = array();
          if(isset($items->field_my_app_update)){
            if (!empty($items->field_my_app_update[LANGUAGE_NONE])) {
              foreach ($items->field_my_app_update[LANGUAGE_NONE] as $pkey => $pvalue) {

                  $pitems = field_collection_item_load($pvalue['value']);
                  $posts[$pvalue['value']]["title"]    = $pitems->field_my_app_title[LANGUAGE_NONE][0]['value'];
                  $posts[$pvalue['value']]["message"]  = $pitems->field_my_app_message_udate[LANGUAGE_NONE][0]['value'];
                  $posts[$pvalue['value']]['picture']  = file_load($pitems->field_image[LANGUAGE_NONE][0]['fid']);

                  $comments =array();
                  
                  if(isset($pitems->field_my_app_update_comment)){
                    if (!empty($pitems->field_my_app_update_comment[LANGUAGE_NONE])) {
                      foreach ($pitems->field_my_app_update_comment[LANGUAGE_NONE] as $ckey => $cvalue) {
                          $citems = field_collection_item_load($cvalue['value']);

                          $comments[$cvalue['value']]['message'] = $citems->field_comment_message[LANGUAGE_NONE][0]['value'];
                      }
                    }
                  }
                  
                  $posts[$pvalue['value']]['comments']  = $comments;
              }
            }
          }

          $item['posts']  = $posts;
      
          $my_applications[$value['value']] = $item;
        }
      }
    }
  
    
    $val = array();
    $val['create']        = $profile->created;
    $val['name']          = $profile_name;
    $val['subname']       = $profile_subname;
    $val['display_name']  = $profile_display_name;
    $val['devices']       = $device_access;
    $val['mails']         = $profile_multi_email;
    $val['phones']        = $profile_multi_phone;
    $val['picture']       = $profile_picture;
    $val['my_id']         = $my_id;
    $val['status_message']= $status_message;
    $val['qr']            = $qrcodes;
    $val['contacts']       = $contacts;
    $val['my_applications']       = $my_applications;
    
    $val['update']        = time();

    // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
    // $output = $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $profile->uid .'/data/', $val);
   

    watchdog(TAG, 'Firebase hook_node_insert = %qrcodes, %val', array('%qrcodes' => $qrcodes), WATCHDOG_INFO);

    // update image ของเราที่เราเป้นเพื่อน
    // foreach ($contacts as $key => $value) {
    //     $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $key .'/data/friends/' . $profile->uid .'/picture/', $profile_picture);
    // }
  } catch (Exception $e) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
    watchdog(TAG, 'ERROR hook_node_insert = %node', array('%node' => serialize($e->getMessage())), WATCHDOG_INFO);
  } finally {
    watchdog(TAG, 'Finally hook_node_insert', array(), WATCHDOG_INFO);
  }
  */
}

/*
  hook_profile2_delete
*/
function hook_profile2_delete($profile){

}

/*
hook_node_insert($node)
*/
function idna_node_insert($node){
  /**
   เราต้องเช็ก type = 'slide_store' และ status = 1 เท่านั้นถึงจะ ไป update ที่  firebase
  */
  if ($node->type == 'slide_store' && $node->status == 1) {

    global $firebase;

    $image_url = (array)file_load($node->field_image[LANGUAGE_NONE][0]['fid']);

    $link_url = "";
    if (isset($node->field_slide_url[LANGUAGE_NONE])) {
      $link_url = $node->field_slide_url[LANGUAGE_NONE][0]['value'];
    }

    $items = array("name"       => $node->title,
                   "url_image"  => substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url'])),
                   "link_url"   => $link_url);

    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER_SLIDE . '/' . $node->nid, $items);
  }
}

/*
hook_node_update($node)
*/
function idna_node_update($node){
  /**
   เราต้องเช็ก type = 'slide_store' และ status = 1 เท่านั้นถึงจะ ไป update ที่  firebase
  */
  if ($node->type == 'slide_store') {

    global $firebase;
    if ($node->status == 0) {
      // ต้องลบ slide ออกจาก firebase ด้วย
      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER_SLIDE . '/' . $node->nid);
    }else if($node->status == 1){
      // ต้องเพิ่ม slide ออกจาก firebase ด้วย
      $items = array();

      $image_url = (array)file_load($node->field_image[LANGUAGE_NONE][0]['fid']);

      $link_url = "";
      if (isset($node->field_slide_url[LANGUAGE_NONE])) {
        $link_url = $node->field_slide_url[LANGUAGE_NONE][0]['value'];
      }

      $items = array("name"       => $node->title,
                     "url_image"  => substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url'])),
                     "link_url"   => $link_url);

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER_SLIDE . '/' . $node->nid, $items);
    }
  } else if(strcmp($node->type, 'application') == 0){
    // watchdog(TAG, 'hook_node_update {application} = %nid - %data', array('%nid' => $node->nid, '%data'=>serialize($node) ), WATCHDOG_INFO);
  }
}

/*
 hook_node_delete($node)
*/
function idna_node_delete($node){
  if ($node->type == 'slide_store') {
    global $firebase;
    $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER_SLIDE . '/' . $node->nid);
  }
}

/*
  hook_field_collection_item_insert
*/
function idna_field_collection_item_insert(FieldCollectionItemEntity $field_collection_item) {
  // watchdog(TAG, 'idna_field_collection_item_insert = %field_collection_item', array('%field_collection_item' => serialize($field_collection_item)), WATCHDOG_INFO);

  // dpm("idna_field_collection_item_insert");

  /*
  switch (mb_strtolower($field_collection_item->op)) {
    case 'save':{
      # code...
      //dpm("idna_field_collection_item_update");
      // dpm($field_collection_item);
      switch ($field_collection_item->field_name) {
        case 'field_my_application':{

          break;
        }
        case 'field_my_app_update':{
          if(!empty($_REQUEST['a_id'])) {
            
          }
          break;
        }
        case 'field_my_app_update_comment':{
          if(!empty($_REQUEST['a_id']) && !empty($_REQUEST['p_id'])) {
            
          }
          break;
        }
        
        default:
          # code...
          break;
      }

      break;
    }
    
    default:
      # code...
      break;
  }
  */
}


/*
  hook_field_collection_item_update
*/
  /*
function idna_field_collection_item_update(FieldCollectionItemEntity $field_collection_item) {
  // watchdog(TAG, 'idna_field_collection_item_update = %field_collection_item', array('%field_collection_item' => serialize($field_collection_item)), WATCHDOG_INFO);

  // dpm("idna_field_collection_item_update");

  switch (mb_strtolower($field_collection_item->op)) {
    case 'save':{
      switch ($field_collection_item->field_name) {
        case 'field_my_application':{

          break;
        }
        case 'field_my_app_update':{
          if(!empty($_REQUEST['a_id'])) {
            
          }
          break;
        }
        case 'field_my_app_update_comment':{
          if(!empty($_REQUEST['a_id']) && !empty($_REQUEST['p_id'])) {
            
          }
          break;
        }
        
        default:
          # code...
          break;
      }
      break;
    }
    
    default:
      # code...
      break;
  }
}
*/

/*
  hook_field_collection_item_delete
*/
function idna_field_collection_item_delete(FieldCollectionItemEntity $field_collection_item) {
  // watchdog(TAG, 'idna_field_collection_item_delete = %field_collection_item, $_REQUEST = %REQUEST', array('%field_collection_item' => serialize($field_collection_item), '%REQUEST' => serialize($_REQUEST)), WATCHDOG_INFO);

  // dpm("idna_field_collection_item_delete");

  switch ($field_collection_item->field_name) {
    case "field_my_application":{
      # My Application

    }
      break;
    case 'field_my_app_update':{
      # Post

    }
      break;
    case 'field_my_app_update_comment':{
      # Comment

    }
      break;
    
    default:
      # code...
      break;
  }
}

/*
 * Implemantation of hook_services_resources()
 * 
 $platform, $bundleidentifier
*/
function idna_services_resources()
{
  $services = array(
    // 
    'login'=>array(
      'create' =>array(
        'help'=>'Services : Login',
        'callback'=>'login',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'login_with_social'=>array(
      'create' =>array(
        'help'=>'Services login_with_social',
        'callback'=>'login_with_social',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'logout'=>array(
      'create' =>array(
        'help'=>'Services User Logout',
        'callback'=>'logout',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'force_logout'=>array(
      'create' =>array(
        'help'=>'Services User force logout',
        'callback'=>'force_logout',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'annmousu'=>array(
      'create' =>array(
        'help'=>'Services : เป็น services ใช่ login แบบ annmousu(แบบไม่มี user login ใช้ device เป้นตัวยืนยันตัวตน 1 device loigin กี่ครั้งก็จะเป็นข้อมูลชุดเดียวกัน)',
        'callback'=>'annmousu',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),



    'annmousu_register'=>array(
      'create' =>array(
        'help'=>'Services Anonymous Register',
        'callback'=>'annmousu_register',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    // 
     'annmousu_verify'=>array(
      'create' =>array(
        'help'=>'Services Anonymous Verify',
        'callback'=>'annmousu_verify',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'voip'=>array(
      'create' =>array(
        'help'=>'Services : Voip',
        'callback'=>'voip',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'go_live_streaming'=>array(
      'create' =>array(
        'help'=>'Services Go Live streaming.',
        'callback'=>'go_live_streaming',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'twilio_voice_access_token'=>array(
      'create' =>array(
        'help'=>'Services : Twilio Voice token generated(function ทีใช้สำหรับสร้าง token และมีการส่ง voip ไปที่ client ด้วย)',
        'callback'=>'twilio_voice_access_token',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'twilio_room_generation'=>array(
      'create' =>array(
        'help'=>'Services : Twilio token generated(function ทีใช้สำหรับสร้าง token และมีการส่ง voip ไปที่ client ด้วย)',
        'callback'=>'twilio_room_generation',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'twilio'=>array(
      'create' =>array(
        'help'=>'Services : twilio',
        'callback'=>'twilio',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'twilio_voice_accessToken'=>array(
      'create' =>array(
        'help'=>'Services : Twilio Voice AccessToken',
        'callback'=>'twilio_voice_accessToken',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'application_category'=>array(
      'create' =>array(
        'help'=>'Services ดึง Category ของ Application',
        'callback'=>'application_category',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'get_gender'=>array(
      'create' =>array(
        'help'=>'Services ดึง Category ของ Gender',
        'callback'=>'get_gender',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'delete_my_application'=>array(
      'create' =>array(
        'help'=>'Services ลบ My Application',
        'callback'=>'delete_my_application',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'user_friends'=>array(
      'create' =>array(
        'help'=>'Fetch User Profile',
        'callback'=>'user_friends',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
              'name' => 'uid',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'uid'),
              'optional' => FALSE,
            ),
        ),
      ),
    ),
    'user_friends_heart'=>array(
      'create' =>array(
        'help'=>'Fetch User Friend heart',
        'callback'=>'user_friends_heart',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
              'name' => 'uid',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'uid'),
              'optional' => FALSE,
            ),
        ),
      ),
    ),
     'list_friends'=>array(
      'create' =>array(
        'help'=>'Fetch List Friends',
        'callback'=>'list_friends',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
              'name' => 'uid',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'uid'),
              'optional' => FALSE,
            ),
        ),
      ),
    ),

    'user_forgot_password'=>array(
      'create' =>array(
        'help'=>'Services Forgot password.',
        'callback'=>'user_forgot_password',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'conversation_send_notification'=>array(
      'create' =>array(
        'help'=>'Services : Send Notification ตอนคุย Chat',
        'callback'=>'conversation_send_notification',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'qrcode_login'=>array(
      'create' =>array(
        'help'=>'Services : qrcode login : เป็นการ registered device_access',
        'callback'=>'qrcode_login',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'add_friend'=>array(
      'create' =>array(
        'help'=>'Services เพิ่ม Friend',
        'callback'=>'add_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    // 
    'accept_friend'=>array(
      'create' =>array(
        'help'=>'Services ตอบรับคำเชิญขอเป็นเพือน',
        'callback'=>'accept_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'not_accept_friend'=>array(
      'create' =>array(
        'help'=>'Services ปฎิเสธคำเชิญขอเป็นเพือน',
        'callback'=>'not_accept_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'delete_friend'=>array(
      'create' =>array(
        'help'=>'Services ลบเพือน',
        'callback'=>'delete_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
     'send_heart_to_friends'=>array(
      'create' =>array(
        'help'=>'Services ส่ง heart to friend',
        'callback'=>'send_heart_to_friends',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'find_friend'=>array(
      'create' =>array(
        'help'=>'ค้นหาเพือนโดย my id, qrcode',
        'callback'=>'find_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'recreate_qrcode'=>array(
      'create' =>array(
        'help'=>'สร้าง qrcode ใหม่ให้กับ user',
        'callback'=>'recreate_qrcode',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'people_you_may_know'=>array(
      'create' =>array(
        'help'=>'Services ค้นหาเพือน ที่คุณอาจรุ็จัก',
        'callback'=>'people_you_may_know',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'shby_class'=>array(
      'create' =>array(
        'help'=>'Services Send Heart by Class',
        'callback'=>'shby_class',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'edit_display_name'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข Display Name ของ User',
        'callback'=>'edit_display_name',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'turn_off_notifications'=>array(
      'create' =>array(
        'help'=>'Services ปิดเสียง  notication โดยสามารถแยกปิดเป็นรายบุคคล',
        'callback'=>'turn_off_notifications',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'hide_friend'=>array(
      'create' =>array(
        'help'=>'Services hide friend โดยสามารถแยกปิดเป็นรายบุคคล',
        'callback'=>'hide_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'set_class_friend'=>array(
      'create' =>array(
        'help'=>'Services Class friend โดยสามารถแยกปิดเป็นรายบุคคล',
        'callback'=>'set_class_friend',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'cancel_wait_to_accept'=>array(
      'create' =>array(
        'help'=>'Services Cancel Wait to Accept โดยสามารถแยกปิดเป็นรายบุคคล',
        'callback'=>'cancel_wait_to_accept',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'edit_friend_display_name'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข Display Name ของ Friend',
        'callback'=>'edit_friend_display_name',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'edit_phone_v1_0'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข Phone v 1.0 ของ User',
        'callback'=>'edit_phone_v1_0',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'edit_phone'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข Phone ของ User',
        'callback'=>'edit_phone',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'edit_multi_phone'=>array(
      'create' =>array(
        'help'=>'Services เพิ่ม, แก้ไข, ลบ Phone ของ User',
        'callback'=>'edit_multi_phone',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'edit_multi_email'=>array(
      'create' =>array(
        'help'=>'Services เพิ่ม, แก้ไข, ลบ Email ของ User',
        'callback'=>'edit_multi_email',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ), 
    'list_default_call_waiting'=>array(
      'create' =>array(
        'help'=>'Services list_default_call_waiting',
        'callback'=>'list_default_call_waiting',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ), 
    'add_call_waiting'=>array(
      'create' =>array(
        'help'=>'Services add_call_waiting',
        'callback'=>'add_call_waiting',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ), 
    'edit_status_message'=>array(
      'create' =>array(
        'help'=>'Services status message ของ User',
        'callback'=>'edit_status_message',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'incoming_call'=>array(
      'create' =>array(
        'help'=>'Services : จะ tigger เมือมีการกดรับสาบ ดังนั้นเราจึงจำเป้นต้องส่ง VoIP (กรณีเราเช้ดได้ว่า user {คนรับสายมีหลาย device})',
        'callback'=>'incoming_call',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

     'outgoing_call'=>array(
      'create' =>array(
        'help'=>'Services : จะ tigger เมือมีการกดรับสาบ ดังนั้นเราจึงจำเป้นต้องส่ง VoIP (กรณีเราเช้ดได้ว่า user {คนรับสายมีหลาย device})',
        'callback'=>'outgoing_call',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'list_live_streaming'=>array(
      'create' =>array(
        'help'=>'Services ดึงข้อมูลทั้งหมดที่กำลัง live streaming',
        'callback'=>'list_live_streaming',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'list_game_live'=>array(
      'create' =>array(
        'help'=>'Services ดึงข้อมูลทั้งหมดที่กำลัง game live ',
        'callback'=>'list_game_live',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    
    'update_token_notication'=>array(
      'create' =>array(
        'help'=>'Services Set Token notication',
        'callback'=>'update_token_notication',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'update_token_pushkit'=>array(
      'create' =>array(
        'help'=>'Services Set Token Pushkit',
        'callback'=>'update_token_pushkit',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'center_create_chat'=>array(
      'create' =>array(
        'help'=>'Services สร้างการ chat ของ application',
        'callback'=>'center_create_chat',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'search_application'=>array(
      'create' =>array(
        'help'=>'Services ค้นหา application',
        'callback'=>'search_application',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'center_get_detail_application'=>array(
      'create' =>array(
        'help'=>'Services ดึงข้อมูลของ applicataion ',
        'callback'=>'center_get_detail_application',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'get_profiles'=>array(
      'create' =>array(
        'help'=>'Services Get profiles ตาม array uid ที่ส่งมา',
        'callback'=>'get_profiles',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'update_my_application_profile'=>array(
      'create' =>array(
        'help'=>'idna Update My Application Profile',
        'callback'=>'update_my_application_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'update_picture_profile'=>array(
      'create' =>array(
        'help'=>'idna Update Profile',
        'callback'=>'update_picture_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'update_picture_bg'=>array(
      'create' =>array(
        'help'=>'idna Update Profile BG',
        'callback'=>'update_picture_bg',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'update_profile'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข Display Name, Status ของ User',
        'callback'=>'update_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'update_device_access'=>array(
      'create' =>array(
        'help'=>'Services แก้ไขข้อมูล device access ซึ่งถูก เรียกใช้งานจาก triggered firebase',
        'callback'=>'update_device_access',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'create_my_card'=>array(
      'create' =>array(
        'help'=>'idna Create My Card',
        'callback'=>'create_my_card',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    'create_class'=>array(
      'create' =>array(
        'help'=>'สร้าง Class ของแต่ละ account',
        'callback'=>'create_class',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'create_my_application'=>array(
      'create' =>array(
        'help'=>'idna Create My Application',
        'callback'=>'create_my_application',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_following'=>array(
      'create' =>array(
        'help'=>'Services delete() following',
        'callback'=>'delete_following',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'update_my_applications'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข data my applications',
        'callback'=>'update_my_applications',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'update_my_applications_live'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข data my applications live',
        'callback'=>'update_my_applications_live',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'update_chat_group'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข data chat group',
        'callback'=>'update_chat_group',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'update_my_applications_follow'=>array(
      'create' =>array(
        'help'=>'เป้น function ที่ใช้สำหรับ update follow & unfollow ของ applications',
        'callback'=>'update_my_applications_follow',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'update_my_application_post_like'=>array(
      'create' =>array(
        'help'=>'เป้น function ที่ใช้สำหรับแก้ไข & Update Like ของ Post ของ application การที่เราสร้าง post like เพราะเราต้องการ item_id (Like Nid เพือ่เราจะวิ่งมา update ได้ถูกต้องที่ database)',
        'callback'=>'update_my_application_post_like',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'center_post_comments_like'=>array(
      'create' =>array(
        'help'=>'เป้น function ที่ใช้สำหรับแก้ไข & Update Like comment ของ Post ของ application การที่เราสร้าง comment like เพราะเราต้องการ item_id (Like Nid เพือ่เราจะวิ่งมา update ได้ถูกต้องที่ database)',
        'callback'=>'center_post_comments_like',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'add_comment_parent'=>array(
      'create' =>array(
        'help'=>'function ที่ใช้เพิ่ม comments ทีเป้น parent',
        'callback'=>'add_comment_parent',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'edit_comment_parent'=>array(
      'create' =>array(
        'help'=>'function ที่ใช้แก้ไข comments ทีเป้น parent',
        'callback'=>'edit_comment_parent',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),


    'add_reply_comment_child'=>array(
      'create' =>array(
        'help'=>'function ที่ใช้เพิ่ม reply comments ทีเป้น parent',
        'callback'=>'add_reply_comment_child',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'edit_reply_comment_child'=>array(
      'create' =>array(
        'help'=>'function ที่ใช้แก้ไข reply comments ทีเป้น parent',
        'callback'=>'edit_reply_comment_child',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

     'center_post_update_comments'=>array(
      'create' =>array(
        'help'=>'Add Post ในส่วนของ My Application',
        'callback'=>'center_post_update_comments',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    // add_post
    'add_post'=>array(
      'create' =>array(
        'help'=>'Add Post ในส่วนของ My Application',
        'callback'=>'add_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

     'edit_post'=>array(
      'create' =>array(
        'help'=>'Edit Post ในส่วนของ My Application',
        'callback'=>'edit_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'like_post'=>array(
      'create' =>array(
        'help'=>'Like Post ในส่วนของ My Application',
        'callback'=>'like_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),


    'AED_post'=>array(
      'create' =>array(
        'help'=>'Add Edit Delete Post ในส่วนของ My Application',
        'callback'=>'AED_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_post'=>array(
      'create' =>array(
        'help'=>'Delete Post ในส่วนของ My Application',
        'callback'=>'delete_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_comment_of_posts'=>array(
      'create' =>array(
        'help'=>'Delete Comment ในส่วนของ Posts',
        'callback'=>'delete_comment_of_posts',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_replycomment_of_myapplication'=>array(
      'create' =>array(
        'help'=>'Delete Reply Comment ในส่วนของ My Application',
        'callback'=>'delete_replycomment_of_myapplication',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'center_post_delete_comments'=>array(
      'create' =>array(
        'help'=>'Delete comments',
        'callback'=>'center_post_delete_comments',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    // comment_post
    'comment_post'=>array(
      'create' =>array(
        'help'=>'Comment Post ในส่วนของ My Application',
        'callback'=>'comment_post',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'update_new_password'=>array(
      'create' =>array(
        'help'=>'Update New Password',
        'callback'=>'update_new_password',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'idna_fetch_profile'=>array(
      'create' =>array(
        'help'=>'Fetch User Profile',
        'callback'=>'idna_fetch_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
              'name' => 'uid',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'uid'),
              'optional' => FALSE,
            ),
        ),
      ),
    ),
    'idna_update_profile'=>array(
      'create' =>array(
        'help'=>'idna Update Profile',
        'callback'=>'idna_update_profile',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'get_store'=>array(
      'create' =>array(
        'help'=>'Services Get Store',
        'callback'=>'get_store',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'get_app_detail'=>array(
      'create' =>array(
        'help'=>'Services detail application',
        'callback'=>'get_app_detail',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
    'create_chat_group'=>array(
      'create' =>array(
        'help'=>'Services สร้าง Chat group : param uid, name(ชื่อกลุ่ม),image, members(array)',
        'callback'=>'create_chat_group',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'update_user_chat_group'=>array(
      'create' =>array(
        'help'=>'Services สร้าง Update Data : param uid, group_id, data',
        'callback'=>'update_user_chat_group',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
    // 
    'user_for_friend_editupdate'=>array(
      'create' =>array(
        'help'=>'Services แก้ไข, เพิ่มเติม field friend ของ user : param uid, friend_id, data',
        'callback'=>'user_for_friend_editupdate',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'user_for_friend_delete'=>array(
      'create' =>array(
        'help'=>'Services ลบ friend ของ user : param uid, friend_id',
        'callback'=>'user_for_friend_delete',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_chat_group'=>array(
      'create' =>array(
        'help'=>'Services ลบ Group Chat : param uid, group_id',
        'callback'=>'delete_chat_group',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_member_group_chat'=>array(
      'create' =>array(
        'help'=>'Services สร้าง Delete Chat : param uid, group_id',
        'callback'=>'delete_member_group_chat',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'delete_classs'=>array(
      'create' =>array(
        'help'=>'Services ลบ Classs : param uid, group_id',
        'callback'=>'delete_classs',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),
  
    'delete_center_chat'=>array(
      'create' =>array(
        'help'=>'Services ลบ Center Chat',
        'callback'=>'delete_center_chat',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),

    'update_picture_chat_group'=>array(
      'create' =>array(
        'help'=>'Update Profile Chat Group : group_id, picture',
        'callback'=>'update_picture_chat_group',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'group_invite_new_members'=>array(
      'create' =>array(
        'help'=>'Services การเพิ่ม member ใหม่ใน Group : param uid, group_id, members(array)',
        'callback'=>'group_invite_new_members',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),



    'chat_upload_picture'=>array(
      'create' =>array(
        'help'=>'เป็น services ใช้สำหรับ chat upload picture',
        'callback'=>'chat_upload_picture',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'chat_upload_video'=>array(
      'create' =>array(
        'help'=>'เป็น services ใช้สำหรับ chat upload video',
        'callback'=>'chat_upload_video',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

    'free_call'=>array(
      'create' =>array(
        'help'=>'เป็น services ใช้สำหรับ free_call',
        'callback'=>'free_call',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
        /* กรณีที่เราต้องการ pass parameter */
        'args' => array(
          array(
           'name' => 'parameters',
           'type' => 'array',
           'description' => '',
           'source' => 'param',
           'optional' => TRUE,
           'default value' => array(),
          ),
        ),
      ),
    ),

  );
  
  return $services;
}

function tw_parentStatusCallback(){

  if (isset($_REQUEST['CallSid'])) {
    $CallSid              = $_REQUEST['CallSid'];
    $ConferenceSid        = $_REQUEST['ConferenceSid'];
    $StatusCallbackEvent  = $_REQUEST['StatusCallbackEvent'];

    // stutus ของ callSid 
    // $StatusCallbackEvent           = $_REQUEST['CallStatus'];

    $query  = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'field_collection_item')
                  ->entityCondition('bundle', 'field_tw_voice_members')
                  ->fieldCondition('field_tw_voice_members_sid', 'value', $CallSid, '=')
                  ->execute();

    if (!empty($entities['field_collection_item'])) {
      $item_id = array_keys($entities['field_collection_item'])[0];
      // dpm($item_id);

      


      $data_item = field_collection_item_load($item_id);
      if ($data_item) {

        /*
        เป็นการ update ConferenceSid 
        */
        $node  = node_load($data_item->hostEntity()->nid);  
        $node_wrapper = entity_metadata_wrapper('node', $node);
        $node_wrapper->field_tw_voice_conferencesid->set($ConferenceSid);
        $node_wrapper->save();
        /*
        เป็นการ update ConferenceSid 
        */


        $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
        
        if (strcmp($wrapper->field_tw_voice_members_status->value(), $StatusCallbackEvent) != 0) {
          $wrapper->field_tw_voice_members_status->set($StatusCallbackEvent);
          $wrapper->save();
        }

        $values = array("status" => $StatusCallbackEvent);

        global $firebase;
        $firebase->update(FIREBASE_DEFAULT_PATH . "tw_voice/" . $data_item->hostEntity()->nid . "/members/" . $item_id , $values);

      }
    }

    // watchdog(TAG, 'tw_parentStatusCallback %params | %CallSid | %ConferenceSid | %StatusCallbackEvent | item_id > %item_id | CallStatus > %CallStatus |&| nid > %nid', array('%params'=> serialize($_REQUEST), '%CallSid'=>$CallSid, '%ConferenceSid'=>$ConferenceSid, '%StatusCallbackEvent'=>$StatusCallbackEvent, '%item_id'=> $item_id, '%CallStatus'=>$StatusCallbackEvent, '%nid'=>$data_item->hostEntity()->nid), WATCHDOG_INFO);

  }
}

function tw_clientStatusCallback(){
  watchdog(TAG, 'tw_clientStatusCallback %params', array('%params'=> serialize($_REQUEST)), WATCHDOG_INFO);

}

/*
https://www.twilio.com/docs/api/twiml/play
*/
function tw_waitUrl(){
  $response = new Twilio\Twiml();
  $response->play('http://188.166.208.70/sites/default/files/mp3/y2mate_com_g6dcTw9mGDE.mp3', ['loop' => 2]);
  echo $response;
}

function tw_voice_makeCall() {  
  $callerId = 'client:quick_start';
  $to = isset($_REQUEST["to"]) ? $_REQUEST["to"] : "";

  $response = new Twilio\Twiml();
  if (!isset($to) || empty($to)) {
    $response->say('Congratulations! You have just made your first call! Good bye.');
  } else if (is_numeric($to)) {
    $dial = $response->dial(
      array(
        'callerId' => $callerNumber
      ));
    $dial->number($to);
  } else {
    $dial = $response->dial(
      array(
         'callerId' => $callerId
      ));
    // $dial->client($to);

    $dial->conference("test");

    /*
 $name     = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
          $handle = array(
                  "uid"     => $uid,
                  "name"    => $name,
                  "group_id"=> $group_id
                  );
          apns_voip($uuid, $pushkit_token, $handle);
    */

    $call_sid    = $_REQUEST['CallSid']; 
    $uid        = explode("_", $_REQUEST['uid'])[1];//$_REQUEST['uid'];
    $friend_id  = explode("_", $_REQUEST['friend_id'])[1];//$_REQUEST['friend_id'];
    $group_name = $_REQUEST['group_name'];

    $name     = "Good";//$profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
    $handle = array(
                  "uid"       => $uid,
                  "name"      => $name,
                  "group_name"=> $group_name,
                  "call_sid"  => $call_sid
                  );
    // apns_voip("uuid", "8597a025aae811c3c007f6c02d0864c99a0e3b081639edd2060c0968aa8b65f2", $handle);
  }

  // print $response;
  echo $response;
}

function tw_voice_makeCall2() {  
  watchdog(TAG, 'tw_voice_makeCall %params', array('%params'=> serialize($_REQUEST)), WATCHDOG_INFO);

    $is_join    = $_REQUEST['is_join'];

    if ($is_join == 1) {
      # code...

      /*
      $twi_call_sid = $_REQUEST['twi_call_sid'];

      $query  = new EntityFieldQuery();
      $entities = $query->entityCondition('entity_type', 'field_collection_item')
                  ->entityCondition('bundle', 'field_tw_voice_members')
                  ->fieldCondition('field_tw_voice_members_sid', 'value', $twi_call_sid, '=')
                  ->execute();

      if (!empty($entities['field_collection_item'])) {
        $item_id    = array_keys($entities['field_collection_item'])[0];
        $data_item  = field_collection_item_load($item_id);

        $node  = node_load($data_item->hostEntity()->nid);
        // $node->title

        $response = new Twilio\Twiml();

        $dial = $response->dial();
        $dial->conference(
          $node->title,
          [ 'statusCallbackEvent' => 'start, end, join, leave, mute, hold',
            'statusCallback' => $GLOBALS['base_url'].'/tw/parentStatusCallback',
            'statusCallbackMethod' => 'POST', 
            'beep' => 'false', 
            // 'waitUrl' => $GLOBALS['base_url'].'/tw/waitUrl', < เสียงรอสาย 
            'startConferenceOnEnter' => 'true', 
            'endConferenceOnExit' => 'true']
        );  
      }
      */

    }else{
      $uid        = explode("_", $_REQUEST['uid'])[1];//$_REQUEST['uid'];
      $friend_id  = explode("_", $_REQUEST['friend_id'])[1];//$_REQUEST['friend_id'];
      $group_name = $_REQUEST['group_name'];
      $uuid       = $_REQUEST['uuid'];
      $callSid    = $_REQUEST['CallSid'];   // id สำหรับอ้างถึง user คนนี้
      

      /*
      $callerId = 'client:' . $uid;
      $to = isset($_POST["to"]) ? $_POST["to"] : "";
      if (!isset($to) || empty($to)) {
        $to = isset($_GET["to"]) ? $_GET["to"] : "";
      }

      // * Use a valid Twilio number by adding to your account via https://www.twilio.com/console/phone-numbers/verified

      $callerNumber = '1234567890';
      $response = new Twilio\Twiml();
      if (!isset($to) || empty($to)) {
        $response->say('Congratulations! You have just made your first call! Good bye.');
      } else if (is_numeric($to)) {
        $dial = $response->dial(
          array(
            'callerId' => $callerNumber
          ));
        $dial->number($to);
      } else {
        */
        
        /*
        $dial = $response->dial(
          array(
             'callerId' => $callerId
          ));
        $dial->client($to);
        */


        /*
          หลักการ
            1. คนทีสร้าง กลุ่ม Conference
            Parent : parentStatusCallback เอาไว้ tag status parent 
            
            2. คนที่ถูกเชิญเข้า กลุ่ม Conference
            Client : clientStatusCallback เอาไว้ tag status ของแต่ละ client 
        */
        $response = new Twilio\Twiml();

        $dial = $response->dial();
        $dial->conference(
          $group_name,
          [ 'statusCallbackEvent' => 'start, end, join, leave, mute, hold',
            'statusCallback' => $GLOBALS['base_url'].'/tw/parentStatusCallback',
            'statusCallbackMethod' => 'POST', 
            'beep' => 'false', 
            /*'waitUrl' => $GLOBALS['base_url'].'/tw/waitUrl', < เสียงรอสาย */
            'startConferenceOnEnter' => 'true', 
            'endConferenceOnExit' => 'true']
        );  



      /*
      ต้องสร้าง firebase ขึ้นมาเพือเก็บ ข้อมูล
      */

      $content_type = "twilio_voice";

      $node = new stdClass();
      $node->title = $group_name;
      $node->type  = $content_type;
      // $node->uid   = $_POST['uid'];
      // $node->field_platform[LANGUAGE_NONE][0]['value']  = $platform;
      // $node->field_pushkit_token[LANGUAGE_NONE][0]['value']    = $token;
      
      $node->language = LANGUAGE_NONE;
      $node->status   = 1;

      $node = node_submit($node);
      node_save($node);

      $values = array();
      $values['field_name'] = 'field_tw_voice_members'; 
      $values['field_tw_voice_members_sid'][LANGUAGE_NONE][0]['value'] = $callSid;
      $values['field_tw_voice_members_uid'][LANGUAGE_NONE][0]['value'] = $uid;
      $values['field_tw_voice_members_type'][LANGUAGE_NONE][0]['value']= "parent";

      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity("node", $node);
      $field_entity->save(); 

      /*
      // 1. Load All node by nid 
      $node = node_load('342');

      $values = array();
      $values['field_name'] = 'field_my_app_update'; 
      $values['field_my_app_title'][LANGUAGE_NONE][0]['value'] = "TEST--";
      $values['field_my_app_message_update'][LANGUAGE_NONE][0]['value'] = "TEST-- u";

      $image_url =  (array)_load_image();

      $values['field_image'][LANGUAGE_NONE][0] = $image_url;

      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity("node", $node);
      $field_entity->save(); 

      dpm($field_entity->item_id);

      $node->nid

      $values = array();
      $values['field_name'] = 'field_my_app_follower'; 
   
      $values['field_my_app_uid_follower'][LANGUAGE_NONE][0]['value'] = $friend_id;
      $values['field_status_follow'][LANGUAGE_NONE][0]['value'] = '1';
      // $val['field_image'][LANGUAGE_NONE][0] = (array)$file;
      
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity("field_my_app_follower", $data);
      $field_entity->save();  //  ยังมีปัญหาอยู่ ต้องแก้ใขเพราะว่าไม่ได้ return สถานะเอามาว่าสำเร็จหรือเปล่า แต่ save สำเร็จ      
      */

      global $firebase;
      $values = array(
            "group_name" => $group_name,
            "members"    => array($field_entity->item_id=>array(
                                                "type"    => 'parent',
                                                "uid"     => $uid,
                                                "call_sid"=> $callSid
                                              ),
                                  )
          );

      $firebase->update(FIREBASE_DEFAULT_PATH . "tw_voice/" . $node->nid, $values);

      /*
      การโทรหาเพือน โดยผ่าน api ของ twilio
      */
      tw_voice_placeCall($node->nid , $callSid, $_REQUEST['uid'], $_REQUEST['friend_id'], $group_name);
    }

    /*
    // $pushkit_token = "8597a025aae811c3c007f6c02d0864c99a0e3b081639edd2060c0968aa8b65f2";
    // apns_voip($uid, "name", $uuid, $pushkit_token);
    $profile = profile2_by_uid_load($uid, 'main');

    $friend_profile = profile2_by_uid_load($friend_id, 'main');
    if(isset($friend_profile->field_device_access)){
      foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);

        // $result['pushkit_token']     = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
        if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0) {
          $pushkit_token = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];


          $name     = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
          $handle = array(
                  "uid"     => $uid,
                  "name"    => $name,
                  "group_id"=> $group_id
                  );
          apns_voip($uuid, $pushkit_token, $handle);

          watchdog(TAG, 'tw_voice_makeCall > pushkit_token : %params | uid = %uid | friend_id = %friend_id', array('%params'=> $pushkit_token, '%uid'=>$uid, '%friend_id' =>$friend_id), WATCHDOG_INFO);
          
        }
      }
    }
    */

    watchdog(TAG, 'tw_voice_makeCall : uid = %uid | friend_id = %friend_id | CallSid = %callSid', array('%uid'=>$uid, '%friend_id' =>$friend_id, '%callSid'=>$callSid), WATCHDOG_INFO);
  // }

  echo $response; 
}

/*
  การโทรหาเพือนโดยใช้ api twilio
*/
function tw_voice_placeCall($nid, $callSid, $caller, $to, $group_name) { 
  $callerId = 'client:' . $caller;
  // $to = isset($_GET["to"]) ? $_GET["to"] : "";
  // if (!isset($to) || empty($to)) {
  //   $to = isset($POST["to"]) ? $_POST["to"] : "";
  // }

  $client = new Twilio\Rest\Client(TWILIO_API_KEY, TWILIO_API_KEY_SECRET, TWILIO_ACCOUNT_SID);

  $call = NULL;
  /*
  if (!isset($to) || empty($to)) {
    $call = $client->calls->create(
      'client:alice', // Call this number
      $callerId,      // From a valid Twilio number
      array(
        'url' => 'https://'.$_SERVER['HTTP_HOST'].'/incoming.php'
      )
    );
  } else if (is_numeric($to)) {
    $call = $client->calls->create(
      $to,           // Call this number
      $callerNumber, // From a valid Twilio number
      array(
        'url' => 'https://'.$_SERVER['HTTP_HOST'].'/incoming.php'
      )
    );
  } else {
    */

  // https://www.twilio.com/docs/api/voice/making-calls#url-parameter
  $call = $client->calls->create(
    'client:'.$to, // Call this number
    $callerId,     // From a valid Twilio number
    array(
      'url' => $GLOBALS['base_url'].'/tw/voice_incoming',
      "statusCallbackMethod" => "POST",
      "statusCallback" => $GLOBALS['base_url'].'/tw/clientStatusCallback',
      "statusCallbackEvent" => array(
          "initiated", "ringing", "answered", "completed"
      )
    )
  );

  $values = array();
  $values['field_name'] = 'field_tw_voice_members'; 
  $values['field_tw_voice_members_sid'][LANGUAGE_NONE][0]['value'] = $call->sid;
  $values['field_tw_voice_members_uid'][LANGUAGE_NONE][0]['value'] = explode("_", $to)[1];
  $values['field_tw_voice_members_type'][LANGUAGE_NONE][0]['value']= "client";

  $field_entity = entity_create('field_collection_item', $values);
  $field_entity->setHostEntity("node", node_load($nid));
  $field_entity->save(); 


  /*ของเพือน*/
  $values = array(
        "type"    => 'client',
        "uid"     => explode("_", $to)[1],
        "call_sid"=> $call->sid
      );

  global $firebase;
  $firebase->update(FIREBASE_DEFAULT_PATH . "tw_voice/" . $nid . "/members/" . $field_entity->item_id , $values);

  /*
      $values = array(
            "caller"      => $uid,
            "uuid"        => $uuid,
            "callSid"     => $callSid,
            "members"     => array()
          );

      // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/outgoing_call/' . $callSid . "/", $values);
      $firebase->update(FIREBASE_DEFAULT_PATH . "twilio_voice/" . $group_name, $values);
  */

  /*


  array(
        "url" => "http://demo.twilio.com/docs/voice.xml",
        "method" => "GET",
        "statusCallbackMethod" => "POST",
        "statusCallback" => "https://www.myapp.com/events",
        "statusCallbackEvent" => array(
            "initiated", "ringing", "answered", "completed"
        )
    )
  */

    /*

$group_id,
      [ 'statusCallbackEvent' => 'start, end, join, leave, mute, hold',
        'statusCallback' => $GLOBALS['base_url'].'/tw/statusCallback',
        'statusCallbackMethod' => 'POST', 
        'beep' => 'false', 
        // 'waitUrl' => $GLOBALS['base_url'].'/tw/waitUrl', < เสียงรอสาย 
        'startConferenceOnEnter' => 'true', 
        'endConferenceOnExit' => 'true']
    */


  watchdog(TAG, 'tw_voice_placeCall :  caller = %caller | to = %to | sid = %sid', array('%caller'=>$caller, '%to' =>$to, '%sid'=>$call->sid), WATCHDOG_INFO);
  // }

  // print $call;
  // print $call.sid;
}

/*
  callback for tw_voice_placeCall
*/
function tw_voice_incoming(){
  $response = new Twilio\Twiml();
  $response->say('Congratulations! You have received your first inbound call! Good bye.');

  watchdog(TAG, 'tw_voice_incoming : You have received your first inbound call! Good bye | params = %params', array('%params'=> serialize($_REQUEST)), WATCHDOG_INFO);

  print $response;
}


function get_caller2($room_name){
  $query    = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
              ->entityCondition('bundle', 'field_twilio_video_members')
              ->fieldCondition('field_twv_members_type', 'value', 'caller', '=')
              ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
              ->execute();

  // watchdog(TAG, 'StatusCallbackEvent > xxx: %item_id', array('%item_id'=> serialize($entities)), WATCHDOG_INFO);
  if (!empty($entities['field_collection_item'])) {
    $item_id = array_keys($entities['field_collection_item'])[0];
    $data_item = field_collection_item_load($item_id);

    $hostentity_id = $data_item->hostEntity()->item_id;

    $host_data_item = field_collection_item_load($hostentity_id);
    $uuid  = $host_data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];
    $has_video = $host_data_item->field_twilio_ic_has_video[LANGUAGE_NONE][0]['value'];

    $caller_uid = $data_item->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];

    $caller_profile = profile2_by_uid_load($caller_uid, 'main');
    $caller_name    = $caller_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];


    return array('hostentity_id'=>$hostentity_id, 'uuid'=>$uuid, 'caller_uid'=>$caller_uid, 'caller_name'=>$caller_name, 'has_video'=>$has_video);
  }
  return;
}

function get_caller($in_progress_data_item){
  /*
  $query    = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
              ->entityCondition('bundle', 'field_twilio_video_members')
              ->fieldCondition('field_twv_members_type', 'value', 'caller', '=')
              ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
              ->execute();

  // watchdog(TAG, 'StatusCallbackEvent > xxx: %item_id', array('%item_id'=> serialize($entities)), WATCHDOG_INFO);
  if (!empty($entities['field_collection_item'])) {
    $item_id = array_keys($entities['field_collection_item'])[0];
    $data_item = field_collection_item_load($item_id);

    $hostentity_id = $data_item->hostEntity()->item_id;

    $host_data_item = field_collection_item_load($hostentity_id);
    $uuid  = $host_data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];
    $has_video = $host_data_item->field_twilio_ic_has_video[LANGUAGE_NONE][0]['value'];

    $caller_uid = $data_item->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];

    $caller_profile = profile2_by_uid_load($caller_uid, 'main');
    $caller_name    = $caller_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];


    return array('hostentity_id'=>$hostentity_id, 'uuid'=>$uuid, 'caller_uid'=>$caller_uid, 'caller_name'=>$caller_name, 'has_video'=>$has_video);
  }
  */
  if(isset($in_progress_data_item->field_twilio_video_members[LANGUAGE_NONE])){
    foreach ($in_progress_data_item->field_twilio_video_members[LANGUAGE_NONE] as $members_k => $members_v) {
      $twilio_video_members_item = field_collection_item_load($members_v['value']);

      $item_member_load_type = $twilio_video_members_item->field_twv_members_type[LANGUAGE_NONE][0]['value'];

      // switch ($item_member_load_type) {
      switch ($item_member_load_type) {
        case 'caller':{
            $hostentity_id = $twilio_video_members_item->hostEntity()->item_id;

            $host_data_item = field_collection_item_load($hostentity_id);

            $uuid  = $host_data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];
            $has_video = $host_data_item->field_twilio_ic_has_video[LANGUAGE_NONE][0]['value'];

            $caller_uid = $twilio_video_members_item->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];

            $caller_profile = profile2_by_uid_load($caller_uid, 'main');
            $caller_name    = $caller_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];


            return array('hostentity_id'=>$hostentity_id, 'uuid'=>$uuid, 'caller_uid'=>$caller_uid, 'caller_name'=>$caller_name, 'has_video'=>$has_video);
          }
          break;
        
        default:
          # code...
          break;
      }
    }
  }


  return;
}

function ___twilio_room_created($request){
  watchdog(TAG, '___twilio_room_created', array(), WATCHDOG_INFO);

  global $firebase;

  $room_status  = $request['RoomStatus'];

  $room_name    = $request['RoomName'];
  $room_sid     = $request['RoomSid'];
  $status_callback     =  $request['StatusCallbackEvent'];

  $in_progress_query    = new EntityFieldQuery();
  $in_progress_entities = $in_progress_query->entityCondition('entity_type', 'field_collection_item')
                ->entityCondition('bundle', 'field_twilio_outgoing_call')
                ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
                ->execute();

  if (!empty($in_progress_entities['field_collection_item'])) {
    $in_progress_item_id = array_keys($in_progress_entities['field_collection_item'])[0];
    $in_progress_data_item = field_collection_item_load($in_progress_item_id);


    $in_progress_data_item_uuid = $in_progress_data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

    $in_progress_wrapper = entity_metadata_wrapper('field_collection_item', $in_progress_data_item);
    $in_progress_wrapper->field_twilio_room_sid->set($room_sid);
    $in_progress_wrapper->field_twilio_room_status->set($room_status);

    // $in_progress_wrapper->field_twilio_room_statuscallback->set($_REQUEST['StatusCallbackEvent']);
    $in_progress_wrapper->save();
    if(isset($in_progress_data_item->field_twilio_video_members[LANGUAGE_NONE])){
      foreach ($in_progress_data_item->field_twilio_video_members[LANGUAGE_NONE] as $members_k => $members_v) {
        $twilio_video_members_item = field_collection_item_load($members_v['value']);

        $item_member_load_type = $twilio_video_members_item->field_twv_members_type[LANGUAGE_NONE][0]['value'];

        switch ($item_member_load_type) {
          case 'caller':{
            // ------------------- update status members
            $caller_wrapper = entity_metadata_wrapper('field_collection_item', $twilio_video_members_item);


            // watchdog(TAG, '1 --- : %item_id', array('%item_id'=> $caller_wrapper->field_twilio_room_statuscallback->value()), WATCHDOG_INFO);
            // ที่เราเช็ดพเพราะว่า  track-added จะถูก call ถึง 4 ครั้ง 
            // if (strcasecmp($caller_wrapper->field_twilio_room_statuscallback->value(), "participant-connected") != 0) {
              # code...
              $caller_wrapper->field_twilio_room_statuscallback->set($status_callback);
              $caller_wrapper->save();

              $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $in_progress_data_item->hostEntity()->uid .'/outgoing_call/'. $in_progress_data_item_uuid . '/members/' . $members_v['value'], array('status_callback'=>$status_callback));
              // ------------------- update status members
            // }

          }
            break;

          case 'participant':{
            // ส่วนรายละเอียดของ Caller
            $caller = get_caller($in_progress_data_item);
            // ส่วนรายละเอียดของ Caller

            if (!is_null($caller)) {
              $hostentity_id  = $caller['hostentity_id'];
              $uid_caller     = $caller['caller_uid'];
              $name_caller    = $caller['caller_name'];
              $uuid           = $caller['uuid'];
              $has_video      = $caller['has_video'];

              // เราจะได้ friend id ของเพือนทีเราจะพร้อมส่ง voip ไปหา
              $twv_members_friend_id = $twilio_video_members_item->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];
              // watchdog(TAG, 'hook_group_rooms - field_twv_members_friend_id: %field_twv_members_friend_id ', array('%field_twv_members_friend_id'=> $field_twv_members_friend_id), WATCHDOG_INFO);


              // ------------------- update status members
              $caller_wrapper = entity_metadata_wrapper('field_collection_item', $twilio_video_members_item);

              // watchdog(TAG, '2 --- : %item_id', array('%item_id'=> $caller_wrapper->field_twilio_room_statuscallback->value()), WATCHDOG_INFO);
              //if (strcasecmp($caller_wrapper->field_twilio_room_statuscallback->value(), "participant-connected") != 0) {
              $caller_wrapper->field_twilio_room_statuscallback->set($status_callback);
              $caller_wrapper->save();

              $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $in_progress_data_item->hostEntity()->uid .'/outgoing_call/'. $in_progress_data_item_uuid . '/members/' . $members_v['value'], array('status_callback'=>$status_callback));
                // ------------------- update status members
              // }



              //////////////////////// 1 /////////////////////////////

              //   เป็นการดึงข้อมูลของ friend_id ขึ้นมาเพือเอา pushkit_token โดย friend_id 1 id อาจมีมากกว่ากว่า 1 pushkit_token ก้ได้เราจึงต้อง ดึงมาทั้งเพือส่งไปแจ้ง friend_id นั้นๆ

              $friend_id_token  = create_access_token($twv_members_friend_id, $room_name);
              $friend_profile   = profile2_by_uid_load($twv_members_friend_id, 'main');

              $flag = false;
              if(isset($friend_profile->field_device_access[LANGUAGE_NONE])){
                foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
                  $item_load = field_collection_item_load($value['value']);

                  if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0) {

                    $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
                    $action         = 'call';
                    $handle         = array(
                                      "room_name"     => $room_name,
                                      "uid"           => $uid_caller, 
                                      "name"          => $name_caller, // ชือของ caller
                                      "uuid"          => $uuid,
                                      "token"         => $friend_id_token,
                                      "has_video"     => $has_video,
                                      "room_status"   => $room_status,
                                      "status_callback"=> $status_callback,
                                      );

                    try {
                      apns_voip($pushkit_token, $action, $uuid, $handle, $has_video);  
                    } catch (Exception $e) {
                      // echo 'Caught exception: ',  $e->getMessage(), "\n";

                      watchdog(TAG, 'hook_group_rooms 1z : %params', array('%params'=> $e->getMessage()), WATCHDOG_INFO);
                    }
                    $flag = true;
                  }
                }
              }

              if ($flag) {
                // insert incoming call ให้กับ friend ที่เรา call ไป
                // $friend_profile
                $incoming_call = array();
                $incoming_call['field_name'] = 'field_twilio_incoming_call'; 

                $incoming_call['field_twilio_ic_name'][LANGUAGE_NONE][0]['value']     = $room_name;
                $incoming_call['field_twilio_ic_uid'][LANGUAGE_NONE][0]['value']      = $uid_caller;     // uid caller
                $incoming_call['field_twilio_room_uuid'][LANGUAGE_NONE][0]['value']   = $uuid;
                $incoming_call['field_twilio_ic_token'][LANGUAGE_NONE][0]['value']    = $friend_id_token;
                $incoming_call['field_twilio_ic_has_video'][LANGUAGE_NONE][0]['value']= $has_video;
                // $incoming_call['field_twilio_ic_status'][LANGUAGE_NONE][0]['value']   = 'init';

                $incoming_call['field_twilio_room_status'][LANGUAGE_NONE][0]['value'] = $room_status;
                $incoming_call['field_twilio_room_statuscallback'][LANGUAGE_NONE][0]['value'] = $status_callback;

                $field_entity = entity_create('field_collection_item', $incoming_call);
                $field_entity->setHostEntity('profile2', $friend_profile);
                $field_entity->save();

                $value = array(
                        "room_name"       => $room_name,
                        "uid"             => $uid_caller,
                        "name"            => $name_caller, // ชือของ caller
                        "uuid"            => $uuid,
                        "token"           => $friend_id_token,
                        "has_video"       => $has_video,
                        "room_status"     => $room_status,
                        "status_callback" => $status_callback,
                        "item_id"         => $field_entity->item_id,
                        "outgoing_call_item_id" => $hostentity_id,
                        "outgoing_call_member_item_id" => $members_v['value']
                      );

                $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $twv_members_friend_id .'/incoming_call/'. $uuid, $value);
              }
              //////////////////////// 1 /////////////////////////////
            }
          }
            break;
          
          default:
            # code...
            break;
        } // end-switch
      }// end-foreach
    }
  }
}

function ___twilio_track_added(){
  watchdog(TAG, '___twilio_track_added', array(), WATCHDOG_INFO);
}

function ___twilio_participant_connected($request){
  watchdog(TAG, '___twilio_participant_connected', array(), WATCHDOG_INFO);

  global $firebase;

  // Uid ของคนที่เชือมต่อเข้ามาใน room
  $participant_id  = $request['ParticipantIdentity'];
  $room_name       = $request['RoomName'];
  $status_callback = $request['StatusCallbackEvent'];

  $pc_query    = new EntityFieldQuery();
  $pc_entities = $pc_query->entityCondition('entity_type', 'field_collection_item')
                          ->entityCondition('bundle', 'field_twilio_outgoing_call')
                          ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
                          ->execute();

  if (!empty($pc_entities['field_collection_item'])) {
    $pc_item_id   = array_keys($pc_entities['field_collection_item'])[0];
    $pc_data_item = field_collection_item_load($pc_item_id);

    $pc_data_item_uuid = $pc_data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

    if(isset($pc_data_item->field_twilio_video_members[LANGUAGE_NONE])){
      foreach ($pc_data_item->field_twilio_video_members[LANGUAGE_NONE] as $members_k => $members_v) {
        $twilio_video_members_item = field_collection_item_load($members_v['value']);

        $item_member_load_uid   = $twilio_video_members_item->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];
        $item_member_load_type  = $twilio_video_members_item->field_twv_members_type[LANGUAGE_NONE][0]['value'];

        //
        // เราจะ update member ที่ uid ตรงเท่านั้น
        //

        if(strcasecmp($item_member_load_uid, $participant_id) == 0){
          $item_wrapper = entity_metadata_wrapper('field_collection_item', $twilio_video_members_item);
          $item_wrapper->field_twilio_room_statuscallback->set($status_callback);
          $item_wrapper->save();


          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $pc_data_item->hostEntity()->uid .'/outgoing_call/'. $pc_data_item_uuid . '/members/' . $members_v['value'], array('status_callback'=>$status_callback));

        }

        switch ($item_member_load_type) {
          case 'participant':{
            // กรณ๊เป็นสมาชิกเราต้องไป update field_twilio_incoming_call ด้วย
            $incoming_call_query    = new EntityFieldQuery();
            $incoming_call_entities = $incoming_call_query->entityCondition('entity_type', 'field_collection_item')
                          ->entityCondition('bundle', 'field_twilio_incoming_call')
                          ->fieldCondition('field_twilio_ic_name', 'value', $room_name, '=')
                          ->fieldCondition('field_twilio_room_uuid', 'value', $pc_data_item_uuid, '=')
                          ->execute();

            if (!empty($incoming_call_entities['field_collection_item'])) {
              $incoming_call_item_id   = array_keys($incoming_call_entities['field_collection_item'])[0];
              $incoming_call_data      = field_collection_item_load($incoming_call_item_id);

              $incoming_call_wrapper = entity_metadata_wrapper('field_collection_item', $incoming_call_data);
              $incoming_call_wrapper->field_twilio_room_statuscallback->set($status_callback);
              $incoming_call_wrapper->save();

              $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $incoming_call_data->hostEntity()->uid .'/incoming_call/'. $pc_data_item_uuid, array('status_callback'=>$status_callback));
            }
          }
            break;
          
          default:
            # code...
            break;
        }
      }
    }
  }
}

function ___twilio_participant_disconnected($request){
  watchdog(TAG, '___twilio_participant_disconnected', array(), WATCHDOG_INFO);

  global $firebase;

  // Uid ของคนที่เชือมต่อเข้ามาใน room
  $participant_id  = $request['ParticipantIdentity'];
  $room_name       = $request['RoomName'];

  $status_callback =  $request['StatusCallbackEvent'];

  $pc_query    = new EntityFieldQuery();
  $pc_entities = $pc_query->entityCondition('entity_type', 'field_collection_item')
                          ->entityCondition('bundle', 'field_twilio_outgoing_call')
                          ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
                          ->execute();

  if (!empty($pc_entities['field_collection_item'])) {
    $pc_item_id   = array_keys($pc_entities['field_collection_item'])[0];
    $pc_data_item = field_collection_item_load($pc_item_id);

    $pc_data_item_uuid = $pc_data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

    if(isset($pc_data_item->field_twilio_video_members[LANGUAGE_NONE])){
      foreach ($pc_data_item->field_twilio_video_members[LANGUAGE_NONE] as $members_k => $members_v) {
        $twilio_video_members_item = field_collection_item_load($members_v['value']);

        $item_member_load_uid   = $twilio_video_members_item->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];
        $item_member_load_type  = $twilio_video_members_item->field_twv_members_type[LANGUAGE_NONE][0]['value'];

        //
        // เราจะ update member ที่ uid ตรงเท่านั้น
        //
        if(strcasecmp($item_member_load_uid, $participant_id) == 0){
          $item_wrapper = entity_metadata_wrapper('field_collection_item', $twilio_video_members_item);
          $item_wrapper->field_twilio_room_statuscallback->set($status_callback);
          $item_wrapper->save();


          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $pc_data_item->hostEntity()->uid .'/outgoing_call/'. $pc_data_item_uuid . '/members/' . $members_v['value'], array('status_callback'=>$status_callback));



          switch ($item_member_load_type) {
            case 'participant':{
              // กรณ๊เป็นสมาชิกเราต้องไป update field_twilio_incoming_call ด้วย
              $incoming_call_query    = new EntityFieldQuery();
              $incoming_call_entities = $incoming_call_query->entityCondition('entity_type', 'field_collection_item')
                            ->entityCondition('bundle', 'field_twilio_incoming_call')
                            ->fieldCondition('field_twilio_ic_name', 'value', $room_name, '=')
                            ->fieldCondition('field_twilio_room_uuid', 'value', $pc_data_item_uuid, '=')
                            ->execute();

              if (!empty($incoming_call_entities['field_collection_item'])) {
                $incoming_call_item_id   = array_keys($incoming_call_entities['field_collection_item'])[0];
                $incoming_call_data      = field_collection_item_load($incoming_call_item_id);

                $incoming_call_wrapper = entity_metadata_wrapper('field_collection_item', $incoming_call_data);
                $incoming_call_wrapper->field_twilio_room_statuscallback->set($status_callback);
                $incoming_call_wrapper->save();

                $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $incoming_call_data->hostEntity()->uid .'/incoming_call/'. $pc_data_item_uuid, array('status_callback'=>$status_callback));
              }
            }
              break;
            
            default:
              # code...
              break;
          }
        }
      }
    }
  }
}

function ___twilio_completed($request){
  watchdog(TAG, 'completed %request', array('%request'=>serialize($request)), WATCHDOG_INFO);

  global $firebase;

  // $request = $_REQUEST;

  $room_name    = $request['RoomName'];
  $room_sid     = $request['RoomSid'];
  $room_status  = $request['RoomStatus'];

  // ------------ outgoing_call
  $query    = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                ->entityCondition('bundle', 'field_twilio_outgoing_call')
                ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
                ->execute();

  if (!empty($entities['field_collection_item'])) {
    $item_id = array_keys($entities['field_collection_item'])[0];
    $data_item = field_collection_item_load($item_id);

    $data_item_wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
    $data_item_wrapper->field_twilio_room_status->set($room_status);
    $data_item_wrapper->save();

    // $statuscallback = $data_item->field_twilio_room_statuscallback[LANGUAGE_NONE][0]['value'];

    // watchdog(TAG, 'completed : %item_id', array('%item_id'=> ''), WATCHDOG_INFO);

    $data_item_uuid = $data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $data_item->hostEntity()->uid .'/outgoing_call/'. $data_item_uuid . '/', array('room_status'=>$room_status));

    // $path = FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $data_item->hostEntity()->uid .'/outgoing_call/'. $data_item_uuid . '/';

    // watchdog(TAG, 'completed -- %path - %room_status', array('%path'=>$path, '%room_status'=>$room_status), WATCHDOG_INFO);
  }
  // ------------ outgoing_call

  // ------------ incoming_call
  $incoming_call_query    = new EntityFieldQuery();
  $incoming_call_entities = $incoming_call_query->entityCondition('entity_type', 'field_collection_item')
                            ->entityCondition('bundle', 'field_twilio_incoming_call')
                            ->fieldCondition('field_twilio_ic_name', 'value', $room_name, '=')
                            ->execute();

  if (!empty($incoming_call_entities['field_collection_item'])) {
    $incoming_call_item_id   = array_keys($incoming_call_entities['field_collection_item'])[0];
    $incoming_call_data      = field_collection_item_load($incoming_call_item_id);

    $incoming_call_data_uuid = $incoming_call_data->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

    $incoming_call_wrapper = entity_metadata_wrapper('field_collection_item', $incoming_call_data);
    $incoming_call_wrapper->field_twilio_ic_status->set($room_status);
    $incoming_call_wrapper->save();

    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $incoming_call_data->hostEntity()->uid .'/incoming_call/'. $incoming_call_data_uuid, array('room_status'=>$room_status));
  }
  // ------------ incoming_call

}


// https://www.twilio.com/console/video/configure
// https://www.twilio.com/docs/api/video/status-callbacks#rooms-status-callback-events
/*
  
  StatusCallbackEvent
  room-created : เริ่มสร้าง room
  track-added  : เริ่ม track add
  participant-connected : สมาชิกเชื่อมต่อเข้า room
  participant-disconnected : เมือสมาชิกยกเลิกการเชื่อมต่อ
  room-ended   : เมือไม่มีสมาชิกใน room แล้ว
*/
function hook_group_rooms(){
  if (empty($_REQUEST['RoomName']) || empty($_REQUEST['RoomSid'])) {
    return;
  }

  global $firebase;
  // watchdog(TAG, 'hook_group_rooms : %item_id', array('%item_id'=> serialize($_REQUEST)), WATCHDOG_INFO);

  switch ($_REQUEST['RoomStatus']) {
    case 'in-progress':{
        // https://www.twilio.com/docs/video/api/status-callbacks
        switch ($_REQUEST['StatusCallbackEvent']) {
          case 'room-created':{ 
            background_process_start('___twilio_room_created', $_REQUEST);
            /*
            $room_status  = $_REQUEST['RoomStatus'];

            $room_name    = $_REQUEST['RoomName'];
            $room_sid     = $_REQUEST['RoomSid'];
            $status_callback     =  $_REQUEST['StatusCallbackEvent'];

            $in_progress_query    = new EntityFieldQuery();
            $in_progress_entities = $in_progress_query->entityCondition('entity_type', 'field_collection_item')
                          ->entityCondition('bundle', 'field_twilio_outgoing_call')
                          ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
                          ->execute();

            if (!empty($in_progress_entities['field_collection_item'])) {
              $in_progress_item_id = array_keys($in_progress_entities['field_collection_item'])[0];
              $in_progress_data_item = field_collection_item_load($in_progress_item_id);


              $in_progress_data_item_uuid = $in_progress_data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

              $in_progress_wrapper = entity_metadata_wrapper('field_collection_item', $in_progress_data_item);
              $in_progress_wrapper->field_twilio_room_sid->set($room_sid);
              $in_progress_wrapper->field_twilio_room_status->set($room_status);

              // $in_progress_wrapper->field_twilio_room_statuscallback->set($_REQUEST['StatusCallbackEvent']);
              $in_progress_wrapper->save();
              if(isset($in_progress_data_item->field_twilio_video_members[LANGUAGE_NONE])){
                foreach ($in_progress_data_item->field_twilio_video_members[LANGUAGE_NONE] as $members_k => $members_v) {
                  $twilio_video_members_item = field_collection_item_load($members_v['value']);

                  $item_member_load_type = $twilio_video_members_item->field_twv_members_type[LANGUAGE_NONE][0]['value'];

                  switch ($item_member_load_type) {
                    case 'caller':{
                      // ------------------- update status members
                      $caller_wrapper = entity_metadata_wrapper('field_collection_item', $twilio_video_members_item);


                      // watchdog(TAG, '1 --- : %item_id', array('%item_id'=> $caller_wrapper->field_twilio_room_statuscallback->value()), WATCHDOG_INFO);
                      // ที่เราเช็ดพเพราะว่า  track-added จะถูก call ถึง 4 ครั้ง 
                      // if (strcasecmp($caller_wrapper->field_twilio_room_statuscallback->value(), "participant-connected") != 0) {
                        # code...
                        $caller_wrapper->field_twilio_room_statuscallback->set($status_callback);
                        $caller_wrapper->save();

                        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $in_progress_data_item->hostEntity()->uid .'/outgoing_call/'. $in_progress_data_item_uuid . '/members/' . $members_v['value'], array('status_callback'=>$status_callback));
                        // ------------------- update status members
                      // }

                    }
                      break;

                    case 'participant':{
                      // ส่วนรายละเอียดของ Caller
                      $caller = get_caller($in_progress_data_item);
                      // ส่วนรายละเอียดของ Caller

                      if (!is_null($caller)) {
                        $hostentity_id  = $caller['hostentity_id'];
                        $uid_caller     = $caller['caller_uid'];
                        $name_caller    = $caller['caller_name'];
                        $uuid           = $caller['uuid'];
                        $has_video      = $caller['has_video'];

                        // เราจะได้ friend id ของเพือนทีเราจะพร้อมส่ง voip ไปหา
                        $twv_members_friend_id = $twilio_video_members_item->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];
                        // watchdog(TAG, 'hook_group_rooms - field_twv_members_friend_id: %field_twv_members_friend_id ', array('%field_twv_members_friend_id'=> $field_twv_members_friend_id), WATCHDOG_INFO);


                        // ------------------- update status members
                        $caller_wrapper = entity_metadata_wrapper('field_collection_item', $twilio_video_members_item);

                        // watchdog(TAG, '2 --- : %item_id', array('%item_id'=> $caller_wrapper->field_twilio_room_statuscallback->value()), WATCHDOG_INFO);
                        //if (strcasecmp($caller_wrapper->field_twilio_room_statuscallback->value(), "participant-connected") != 0) {
                        $caller_wrapper->field_twilio_room_statuscallback->set($status_callback);
                        $caller_wrapper->save();

                        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $in_progress_data_item->hostEntity()->uid .'/outgoing_call/'. $in_progress_data_item_uuid . '/members/' . $members_v['value'], array('status_callback'=>$status_callback));
                          // ------------------- update status members
                        // }



                        //////////////////////// 1 /////////////////////////////

                        //   เป็นการดึงข้อมูลของ friend_id ขึ้นมาเพือเอา pushkit_token โดย friend_id 1 id อาจมีมากกว่ากว่า 1 pushkit_token ก้ได้เราจึงต้อง ดึงมาทั้งเพือส่งไปแจ้ง friend_id นั้นๆ

                        $friend_id_token  = create_access_token($twv_members_friend_id, $room_name);
                        $friend_profile   = profile2_by_uid_load($twv_members_friend_id, 'main');

                        $flag = false;
                        if(isset($friend_profile->field_device_access[LANGUAGE_NONE])){
                          foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
                            $item_load = field_collection_item_load($value['value']);

                            if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0) {

                              $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
                              $action         = 'call';
                              $handle         = array(
                                                "room_name"     => $room_name,
                                                "uid"           => $uid_caller, 
                                                "name"          => $name_caller, // ชือของ caller
                                                "uuid"          => $uuid,
                                                "token"         => $friend_id_token,
                                                "has_video"     => $has_video,
                                                "room_status"   => $room_status,
                                                "status_callback"=> $status_callback,
                                                );

                              try {
                                apns_voip($pushkit_token, $action, $uuid, $handle, $has_video);  
                              } catch (Exception $e) {
                                // echo 'Caught exception: ',  $e->getMessage(), "\n";

                                watchdog(TAG, 'hook_group_rooms 1z : %params', array('%params'=> $e->getMessage()), WATCHDOG_INFO);
                              }
                              $flag = true;
                            }
                          }
                        }

                        if ($flag) {
                          // insert incoming call ให้กับ friend ที่เรา call ไป
                          // $friend_profile
                          $incoming_call = array();
                          $incoming_call['field_name'] = 'field_twilio_incoming_call'; 

                          $incoming_call['field_twilio_ic_name'][LANGUAGE_NONE][0]['value']     = $room_name;
                          $incoming_call['field_twilio_ic_uid'][LANGUAGE_NONE][0]['value']      = $uid_caller;     // uid caller
                          $incoming_call['field_twilio_room_uuid'][LANGUAGE_NONE][0]['value']   = $uuid;
                          $incoming_call['field_twilio_ic_token'][LANGUAGE_NONE][0]['value']    = $friend_id_token;
                          $incoming_call['field_twilio_ic_has_video'][LANGUAGE_NONE][0]['value']= $has_video;
                          // $incoming_call['field_twilio_ic_status'][LANGUAGE_NONE][0]['value']   = 'init';

                          $incoming_call['field_twilio_room_status'][LANGUAGE_NONE][0]['value'] = $room_status;
                          $incoming_call['field_twilio_room_statuscallback'][LANGUAGE_NONE][0]['value'] = $status_callback;

                          $field_entity = entity_create('field_collection_item', $incoming_call);
                          $field_entity->setHostEntity('profile2', $friend_profile);
                          $field_entity->save();

                          $value = array(
                                  "room_name"       => $room_name,
                                  "uid"             => $uid_caller,
                                  "name"            => $name_caller, // ชือของ caller
                                  "uuid"            => $uuid,
                                  "token"           => $friend_id_token,
                                  "has_video"       => $has_video,
                                  "room_status"     => $room_status,
                                  "status_callback" => $status_callback,
                                  "item_id"         => $field_entity->item_id,
                                  "outgoing_call_item_id" => $hostentity_id,
                                  "outgoing_call_member_item_id" => $members_v['value']
                                );

                          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $twv_members_friend_id .'/incoming_call/'. $uuid, $value);
                        }
                        //////////////////////// 1 /////////////////////////////
                      }
                    }
                      break;
                    
                    default:
                      # code...
                      break;
                  } // end-switch
                }// end-foreach
              }
            }
            */
          } 
          break;

          case 'track-added': {  
            background_process_start('___twilio_track_added');
          }
          break;

          case 'participant-connected':{
            /*
            เป็นการเข้าร่วมกลุ่ม อันนี้ร่วมถึง caller{คนโทรออก}, participant{คนที่ต้องการโทรถึง} โดยเราแยก จาก ParticipantIdentity{เป้น uid ของแต่ละคนอยู่}
            */
           
            background_process_start('___twilio_participant_connected', $_REQUEST);

            /*
            // Uid ของคนที่เชือมต่อเข้ามาใน room
            $participant_id  = $_REQUEST['ParticipantIdentity'];
            $room_name       = $_REQUEST['RoomName'];
            $status_callback =  $_REQUEST['StatusCallbackEvent'];

            $pc_query    = new EntityFieldQuery();
            $pc_entities = $pc_query->entityCondition('entity_type', 'field_collection_item')
                                    ->entityCondition('bundle', 'field_twilio_outgoing_call')
                                    ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
                                    ->execute();

            if (!empty($pc_entities['field_collection_item'])) {
              $pc_item_id   = array_keys($pc_entities['field_collection_item'])[0];
              $pc_data_item = field_collection_item_load($pc_item_id);

              $pc_data_item_uuid = $pc_data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

              if(isset($pc_data_item->field_twilio_video_members[LANGUAGE_NONE])){
                foreach ($pc_data_item->field_twilio_video_members[LANGUAGE_NONE] as $members_k => $members_v) {
                  $twilio_video_members_item = field_collection_item_load($members_v['value']);

                  $item_member_load_uid   = $twilio_video_members_item->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];
                  $item_member_load_type  = $twilio_video_members_item->field_twv_members_type[LANGUAGE_NONE][0]['value'];

                  //
                  // เราจะ update member ที่ uid ตรงเท่านั้น
                  //

                  if(strcasecmp($item_member_load_uid, $participant_id) == 0){
                    $item_wrapper = entity_metadata_wrapper('field_collection_item', $twilio_video_members_item);
                    $item_wrapper->field_twilio_room_statuscallback->set($status_callback);
                    $item_wrapper->save();


                    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $pc_data_item->hostEntity()->uid .'/outgoing_call/'. $pc_data_item_uuid . '/members/' . $members_v['value'], array('status_callback'=>$status_callback));

                  }

                  switch ($item_member_load_type) {
                    case 'participant':{
                      // กรณ๊เป็นสมาชิกเราต้องไป update field_twilio_incoming_call ด้วย
                      $incoming_call_query    = new EntityFieldQuery();
                      $incoming_call_entities = $incoming_call_query->entityCondition('entity_type', 'field_collection_item')
                                    ->entityCondition('bundle', 'field_twilio_incoming_call')
                                    ->fieldCondition('field_twilio_ic_name', 'value', $room_name, '=')
                                    ->fieldCondition('field_twilio_room_uuid', 'value', $pc_data_item_uuid, '=')
                                    ->execute();

                      if (!empty($incoming_call_entities['field_collection_item'])) {
                        $incoming_call_item_id   = array_keys($incoming_call_entities['field_collection_item'])[0];
                        $incoming_call_data      = field_collection_item_load($incoming_call_item_id);

                        $incoming_call_wrapper = entity_metadata_wrapper('field_collection_item', $incoming_call_data);
                        $incoming_call_wrapper->field_twilio_room_statuscallback->set($status_callback);
                        $incoming_call_wrapper->save();

                        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $incoming_call_data->hostEntity()->uid .'/incoming_call/'. $pc_data_item_uuid, array('status_callback'=>$status_callback));
                      }
                    }
                      break;
                    
                    default:
                      # code...
                      break;
                  }
                }
              }
            }
            */
          } 
          break;

          case 'participant-disconnected':{
            /*
            เป็นการออกจากร่วมกลุ่ม อันนี้ร่วมถึง caller{คนโทรออก}, participant{คนที่ต้องการโทรถึง} โดยเราแยก จาก ParticipantIdentity{เป้น uid ของแต่ละคนอยู่}
            */
            background_process_start('___twilio_participant_disconnected', $_REQUEST);

            /*
            // Uid ของคนที่เชือมต่อเข้ามาใน room
            $participant_id  = $_REQUEST['ParticipantIdentity'];
            $room_name       = $_REQUEST['RoomName'];

            $status_callback =  $_REQUEST['StatusCallbackEvent'];

            $pc_query    = new EntityFieldQuery();
            $pc_entities = $pc_query->entityCondition('entity_type', 'field_collection_item')
                                    ->entityCondition('bundle', 'field_twilio_outgoing_call')
                                    ->fieldCondition('field_twilio_room_name', 'value', $room_name, '=')
                                    ->execute();

            if (!empty($pc_entities['field_collection_item'])) {
              $pc_item_id   = array_keys($pc_entities['field_collection_item'])[0];
              $pc_data_item = field_collection_item_load($pc_item_id);

              $pc_data_item_uuid = $pc_data_item->field_twilio_room_uuid[LANGUAGE_NONE][0]['value'];

              if(isset($pc_data_item->field_twilio_video_members[LANGUAGE_NONE])){
                foreach ($pc_data_item->field_twilio_video_members[LANGUAGE_NONE] as $members_k => $members_v) {
                  $twilio_video_members_item = field_collection_item_load($members_v['value']);

                  $item_member_load_uid   = $twilio_video_members_item->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'];
                  $item_member_load_type  = $twilio_video_members_item->field_twv_members_type[LANGUAGE_NONE][0]['value'];

                  //
                  // เราจะ update member ที่ uid ตรงเท่านั้น
                  //
                  if(strcasecmp($item_member_load_uid, $participant_id) == 0){
                    $item_wrapper = entity_metadata_wrapper('field_collection_item', $twilio_video_members_item);
                    $item_wrapper->field_twilio_room_statuscallback->set($status_callback);
                    $item_wrapper->save();


                    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $pc_data_item->hostEntity()->uid .'/outgoing_call/'. $pc_data_item_uuid . '/members/' . $members_v['value'], array('status_callback'=>$status_callback));
                  }

                  switch ($item_member_load_type) {
                    case 'participant':{
                      // กรณ๊เป็นสมาชิกเราต้องไป update field_twilio_incoming_call ด้วย
                      $incoming_call_query    = new EntityFieldQuery();
                      $incoming_call_entities = $incoming_call_query->entityCondition('entity_type', 'field_collection_item')
                                    ->entityCondition('bundle', 'field_twilio_incoming_call')
                                    ->fieldCondition('field_twilio_ic_name', 'value', $room_name, '=')
                                    ->fieldCondition('field_twilio_room_uuid', 'value', $pc_data_item_uuid, '=')
                                    ->execute();

                      if (!empty($incoming_call_entities['field_collection_item'])) {
                        $incoming_call_item_id   = array_keys($incoming_call_entities['field_collection_item'])[0];
                        $incoming_call_data      = field_collection_item_load($incoming_call_item_id);

                        $incoming_call_wrapper = entity_metadata_wrapper('field_collection_item', $incoming_call_data);
                        $incoming_call_wrapper->field_twilio_room_statuscallback->set($status_callback);
                        $incoming_call_wrapper->save();

                        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $incoming_call_data->hostEntity()->uid .'/incoming_call/'. $pc_data_item_uuid, array('status_callback'=>$status_callback));
                      }
                    }
                      break;
                    
                    default:
                      # code...
                      break;
                  }
                }
              }
            }
            */
          }
            break;
          
          default:
            # code...
            break;
        }
        break;
    }// end-case
      break;

    case 'completed':{
      // watchdog(TAG, 'completed %request', array('%request'=>serialize($_REQUEST)), WATCHDOG_INFO);
      background_process_start('___twilio_completed', $_REQUEST);
    }// end-case
      break;
    
    default:
      # code...
      break;
  }

  return;
}

function quickstart_twilio_client()
{
  watchdog(TAG, 'quickstart_twilio_client: %params', array('%params'=> serialize($_REQUEST)), WATCHDOG_INFO);
  return "quickstart_twilio_client";
}

function clear_twilio_outgoing_incomming_call()
{

  // $uid = '548489';
  $arr_uid = array('548489', '548490');

  foreach ($arr_uid as $l => $uid) {
    $profile    = profile2_by_uid_load($uid, 'main');

    $field_collection_item_values = array();
    if(isset($profile->field_twilio_outgoing_call)){
      foreach ($profile->field_twilio_outgoing_call[LANGUAGE_NONE] as $key => $value) {
        // $item_load = field_collection_item_load($value['value']);

        // watchdog(TAG, 'idna_user_login header 0009 : %header', array('%header'=> serialize($value['value'])), WATCHDOG_INFO);

        // if (strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $getallheaders['udid']) == 0) {
        //   $val = array(
        //       "is_login"  => '0',
        //       "online"    => '0',
        //       "update"    => time()
        //     );
        //   $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $value['value'] . "/", $val);

        //   break;
        // }

        // Build array of field collection values.
        $field_collection_item_values[] = $value['value'];

        // Unset them.  
        unset($profile->field_twilio_outgoing_call[LANGUAGE_NONE][$key]);
      }
    }
    // Delete field collection items.
    entity_delete_multiple('field_collection_item', $field_collection_item_values);

    $field_collection_item_values = array();
    if(isset($profile->field_twilio_incoming_call)){
      foreach ($profile->field_twilio_incoming_call[LANGUAGE_NONE] as $key => $value) {
        // $item_load = field_collection_item_load($value['value']);

        // watchdog(TAG, 'idna_user_login header 0009 : %header', array('%header'=> serialize($value['value'])), WATCHDOG_INFO);

        // if (strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $getallheaders['udid']) == 0) {
        //   $val = array(
        //       "is_login"  => '0',
        //       "online"    => '0',
        //       "update"    => time()
        //     );
        //   $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $value['value'] . "/", $val);

        //   break;
        // }

         // Build array of field collection values.
        $field_collection_item_values[] = $value['value'];

        // Unset them.  
        unset($profile->field_twilio_outgoing_call[LANGUAGE_NONE][$key]);
      }
    }
    entity_delete_multiple('field_collection_item', $field_collection_item_values);
  }

  return 'completed';
}


function test_function()
{
  /*
  $item = field_collection_item_load('1117277');

  if (strcasecmp($item->field_name, 'field_my_app_update_comment') == 0) {
    // get parent type field_my_app_update
    $hostEntity = $item->hostEntity();
    if (strcasecmp($hostEntity->field_name, 'field_my_app_update') == 0) {
      $post_item_id = $hostEntity->item_id;
      // dpm($post_item_id);

      dpm($hostEntity->hostEntity());
      

      if (property_exists($hostEntity->hostEntity(), 'type')) {
        # code...
        dpm($hostEntity->hostEntity()->type);
        dpm('x');
      }
    }
  }
  */


  /*
  เป็นการดึง get parent->parent->parent ของ field_collection_item
  $name = 'test';

  $creator_query      = new EntityFieldQuery();
  $creator_result = $creator_query->entityCondition('entity_type', 'field_collection_item')
                          ->entityCondition('bundle', 'field_creator')
                          ->fieldCondition('field_creator_uid', 'value', '548609', '=')
                          ->execute();

  if (!empty($creator_result['field_collection_item'])) {
    $creator_nids = array_keys($creator_result['field_collection_item']);
    // dpm(count($creator_nids));
    foreach ($creator_nids as $creator_k => $creator_v) { 
      // dpm($creator_v);
      // dpm(field_collection_item_load($creator_v));

      $creator_item = field_collection_item_load($creator_v);
      // dpm($creator_item->field_creator_name[LANGUAGE_NONE][0]['value']);


      
      //สว่น update ค่า creator
      //$creator_item_wrapper = entity_metadata_wrapper('field_collection_item', $creator_item);
      //$creator_item_wrapper->field_creator_name->set('0');
      // $creator_item_wrapper->save();
      

      $hostEntity = $creator_item->hostEntity();
      if (property_exists($hostEntity, 'field_name')) {
        if (strcasecmp($hostEntity->field_name, 'field_my_app_update') == 0) {
          // post
          $post_id = $hostEntity->item_id;

          // dpm($hostEntity->field_name);
          // dpm($post_id);
          // dpm($hostEntity->field_my_app_message_update[LANGUAGE_NONE][0]['value']);

          // dpm($hostEntity->hostEntity());

          // application 
          if (property_exists($hostEntity->hostEntity(), 'type')) {
            if (strcasecmp($hostEntity->hostEntity()->type, 'application') == 0) {
              $application_nid = $hostEntity->hostEntity()->nid;
              $application_uid = $hostEntity->hostEntity()->uid;
              // dpm($application_nid);
              // dpm($application_uid);
              // break;

              // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profiles/device_access/' . $value['value'] . "/", $val);


              // dpm(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id);

              $creator = array('creator'=>array('name'=>$name));

              // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/', $creator);
            }
          }
        }else if (strcasecmp($hostEntity->field_name, 'field_my_app_update_comment') == 0) {
          // comment ของ post [comment->post]
          $comment_id = $hostEntity->item_id;
          // dpm('comment_id');
          // dpm($comment_id);
          if (property_exists($hostEntity->hostEntity(), 'field_name')) {
            if (strcasecmp($hostEntity->hostEntity()->field_name, 'field_my_app_update') == 0){
              $post_entity =  $hostEntity->hostEntity();
              $post_id     =  $post_entity->item_id;

              // dpm('post_id');
              // dpm($post_id);
              if (property_exists($post_entity->hostEntity(), 'type')) {
                if (strcasecmp($post_entity->hostEntity()->type, 'application') == 0) {
                  $application_nid = $post_entity->hostEntity()->nid;
                  $application_uid = $post_entity->hostEntity()->uid;
                  // dpm('application_nid');
                  // dpm($application_nid);
                  // dpm('application_uid');
                  // dpm($application_uid);
                  // break;

                  $creator = array('creator'=>array('name'=>$name));

                  // dpm(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $comment_id);

                  // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $comment_id . '/', $creator);
                }
              }
            }
          }

          // $post  = 
          // break;
        }else if (strcasecmp($hostEntity->field_name, 'field_reply_comment') == 0){
          // reply ของ comment ของ post [reply->comment->post]
          // dpm($hostEntity->field_name);
          $reply_id = $hostEntity->item_id;
          if (property_exists($hostEntity->hostEntity(), 'field_name')) {
            // dpm($hostEntity->hostEntity());
            // 
            if (strcasecmp($hostEntity->hostEntity()->field_name, 'field_my_app_update_comment') == 0) {
              # code...
              $comment_entity = $hostEntity->hostEntity();
              $comment_id     = $comment_entity->item_id;

              //////////
              if (property_exists($comment_entity->hostEntity(), 'field_name')) {
                if (strcasecmp($comment_entity->hostEntity()->field_name, 'field_my_app_update') == 0){
                  $post_entity =  $comment_entity->hostEntity();
                  $post_id     =  $post_entity->item_id;

                  // dpm('post_id');
                  // dpm($post_id);
                  if (property_exists($post_entity->hostEntity(), 'type')) {
                    if (strcasecmp($post_entity->hostEntity()->type, 'application') == 0) {
                      $application_nid = $post_entity->hostEntity()->nid;
                      $application_uid = $post_entity->hostEntity()->uid;
                      // dpm('application_nid');
                      // dpm($application_nid);
                      // dpm('application_uid');
                      // dpm($application_uid);
                      // break;

                      // dpm(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $comment_id . '/replys/' . $reply_id);


                      $creator = array('creator'=>array('name'=>$name));

                      // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $comment_id . '/replys/' . $reply_id . '/', $creator );
                    }
                  }
                }
              }

              //////////
            }
          }
        }
      }
    }
  }
  */

  // dpm($item->field_name);
  // dpm($item->hostEntity());

  /*
  $item_load = field_collection_item_load($post_id);

  $uid    = $item_load->hostEntity()->uid;
  $app_id = $item_load->hostEntity()->nid;
  */

  /*
  $myvar1 = '1';
  $myvar2 = '2';

  // 'test' คือ function  ที่เราต้องการเรียกใช้งาน , $param1, $param2, ...
  $handle = background_process_start('test', $myvar1);

  dpm($handle);
  */

  
  // $verify_key = generateKey();
  // dpm(idna_mail_send("contact_message", 'mr.simajarn@gmail.com', '', $verify_key));

  // $my_app_chat_query  = new EntityFieldQuery();
  // $my_app_chat_result = $my_app_chat_query->entityCondition('entity_type', 'field_collection_item')
  //                         ->entityCondition('bundle', 'field_my_app_chat')
  //                         ->fieldCondition('field_application_id', 'value', '497', '=')
  //                         ->execute();

  // if (!empty($my_app_chat_result['field_collection_item'])) {
  //   $my_app_chat_nids = array_keys($my_app_chat_result['field_collection_item']);

  //   // dpm($my_app_chat_nids);
  //   foreach ($my_app_chat_nids as $my_app_chat_key => $item_id) { 
  //     dpm($item_id);
  //   }
  // }

  // return "test";

  //
  // จะเครียส์ chat group ออก user ทั้งหมด
  
  /*
  foreach (load_user() as $friend_id => $value){
    // dpm($friend_id);

    $members_friend_profile = profile2_by_uid_load($friend_id, 'main');
    // $v = array();
    foreach ($members_friend_profile->field_chat_group[LANGUAGE_NONE] as $k_groups => $v_groups) {
      // $v[] = $v_groups['value'];
      entity_delete_multiple('field_collection_item', array($v_groups['value']));
    }    
  }
  */

  /*
  // Clear all outgoing call & incomming call
  foreach (load_user() as $friend_id => $value){
    // dpm($friend_id);

    $members_friend_profile = profile2_by_uid_load($friend_id, 'main');
    // $v = array();
    foreach ($members_friend_profile->field_twilio_outgoing_call[LANGUAGE_NONE] as $k_groups => $v_groups) {
      // $v[] = $v_groups['value'];
      entity_delete_multiple('field_collection_item', array($v_groups['value']));
    }    

    foreach ($members_friend_profile->field_twilio_incoming_call[LANGUAGE_NONE] as $k_groups => $v_groups) {
      // $v[] = $v_groups['value'];
      entity_delete_multiple('field_collection_item', array($v_groups['value']));
    }   
  }
  */

  // ffmpeg -re -i ~/INPUT_FILE -vcodec libx264 -profile:v main -preset:v medium -r 30 -g 60 -keyint_min 60 -sc_threshold 0 -b:v 2500k -maxrate 2500k -bufsize 2500k -filter:v scale="trunc(oha/2)2:720" -sws_flags lanczos+accurate_rnd -acodec libfdk_aac -b:a 96k -ar 48000 -ac 2 -f flv rtmp://live.twitch.tv/app/STREAM_KEY


  // /home/somkid/JasonMr.mp4

  /**

/usr/bin/ffmpeg -re -i /home/somkid/JasonMr.mp4 -vcodec libx264 -profile:v main -preset:v medium -r 30 -g 60 -keyint_min 60 -sc_threshold 0 -b:v 2500k -maxrate 2500k -bufsize 2500k -filter:v scale="trunc(oha/2)2:720" -sws_flags lanczos+accurate_rnd -acodec libfdk_aac -b:a 96k -ar 48000 -ac 2 -f flv rtmp://localhost/live/STREAM_KEY
  */




  // background_process_start('___ffmpeg');



  return "test_function";

  /*
$profile    = profile2_by_uid_load($uid, 'main');
  $name       = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

  $members    = array();
  $room_name  = generateRandomString();

  //////////////////////// 1 /////////////////////////////
  $outgoing_call = array();
  $outgoing_call['field_name'] = 'field_twilio_outgoing_call'; 
  */


  /*
  // ลอง ดึง Default image
  $info = field_info_field('field_profile_image');
  if (!empty($info) && $info['settings']['default_image'] > 0) {
      $default_img_fid  = $info['settings']['default_image'];
      $default_img_file = file_load($default_img_fid);

      $defualt_image_url = substr(file_create_url(image_style_url('medium', $default_img_file->uri)), strlen($GLOBALS['base_url']));

      dpm($defualt_image_url);
  }
  */

  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_my_app_chat')
                    ->fieldCondition('field_application_id', 'value', '636', '=')
                    ->fieldCondition('field_owner_id', 'value', '548610', '=')
                    ->execute();

  if (!empty($entities['field_collection_item'])) {
    $item_ids = array_keys($entities['field_collection_item']);
    // $data_item = field_collection_item_load($item_id);

    dpm($item_ids);
  }


  // $friend_profile = profile2_by_uid_load('548586', 'main');

  // $flag = false;
  // if(isset($friend_profile->field_following)){
  //   foreach ($friend_profile->field_following[LANGUAGE_NONE] as $key => $value) {
  //     // $items = field_collection_item_load($value['value']);
  //     entity_delete_multiple('field_collection_item', array($value['value']));
  //   }
  // }

  return "test";

/**
 * Helper method to execute a task.
 */


  // Report all PHP errors
  // error_reporting(-1);
  // Using Autoload all classes are loaded on-demand
  // require_once 'ApnsPHP/Autoload.php';
  // Instantiate a new ApnsPHP_Push object
  
  /*
  $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url'])); 
  */
  

  /*
  try {

    $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url'])); 

    $push = new ApnsPHP_Push(
      ApnsPHP_Abstract::ENVIRONMENT_SANDBOX,
      $apnsCert
    );

    // Connect to the Apple Push Notification Service
    $push->connect();

    // Instantiate a new Message with a single recipient
    $message = new ApnsPHP_Message('8597a025aae811c3c007f6c02d0864c99a0e3b081639edd2060c0968aa8b65f2');
    // Set a custom identifier. To get back this identifier use the getCustomIdentifier() method
    // over a ApnsPHP_Message object retrieved with the getErrors() message.
    $message->setCustomIdentifier("Message-Badge-3");
    // Set badge icon to "3"
    $message->setBadge(3);
    // Set a simple welcome text
    $message->setText('Hello APNs-enabled device!'); // Hello APNs-enabled device
    // Play the default sound
    $message->setSound();
    // Set a custom property
    $message->setCustomProperty('acme2', array('bang', 'whiz'));
    // Set another custom property
    $message->setCustomProperty('token', 'eyJraWQiOiJKd2VTM0JpZi0xIiwiY3R5IjoidHdpbGlvLWZwYTt2PTEiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiZGlyIn0..3LvaGFpn0G7GhAG2.fcGxUj1aYmN3_INjaU0IV4fZx-z7Uu7axlk65rDX3ByhfiMnYWhrgNmsIUrs7Of0FuUdhsToz3yoTrNgckwPy_h1XAJuE4aKj6xrCjpyu3zgAKexG1E5XFMiOQT0U8rSs3UjCSNzEkJGolTmvqL8nBtyMGkjaL7az_zCGVlckVEc5ghDSNPuIR1Hld6GwTk2XxQ1fmY4_aYrFCIrabaEa9AqBsdm9WP9Vr7jKyG1OvH1nOBJ8lmOxxiG7BLX1ZvulgXZ-_3NVq0JT_kbg5MjWuIrnIxLhvAL4DsPehXzW6MEnM4JXBOiKZYZZGDmc9z4uxGMjjWh9uSuFFvk-CWicxe-U_eupm0_5dPV1L9Y6sOswrRohTUAfzyKQC7opRmL7XzsE2lA2zShEFdrT8KCNoRnwWdZwgfxJO-ghdj5wIhEXdmw-oqgzuaD-WjMFt27HpWr6EAAHZc9sIGrza4AXO-TqnbUeXOWML9aT4XpUSLvOcxCR_QBZszYclMpKAfxTLdEfZ-M5dU06B75Iz-STe8R64iUzeWADihRj92uvYPnfhDmvipS9MitoIay9QVk8YY8_dg1DfNShHg8TC1NqKMPCywRBujrW9Y3pDcIziDDyHjDHxXg_X5-mCaaNJQRK0mkaNiDiQ.bnKXFJTJ3uV44dJlZ9HKfQ');
    // Set the expiry value to 60 seconds
    $message->setExpiry(60);
    // Add the message to the message queue
    $push->add($message);
    // Send all messages in the message queue
    $push->send();
    // Disconnect from the Apple Push Notification Service
    $push->disconnect();
    // Examine the error message container
    $aErrorQueue = $push->getErrors();
    if (!empty($aErrorQueue)) {
      var_dump($aErrorQueue);
    }
  } catch (Exception $e) {
      echo 'Caught exception: ',  $e->getMessage(), "\n";
  } finally {
      echo "First finally.\n";
  }
  */

  // ทดสอบส่ง notification

  // dpm(send_push_notification("cAm4mrn2c6M:APA91bH0pXZghlD7gmavaWtFhlJY6WHb-TNyP5_mrSNfT0RTizhrRCZ3ZcrMq_f7ifL6RJ3Uct3Dh_AoVOv32jfVLX03STju1yQ7rv2zHUVXA0Mth66YTelHwHZxWStatFOdRoxEWXKU"));



  // global $firebase;
  // $value = $firebase->get(FIREBASE_DEFAULT_PATH . "tw_voice/" , array('orderBy' => '"status"', 'equalTo' => '"unread"'));


/*
// Your Account Sid and Auth Token from twilio.com/user/account
$sid = "AC94429faf5d0c017fdde2eb9347c699e6";
$token = "e38efbfa073229c83d2259c14a28c645";


// Your Account Sid and Auth Token from twilio.com/user/account
$client = new Client($sid, $token);

// Loop over the list of conferences and echo a property for each one
// foreach ($client->conferences->read() as $conference) {
//     echo "<pre>";
//     var_dump($conference->friendlyName);
//     echo "</pre>";
// }


// CF7f4b2238ae0818c521bb2520cc32df1b
$conference = $client
    ->conferences("CF7f4b2238ae0818c521bb2520cc32df1b")
    ->fetch();

echo "<pre>";
var_dump($conference->friendlyName);
echo "</pre>";

*/


// Get the PHP helper library from https://twilio.com/docs/libraries/php
// require_once '/path/to/vendor/autoload.php'; // Loads the library
// use Twilio\Rest\Client;

// Your Account Sid and Auth Token from twilio.com/user/account
// $sid = "AC94429faf5d0c017fdde2eb9347c699e6";
// $token = "your_auth_token";
// $client =  new Twilio\Rest\Client(TWILIO_API_KEY, TWILIO_API_KEY_SECRET, TWILIO_ACCOUNT_SID);

// Get an object from its sid. If you do not have a sid,
// check out the list resource examples on this page
// $conference = $client
//     ->conferences("CA04a0a616376ae3df691f81436955d86a")
//     ->fetch();

// echo $conference->status;

  // $token = "e1C_IUHJPrc:APA91bFL-FClL1mvRmAMWxPZX91GeCRnoQWht2f5LkJcOaxuOB3uaWxnJZIA83ajyO8ftw-WOxPKeG7PbtXtK3WJRAILQHuFbBZPLVvI1BihOGUozYu17xb01qb1-uWqVQXDcuEzqS6w";

  // // klovers_firebase_push($token, $title="KLOVERS", $message="MESSAGE", $sound = 1, $vibrate = 0)
  // idna_send_push_notification($token);

  /*
$firebase = new Firebase('http://myfirebasename.firebaseio.com', TOKEN);
$users = $firebase->get('/users');
  */

/*
  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

  // $users = $firebase->get('/users');

  $count_receive = 0;

  // echo "<pre>";
  $friends = json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  '101' ."/friends"), true);
  // echo "</pre>";

  foreach ($friends as $key => $value) {
    
    if ($key != 0) {
      
      if (array_key_exists('receive_heart', $value)) {
        $receive_heart = $value['receive_heart'];

        foreach ($receive_heart as $receive_heart_key => $receive_heart_value) {
            if ($receive_heart[$receive_heart_key]["is_read"] == 0) {
              # code...
              $count_receive++;
            }
        }
      }
    }
  }

  echo $count_receive;
  */

  // require_once ( dirname(__FILE__) . '/libraries/py/test.py');

  // $command = escapeshellcmd(dirname(__FILE__) . '/libraries/py/test.py');
  // $output = shell_exec($command);
  // echo "TEST : " . $output;

//   ob_start();
// passthru(dirname(__FILE__) . '/libraries/py/test.py');
// $output = ob_get_clean(); 

// $result = exec("/usr/bin/python2.7 ". dirname(__FILE__) . "/libraries/py/test.py");

//   var_dump($result);


  // $type = 'token_notification';
  // $query = db_select('node', 'n');
  // // $query->join('weight_weights', 'w', 'n.nid = w.entity_id');
  // $query->fields('n', array('nid'))
  //   ->condition('type', $type);
  //   //->orderBy('w.weight', 'ASC');
  // $nids = $query->execute()->fetchCol();
  // $nodes = node_load_multiple($nids);

  // dpm($nodes);

  /*
  // https://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_load_multiple/7.x
  $udid     = "test";

  $token    = "88889990";
  $platform = "ios";

  $content_type = "token_notification";

  $query  = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->fieldCondition('field_platform', 'value', strtolower($platform), '=')
    ->propertyCondition('title', $udid, '=')
    ->execute();

  // dpm($result['node']);

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $key => $nid) {
      $node = node_load($nid);
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_key_token_notification->set($token);
      $node_wrapper->save();
    }
  }else{

    $node = new stdClass();
    $node->title = $udid;
    $node->type  = $content_type;
    // $node->uid   = $_POST['uid'];
    $node->field_platform[LANGUAGE_NONE][0]['value']  = $platform;
    $node->field_key_token_notification[LANGUAGE_NONE][0]['value']    = $token;
    
    $node->language = LANGUAGE_NONE;
    // $node->revision = 0;

    $node = node_submit($node);
    node_save($node);
  }
  */

  /*
  $filename = '11842419.png';
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'file')
    ->propertyCondition('filename', $filename)
    ->execute();
  // if you are guaranteed there is exactly one result, then:
  $file_object = reset($result['file']);
  $fid = $file_object->fid;
  
  echo "B";
  echo "<pre>";
  var_dump(file_load($fid));
  echo "</pre>";
  */
  /*
  $object_id = "-L51Sg20puIKnbTzOvQO";
  $uid       = "548448";

  $query  = new EntityFieldQuery;
  $output = $query->entityCondition('entity_type', 'field_collection_item')
                  ->entityCondition('bundle', 'field_my_app_follower')
                  ->fieldCondition('field_my_app_follower_object_id', 'value', $object_id, '=')
                  ->fieldCondition('field_my_app_uid_follower', 'value', $uid, '=')
                  ->execute();

  dpm(gettype($output));
  */
  // count

  // $comment = comment_load(11);

  // $data = field_collection_item_load($value['value']);

  // dpm($comment);

  // $wrapper = entity_metadata_wrapper('field_collection_item', $comment);
            
  // $wrapper->field_heart_friend_status->set('2');          
  // $wrapper->save();
  //dpm($wrapper);

  /*
  $comment_id = "10";
  $comment    = comment_load($comment_id);
  $comment_wrapper = entity_metadata_wrapper('comment', $comment);
  // $node_wrapper->field_myfield->set(1)
  // dpm($node_wrapper);
  


  $value['field_name'] = 'field_my_app_post_like'; // field collection name
  $value['field_friend_uid'][LANGUAGE_NONE][0]['value'] = '548415';

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $value);
  $field_entity->setHostEntity('node', $comment_wrapper);
  $field_entity->save();
  */


  // $node_wrapper->save();

  // dpm($node_wrapper->getIdentifier());

  /*

  // 1. Load All node by nid 
  $node = node_load('342');

  $values = array();
  $values['field_name'] = 'field_my_app_update'; 
  $values['field_my_app_title'][LANGUAGE_NONE][0]['value'] = "TEST--";
  $values['field_my_app_message_update'][LANGUAGE_NONE][0]['value'] = "TEST-- u";

  

  $image_url =  (array)_load_image();

  $values['field_image'][LANGUAGE_NONE][0] = $image_url;

  $field_entity = entity_create('field_collection_item', $values);
  $field_entity->setHostEntity("node", $node);
  $field_entity->save(); 

  dpm($field_entity->item_id);
  */

  // field_my_app_update

  // 2. Get field_my_app_update 
  // foreach ($node->field_my_app_update[LANGUAGE_NONE] as $key => $value) {
  //   $data = field_collection_item_load($value['value']);
    
  //   // 3. Check itme_id == nid_item ?
  //   if($data->item_id == $_POST['nid_item']){
      
      
  //     // 4. Create Comment  
  //     $values = array();
  //     $values['field_name'] = 'field_my_app_update_comment'; 
  //     $values['field_comment_message'][LANGUAGE_NONE][0]['value'] = $_POST['text'];

  //     $entity_data = $field_entity = entity_create('field_collection_item', $values);
  //     $field_entity->setHostEntity("field_my_app_update_comment", $data);
  //     $field_entity->save();  //  ยังมีปัญหาอยู่ ต้องแก้ใขเพราะว่าไม่ได้ return สถานะเอามาว่าสำเร็จหรือเปล่า แต่ save สำเร็จ      
      
  //     break;
  //   }
  // }

  /*
  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                  ->entityCondition('bundle', 'field_my_app_post_like')
                  ->fieldCondition('field_object_id', 'value', "-L54GRmavi4e83uiGK54", '=')
                  ->execute();

  if (!empty($entities['field_collection_item'])) {
    $item_id = array_keys($entities['field_collection_item'])[0];
    dpm($item_id);
  }
  */

    // load category 342
  // $node = node_load('342');
  // dpm($node->field_my_app_category[LANGUAGE_NONE][0]['tid']);
  // $category  = $item_load->field_my_app_category[LANGUAGE_NONE][0]['tid'];

  // $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);   

  

  // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $app_id . '/posts/'. $post_id .'/likes/', $data);
  // 

  //watchdog(TAG, 'update_my_application_post_like category: %category', array('%category'=> $wrapper), WATCHDOG_INFO);

  // $result['result']   = TRUE;
  // $result['param']    = $param;
  // $result['category'] = $item_load->field_my_app_category[LANGUAGE_NONE][0]['tid'];


  // $query  = new EntityFieldQuery();
  //   $entities = $query->entityCondition('entity_type', 'field_collection_item')
  //                 ->entityCondition('bundle', 'field_my_app_follower')
  //                 ->fieldCondition('field_my_app_follower_object_id', 'value', $object_id, '=')
  //                 ->execute();

  /*
  $node = node_load('355');
  // dpm($node->field_my_app_follower[LANGUAGE_NONE]);

  foreach ($node->field_my_app_follower[LANGUAGE_NONE] as $key => $value) {
    //   $data = field_collection_item_load($value['value']);
    // dpm(field_collection_item_load($value['value']));

    $items = field_collection_item_load($value['value']);
          
          // $item = array();
          // $item['item_id']        = $value['value'];
          // $item['owner_id']       = $account->uid;
          // $item['name']           = $items->field_my_app_name[LANGUAGE_NONE][0]['value'];
    // dpm($value['value']);
    // dpm($items->field_my_app_uid_follower[LANGUAGE_NONE][0]['value']);
    entity_delete_multiple('field_collection_item', array($value['value']));
  }
  */

  /*
  global $firebase;

  // $value = $firebase->get($, array('shallow' => 'true')); queryOrderedByChild

  $param = '"548460"';

  // array('orderBy' => '"status"', 'equalTo' => '"unread"')
  
  // dpm(gettype($o));
  // $data = json_decode($json, true);
  

  $json = $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . '/548461/my_applications/355/follows');
  foreach (json_decode($json, true) as $key => $value) {
    // dpm($key);
    dpm($value["uid"]);
    // $json2 = $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . '/548461/my_applications/355/follows/'. $key);
    // $data2 = json_decode($json2, true);
  }

  */

  // dpm(field_collection_item_load("1105076")->hostEntity()->uid);
  // dpm(field_collection_item_load("1105076")->hostEntity()->nid);


  /*
  $data_post = field_collection_item_load("1105490");

  $values = array();
  $values['field_name'] = 'field_my_app_update_comment'; 
  $values['field_friend_uid'][LANGUAGE_NONE][0]['value']        = "1234";
  // $values['field_object_id'][LANGUAGE_NONE][0]['value']         = $object_id;
  $values['field_comment_message'][LANGUAGE_NONE][0]['value']   = "xmessage";
    
  $field_entity = entity_create('field_collection_item', $values);
  // $field_entity->uid = $data["uid"];
  $field_entity->setHostEntity("field_my_app_update_comment", $data_post);
  $field_entity->save();

  dpm($field_entity->item_id);
  */



  /*
  $app_id     = "478";
  $friend_id  = "548583";

  $query      = new EntityFieldQuery();
  $entities   = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_my_app_chat')
                      ->fieldCondition('field_application_id', 'value', $app_id, '=')
                      ->fieldCondition('field_friend_uid', 'value', $friend_id, '=')
                      // ->propertyCondition('item_id', "1110350")
                      ->execute();

  if (!empty($entities['field_collection_item'])) {
    // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
    $item_id = array_keys($entities['field_collection_item'])[0];

    $item_load = field_collection_item_load($item_id);

    // $friend_id = $item_load->hostEntity()->uid;

    // $item_load->field_profile_friends_chat_id[LANGUAGE_NONE][0]['value'];
    dpm($item_load->field_profile_friends_chat_id[LANGUAGE_NONE][0]['value']);
  }
  */

  /*

  $app_id     = "478";
  $node     = node_load($app_id); 

  // $node_wrapper = entity_metadata_wrapper('node', $node);

  // dpm($node->title);
  dpm($node->field_image[LANGUAGE_NONE][0]['uri']);

  // $node_wrapper->field_image->value()['uri'])
  */


  /*
  $profile = profile2_by_uid_load("548583", 'main');
  setDefualtClasss($profile);
  */

  $uid = "548596";

/*
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('uid', '548596')
    // ->propertyCondition('uid', $uid)
    // ->propertyCondition('status', 1)
    ->execute(); 
    */ 

  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_my_app_update')
                    // ->fieldCondition('field_object_id', 'value', $object_id, '=')
                    ->execute();
    

  if (!empty($entities['field_collection_item'])) {
    // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
    // $item_id = array_keys($entities['field_collection_item'])[0];
    // entity_delete_multiple('field_collection_item', array($item_id));

    // dpm(array_keys($entities['field_collection_item']));

    $items =  array_keys($entities['field_collection_item']);
    foreach ($items as $key => $value) {
      $data_item = field_collection_item_load("1111436");
      dpm($data_item);
      break;
    }

    // $data_item = field_collection_item_load($item_id);
  }

  return "_klovers_test";
}

function test_add_data(){

   $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', 0, '!=')
        ->condition('ur.uid', 1, '!=')
        ->execute()
        ->fetchCol();

  $mul_users =  user_load_multiple($uids);

  // $data = array();
  foreach ($mul_users as $account) {
    # code...
    
    // $tmp['uid'] = $account->uid;
    // $tmp['name'] = $account->name;
    // $tmp['mail'] = $account->mail;

    // // $path= file_create_url($uri)  uri
    // if(!is_null($account->picture)){
    //   $tmp['url_image'] = file_create_url($account->picture->uri); 
    // }else{
    //   $tmp['url_image'] = "";
    // }

    /*
    // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
    $user_fields = user_load($account->uid);

    if (!$user_fields->uid) {
      // User is not logged in
      //services_error(t('User is not logged in.'), 406);

      $result['result'] = FALSE;
      $result['output'] = "uid not match is user";

      return $result;
    }
    */

    $profile = profile2_by_uid_load($account->uid, 'main');

    if(isset($profile->field_my_application)){
      if (!empty($profile->field_my_application[LANGUAGE_NONE])) {
        foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
          $items = field_collection_item_load($value['value']);
          
          $item = array();
          $item['item_id']        = $value['value'];
          $item['owner_id']       = $account->uid;
          $item['name']           = $items->field_my_app_name[LANGUAGE_NONE][0]['value'];
          $item['category']       = $items->field_my_app_category[LANGUAGE_NONE][0]['tid'];
          $item['picture']        = file_load($items->field_image[LANGUAGE_NONE][0]['fid']);

          /*
          $item = array();
          $item['item_id']        = $field_entity->item_id;
          $item['owner_id']       = $_REQUEST['uid'];
          $item['name']           = $_REQUEST['name'];
          $item['category']       = $_REQUEST['category'];
          $item['picture']        = (array)$file;
          */

          /* 
            เราต้อง ไป add my_application ไว้ที่ firebase ด้วย แยกตาม category
          */
          /*
          $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . 'data/' . $items->field_my_app_category[LANGUAGE_NONE][0]['tid'] . '/' . $value['value'], $item);
          */

        }
      }
    }

    /*
    // My Application : field_my_application
    $my_applications = array();
    if(isset($profile->field_my_application)){
      if (!empty($profile->field_my_application[LANGUAGE_NONE])) {
        foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
          $items = field_collection_item_load($value['value']);
          
          $item = array();
          $item['item_id']        = $value['value'];
          $item['name']           = $items->field_my_app_name[LANGUAGE_NONE][0]['value'];
          $item['category']       = $items->field_my_app_category[LANGUAGE_NONE][0]['tid'];
          $item['picture']        = file_load($items->field_image[LANGUAGE_NONE][0]['fid']);

          $posts = array();
          if(isset($items->field_my_app_update)){
            if (!empty($items->field_my_app_update[LANGUAGE_NONE])) {
              foreach ($items->field_my_app_update[LANGUAGE_NONE] as $pkey => $pvalue) {

                  $pitems = field_collection_item_load($pvalue['value']);
                  $posts[$pvalue['value']]["title"]    = $pitems->field_my_app_title[LANGUAGE_NONE][0]['value'];
                  $posts[$pvalue['value']]["message"]  = $pitems->field_my_app_message_udate[LANGUAGE_NONE][0]['value'];
                  $posts[$pvalue['value']]['picture']  = file_load($pitems->field_image[LANGUAGE_NONE][0]['fid']);

                  $comments =array();
                  
                  if(isset($pitems->field_my_app_update_comment)){
                    if (!empty($pitems->field_my_app_update_comment[LANGUAGE_NONE])) {
                      foreach ($pitems->field_my_app_update_comment[LANGUAGE_NONE] as $ckey => $cvalue) {
                          $citems = field_collection_item_load($cvalue['value']);

                          $comments[$cvalue['value']]['message'] = $citems->field_comment_message[LANGUAGE_NONE][0]['value'];
                      }
                    }
                  }
                  
                  $posts[$pvalue['value']]['comments']  = $comments;
              }
            }
          }

          $item['posts']  = $posts;
      
          $my_applications[$value['value']] = $item;
        }
      }
    }
    */
  }


  return "test_add_data";
}

function test_create_user(){

  /*
// add new user
    $new_user = array(
      'name' => generate_name_annmousu($getallheaders['udid']),
      'pass' => DEFUALT_PASSWORD, // note: do not md5 the password
      'mail' => $getallheaders['udid'] . '@annmousu',
      'status' => 1,
      'init' => $getallheaders['udid'] . '@annmousu',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
      ),
    );

    // The first parameter is sent blank so a new user is created.
    user_save('', $new_user); 
  */

  for ($x = 0; $x <= 50000; $x++) {
    $new_user = array(
      'name' => generateRandomString(),
      'pass' => DEFUALT_PASSWORD, // note: do not md5 the password
      'mail' => generateRandomString() . '@annmousu',
      'status' => 1,
      'init' => generateRandomString() . '@annmousu',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
      ),
    );

    // The first parameter is sent blank so a new user is created.
    user_save('', $new_user); 
  } 

  return "test_create_user()";
}

function test_create_center(){

  global $firebase;

  $bundle = "application";

  /*
  9: Personal
  1: Brand and Business
  2: Services
  3: Entertainment
  4: Finance
  5: Academy
  6: Medical
  7: IT and Technology
  8: Other
  */

  for ($i=1; $i <= 9; $i++) { 
    $query  = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $bundle)
      ->propertyCondition('status', 1)
      ->fieldCondition('field_my_app_category', 'tid', $i)
      // ->propertyCondition('title', $udid, '=')
      ->range(0,10)
      ->execute();

    // dpm($result['node']);

    if (!empty($result['node'])) {
      $nids = array_keys($result['node']);

      // dpm($nids);
      
      foreach ($nids as $key => $nid) {
        $node = node_load($nid);


        /// set status on store เพือจะได้รู้ว่า application แสดงอยู่บน store
        $node_wrapper = entity_metadata_wrapper('node', $node);
        $node_wrapper->field_on_store->set(1);
        $node_wrapper->save();
        /// 

        // dpm($node->title);
        // dpm($node);

        // dpm($node->field_my_app_picture[LANGUAGE_NONE][0]['uri']);

 

        // $fid = (array)file_load($node->field_my_app_picture[LANGUAGE_NONE][0]['fid']);

        $uri = "";
        if (isset($node->field_my_app_picture[LANGUAGE_NONE])) {
          $uri = $node->field_my_app_picture[LANGUAGE_NONE][0]['uri'];
        }else{
         //  $uri = $node->field_image[LANGUAGE_NONE][0]['uri'];
        }

        $image_url = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
        // dpm($image_url);

        $profile = profile2_by_uid_load($node->uid, 'main');

        $app_name  = $node->title;

        $value = array(
                      "category"  => $i,
                      "image_url" => $image_url,
                      "name"      => $app_name,
                      "owner_id"  => $node->uid,
                      "owner_name"  => $profile->field_profile_name[LANGUAGE_NONE][0]['value'],
                      );
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $node->nid .'/', $value);

      }
    }
  }

  return 'test_create_user';
}

function _klovers_mail()
{
    $to = "myemail@domaine.com";
    $subject = "Hi!";
    $body = "Hi,\n\nHow are you?";
    if (mail($to, $subject, $body)) {
            echo("<p>Message successfully sent!</p>");
    } else {
            echo("<p>Message delivery failed...</p>");
    }

  return "_klovers_mail";
}

function ​fetch_data_firebase(){
    global $user;

    /*
    // Firebase increment new HW Login
    $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

    dpm($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'));
    dpm(gettype(json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'))));

    $obj = json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'));
    foreach ($obj as $key => $val) {
      dpm($key);
      dpm($val);
    }
    */

    // KWs2Xl9d9EbW_k_myjm

    return "​fetch_data_firebase";
}

function ​delete_data_firebase()
{

    global $user;
    /*
    // Firebase increment new HW Login
    $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

    
  

    // dpm($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'));
    // dpm(gettype(json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'))));

    $obj = json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/'));
    foreach ($obj as $key => $val) {
      dpm($key);
      dpm($val);
      dpm($val->token);
    }

    $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . 267 .'/HW/-KWs2Xl9d9EbW_k_myjm');

  */
    // KWs2Xl9d9EbW_k_myjm

    return "​fetch_data_firebase";
}

function _klovers_upload_file()
{

  /*
    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://my-image-folder';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    //Saves a file to the specified destination and creates a database entry.
    $file = file_save_data($image, 'public://my-image-folder/im.png', FILE_EXISTS_RENAME);

    //Set the file status to permanent so it is not deleted in next cron run
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);

    dpm((array)$file);
  */

  dpm(___test());
    
  return "_klovers_upload_file";
}

// http://drupal.stackexchange.com/questions/182660/json-fromat-for-user-login-with-email-address-services
/**
 * Implements hook_services_resources_alter().
 */
// function idna_services_resources_alter(&$resources, &$endpoint) {
//   // Override the normal user login callback.
//   if (isset($resources['user']['actions']['login']['callback'])) {
//     $resources['user']['actions']['login']['callback'] = 'idna_services_login';
//   }
// }

/**
 * Replacement callback for the Services user login resource. Optionally use the email address to login.
 *
 * @see _user_resource_login().        
 * @see https://drupal.org/node/1431724
 */
// function idna_services_login() {

//   if (valid_email_address($_REQUEST['username'])){
//     $account = user_load_by_mail($_REQUEST['username']);
//     $username = $account->name;
//   } else {
//     $username = $username_email;
//   }
  
//   //Pass through to the existing services callback
//   module_load_include('inc', 'services', 'resources/user_resource');

//   $result['result']   = TRUE;
//   $result['data']     = _user_resource_login($username, $_REQUEST['password']);
//   return $result;
// }

function list_game_live(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $collection_item_query    = new EntityFieldQuery();
  $collection_item_output   = $collection_item_query->entityCondition('entity_type', 'node')
                              ->entityCondition('bundle', 'game_live_streaming')
                              ->fieldCondition('field_ls_status', 'value', 'publish', '=')
                              ->execute();

  $data = array();
  if (!empty($collection_item_output['node'])) {
    $collection_item = array_keys($collection_item_output['node']);
    foreach ($collection_item as $k => $nid) {
      $node = node_load($nid);

      
      // $application_name  = $application_node->title;

      $ls_object_id = $node->field_ls_object_id[LANGUAGE_NONE][0]['value'];

      $profile      = profile2_by_uid_load(base64_decode($ls_object_id), 'main');
      $profile_name = $profile->field_profile_name[LANGUAGE_NONE][0]['value'];

      $profile_image_url;
      if(isset($profile->field_profile_image[LANGUAGE_NONE])){
        $profile_image_url = substr(file_create_url(image_style_url('medium', $profile->field_profile_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
      }else{
        $profile_image_url =  getDefualtProfilePicture();
      }

      $data[$nid] = array('application_id'=>$nid, 'live_name'=>$ls_object_id, 'application_name'=>$profile_name, "image_url"=>$profile_image_url);


      /*
      $collection_item_load = field_collection_item_load($v);

      $application_nid   = $collection_item_load->hostEntity()->nid;
      $application_node  = node_load($application_nid); 

      $application_name  = $application_node->title;

      $application_image_url = '';
      if (isset($application_node->field_my_app_picture[LANGUAGE_NONE])) {
        $application_image_url = substr(file_create_url(image_style_url('medium', $application_node->field_my_app_picture[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
      }
      
      $data[$application_nid] = array('application_id'=>$application_nid, 'live_name'=>base64_encode($application_nid), 'application_name'=>$application_name, "image_url"=>$application_image_url);
      */
    }
  }

  $result['result'] = TRUE;
  $result['data']   = $data;
  return $result;
}

function list_live_streaming(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $collection_item_query    = new EntityFieldQuery();
  $collection_item_output   = $collection_item_query->entityCondition('entity_type', 'field_collection_item')
                              ->entityCondition('bundle', 'field_my_app_live_streaming')
                              ->fieldCondition('field_ls_status', 'value', 'publish', '=')
                              ->execute();

  $data = array();
  if (!empty($collection_item_output['field_collection_item'])) {
    $collection_item = array_keys($collection_item_output['field_collection_item']);
    foreach ($collection_item as $k => $v) {
      $collection_item_load = field_collection_item_load($v);

      $application_nid   = $collection_item_load->hostEntity()->nid;
      $application_node  = node_load($application_nid); 

      $application_name  = $application_node->title;

      $application_image_url = '';
      if (isset($application_node->field_my_app_picture[LANGUAGE_NONE])) {
        $application_image_url = substr(file_create_url(image_style_url('medium', $application_node->field_my_app_picture[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
      }
      
      $data[$application_nid] = array('application_id'=>$application_nid, 'live_name'=>base64_encode($application_nid), 'application_name'=>$application_name, "image_url"=>$application_image_url);
    }
  }

  $result['result'] = TRUE;
  $result['data']   = $data;
  return $result;
}

function force_logout(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['item_id'])) {
    $result['result'] = FALSE;
    $result['message'] = "function force_logout : parameter";
    return $result;
  }

  global $firebase;
  $uid     = $_REQUEST['uid'];
  $item_id = $_REQUEST['item_id']; 

  entity_delete_multiple('field_collection_item', array($item_id));   
  $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $item_id . '/');

  $result['result']   = TRUE;
  return $result;
}

function logout()
{
  $result = array();

  if (!check_header()) {
    # code...
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['uid'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : logout, parameter";
    return $result;
  }

  global $firebase;

  $getallheaders = nginx_getallheaders();

  $uid = $param['uid'];

  // $profile = profile2_by_uid_load($uid, 'main');

  /*
  $field_collection_item_values = array();

  // http://drupal.stackexchange.com/questions/68765/how-to-properly-delete-a-field-collection
  foreach ($profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // if($value['value'] == 16){ 
    if($data->field_udid[LANGUAGE_NONE][0]['value'] == $getallheaders['udid']){
      // เก็บค่าที่ต้องการลบ
      $field_collection_item_values[] = $value['value'];
    }
  }

  // Delete field collection items.  ลบ
  entity_delete_multiple('field_collection_item', $field_collection_item_values);
  // เก็บ  Device Access แบบใหม่
  */

  // watchdog('user', 'Service : Session closed for %name.', array('%name' => $profile->name));

  // Destroy the current session.
  // module_invoke_all('user_logout', $profile);

  /////////--------

  /*
  เป้น การ load friends ของ uid ขึ้นมาเช็ดว่า friend_id เป้น friend เราอยุ่หรือไม่
  */
  $profile = profile2_by_uid_load($uid, 'main');

  if(isset($profile->field_device_access)){
    foreach ($profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
      $item_load = field_collection_item_load($value['value']);

      if (strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $getallheaders['udid']) == 0) {
        $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
        $wrapper->field_is_login->set('0');
        $wrapper->field_online->set('0');
        $wrapper->save();

        // $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $value['value'] . "/");

        $val = array(
            "is_login"  => '0',
            "online"    => '0',
          );
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $value['value'] . "/", $val);

        /*
        $path = FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $value['value'] . "/";
        if ($firebase->get($path)) {
          watchdog(TAG, 'logout  : Y > %path', array('%path'=>$path), WATCHDOG_INFO);
        }else{
          watchdog(TAG, 'logout  : N > %path', array('%path'=>$path), WATCHDOG_INFO);
        }
        */
      }

      // watchdog(TAG, 'idna_user_login header 0009 : %header', array('%header'=> serialize($value['value'])), WATCHDOG_INFO);

      /*
      if (strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $getallheaders['udid']) == 0) {
        $val = array(
            "is_login"  => '0',
            "online"    => '0',
            "update"    => time()
          );
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/profiles/device_access/' . $value['value'] . "/", $val);

        break;
      }
      */
    }
  }
  /////////--------


  /*
  $user=user_load($uid);

  // watchdog(TAG, 'TEST : %account', array('%account'=> serialize($profile)), WATCHDOG_INFO);
  // watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

  // drupal_session_destroy_uid($uid);
  // module_invoke_all('user_logout', $profile);

  $original_session_state = drupal_save_session();
  drupal_save_session(TRUE);

  // Destroy the current session.
  module_invoke_all('user_logout', $user);
  session_destroy();

  // Load the anonymous user.
  // $user = drupal_anonymous_user();
  drupal_anonymous_user();

  drupal_save_session($original_session_state);
  */

  // session_destroy();
  /*
  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  // $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $_REQUEST['uid'] .'/profile/' . $_REQUEST['platform'] .'/'. str_replace('.', '_', $_REQUEST['bundleidentifier']) .'/hw/' . $_REQUEST['udid']);

  $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $_REQUEST['uid'] .'/data/devices/' . $_REQUEST['udid']);
  */

  $result['result'] = TRUE;

  return $result;
}

function login(){
  $result = array();

  if (!check_header()) {
    # code...
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['name']) || empty($param['pass'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : login, parameter";
    $result['param']  = $param;
    return $result;
  }

  $name = $param['name'];
  $pass = $param['pass'];

  if (IsEmail($name)) {
    $name = db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:name)", array(':name' => $name))->fetchField();
  }
  
  module_load_include('inc', 'services', 'resources/user_resource');

  $result['result']         = TRUE;
  // $result['data']           = _user_resource_login($name, $pass);

  $result['data']     = onLoadDataUser(_user_resource_login($name, $pass));

  return $result;
}

function annmousu(){
  $result = array();

  if (!check_header()) {
    # code...
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    $result['hd']       = $getallheaders = nginx_getallheaders();

    // $result['bx']       = getallheaders()["bundle-identifier"]; // $getallheaders["bundle-identifier"])
    return $result;
  }

  $getallheaders = nginx_getallheaders();

  // เช็กว่ามี  user ที่มี email แล้วหรือไม
  if (user_load_by_mail($getallheaders['udid'] . '@annmousu') == "") {
    // add new user
    $new_user = array(
      'name' => generate_name_annmousu($getallheaders['udid']),
      'pass' => DEFUALT_PASSWORD, // note: do not md5 the password
      'mail' => $getallheaders['udid'] . '@annmousu',
      'status' => 1,
      'init' => $getallheaders['udid'] . '@annmousu',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
      ),
    );

    // The first parameter is sent blank so a new user is created.
    user_save('', $new_user); 
  }
  
  module_load_include('inc', 'services', 'resources/user_resource');

  $result['result']   = TRUE;
  // $result['data']     = _user_resource_login(generate_name_annmousu($getallheaders['udid']), DEFUALT_PASSWORD);


  $data           = onLoadDataUser(_user_resource_login(generate_name_annmousu($getallheaders['udid']), DEFUALT_PASSWORD));
  $result['data'] = $data;

  watchdog(TAG, 'annmousu: %data', array('%data'=>serialize($data)), WATCHDOG_INFO);


  return $result;
}

function onLoadDataUser($user){
  $result = array();

  if (property_exists($user, 'user')) {

    $time_start = microtime(true);

    $uid = $user->user->uid;

    // $profile        = profile2_by_uid_load($uid, 'main');

    
    
    ////////////////////// my_applications //////////////////////////////
    /*
    $result['profiles']       = (object)$profiles;
    $result['my_applications']= (object)$my_applications;
    $result['friends']        = (object)$friends;
    $result['groups']         = (object)$groups;
    $result['classs']         = (object)$classs;
    $result['followings']     = (object)$following;
    $result['center_chats']   = (object)$center_chats;
    $result['user']           = $user;
    */

    $user_profile = onLoadProfile($uid, 'all');

    /*
      $result['result'] = TRUE;
      $result['data']   = array('profiles'       =>(object)$profiles,
                              'my_applications'=>(object)$my_applications,
                              'friends'        =>(object)$friends,
                              'groups'         =>(object)$groups,
                              'classs'         =>(object)$classs,
                              'followings'     =>(object)$followings,
                              'center_chats'   =>(object)$center_chats,);
    */
    $friend_profiles = array();
    if ($user_profile['result']) {
      $friends = $user_profile['data']['friends'];
      foreach ($friends as $key => $value) {
        $friend_profile = onLoadProfile($key, 'profile');

        // $result['data']   = array('profiles'  =>(object)$profiles);
        if ($friend_profile['result']) {
          $friend_profiles[$key] = $friend_profile['data']['profiles'];
        }
      }
    }
    
    $time_end = microtime(true);
    $time = number_format(($time_end - $time_start), 2);

    // echo 'This page loaded in ', $time, ' seconds';

    $result['time'] = 'processing = '. $time . ' seconds';

    $result['user']             = (object)$user;
    $result['user_profile']     = (object)$user_profile['data'];
    $result['friend_profiles']  = (object)$friend_profiles;
    /*
    $result['data'] = array('user'           =>(object)$user, 
                            'profiles'       =>(object)$profiles,
                            'my_applications'=>(object)$my_applications,
                            'friends'        =>(object)$friends,
                            'groups'         =>(object)$groups,
                            'classs'         =>(object)$classs,
                            'followings'     =>(object)$followings,
                            'center_chats'   =>(object)$center_chats,);
    */
    return $result;
  }

  return $data;
}

function onLoadProfile($uid, $mode){
  $result = array();
  switch (strtolower($mode)) {
    case 'all':{
        $conversations = array();

        $profile  = profile2_by_uid_load($uid, 'main');
        $profile_name           = $profile->field_profile_name[LANGUAGE_NONE][0]['value'];

        if (isset($profile->field_profile_display_name[LANGUAGE_NONE])) {
          $profile_name = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
        }

        $profile_status_message = "";
        if(isset($profile->field_profile_status_message[LANGUAGE_NONE])){
          $profile_status_message = $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'];
        }

        $profile_url_my_qrcode = "";
        if (isset($profile->field_profile_my_qrcode[LANGUAGE_NONE])) {
          $profile_url_my_qrcode  = substr(file_create_url(image_style_url('medium', $profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
        }
        
        // badges
        $badges = array();
        if(isset($profile->field_profile_badges[LANGUAGE_NONE])){
          foreach ($profile->field_profile_badges[LANGUAGE_NONE] as $k_badges => $v_badges) {
            $item_badges = field_collection_item_load($v_badges['value']);

            $data_badge_contact  = $item_badges->field_profile_badge_contact[LANGUAGE_NONE][0]['value'];
            $data_badge_recent   = $item_badges->field_profile_badge_recent[LANGUAGE_NONE][0]['value'];
            $data_badge_center   = $item_badges->field_profile_badge_center[LANGUAGE_NONE][0]['value'];
            $data_badge_setting  = $item_badges->field_profile_badge_setting[LANGUAGE_NONE][0]['value'];

            $badges =array("contact" => $data_badge_contact,
                           "center"  => $data_badge_recent, 
                           "recent"  => $data_badge_center,
                           "setting" => $data_badge_setting);
          }
        }else{
          $badges =array( "contact" => '0',
                          "center"  => '0', 
                          "recent"  => '0',
                          "setting" => '0');
        }
        
        $profile_line_id = "";
        if(isset($profile->field_profile_line_id[LANGUAGE_NONE])){
          $profile_line_id = $profile->field_profile_line_id[LANGUAGE_NONE][0]['value'];
        }

        // เสียงรอสาย
        $sound_call_waitings = array();
        if(isset($profile->field_sound_call_waiting[LANGUAGE_NONE])){
          foreach ($profile->field_sound_call_waiting[LANGUAGE_NONE] as $k_call_waiting => $v_call_waiting) {
            $data_call_waiting = field_collection_item_load($v_call_waiting['value']);

           
            $data_call_waiting_item_id  = $data_call_waiting->field_sound_call_waiting_item_id[LANGUAGE_NONE][0]['value'];
            $data_call_waiting_title    = $data_call_waiting->field_sound_call_waiting_title[LANGUAGE_NONE][0]['value'];
            $data_call_waiting_uri      = $data_call_waiting->field_sound_call_waiting_uri[LANGUAGE_NONE][0]['value'];

            $sound_call_waitings[$v_call_waiting['value']] =array("nid"       => $data_call_waiting_item_id, 
                                                                 "sound_url" => $data_call_waiting_uri,
                                                                 "title"     => $data_call_waiting_title);
          }
        }

        // Phones
        $phones = array();
        if(isset($profile->field_profile_multi_phone[LANGUAGE_NONE])){
          foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $k_phone => $v_phone) {
              $data_item_phone = field_collection_item_load($v_phone['value']);
              
              $data_item_phone_phone   =  $data_item_phone->field_phone_number[LANGUAGE_NONE][0]['value'];
              $data_item_phone_enabled =  $data_item_phone->field_enable[LANGUAGE_NONE][0]['value'];
              $phones[$v_phone['value']] = array('name'=>$data_item_phone_phone, 'enabled'=>$data_item_phone_enabled);
          }
        }

        // Emails
        $emails = array();
        if(isset($profile->field_profile_multi_email[LANGUAGE_NONE])){
          foreach ($profile->field_profile_multi_email[LANGUAGE_NONE] as $k_email => $v_email) {
              $data_item_email = field_collection_item_load($v_email['value']);
              
              $data_item_email_email   =  $data_item_email->field_email_text[LANGUAGE_NONE][0]['value'];
              $data_item_email_enabled =  $data_item_email->field_enable[LANGUAGE_NONE][0]['value'];
              $emails[$v_email['value']] = array('name'=>$data_item_email_email, 'enabled'=>$data_item_email_enabled);
          }
        }

        // my_id
        $my_id = array();
        if(isset($profile->field_profile_my_id[LANGUAGE_NONE])){
          foreach ($profile->field_profile_my_id[LANGUAGE_NONE] as $k_my_id => $v_my_id) {
              $data_my_id = field_collection_item_load($v_my_id['value']);
              
              $my_id_value   =  $data_my_id->field_profile_my_id_value[LANGUAGE_NONE][0]['value'];
              $my_id_is_edit =  $data_my_id->field_profile_my_id_is_edit[LANGUAGE_NONE][0]['value'];
              $my_id[$v_my_id['value']] = array('enabled'=>'1', 'is_edit'=>$my_id_is_edit, 'value'=>$my_id_value);
          }
        }

        // image_url
        $profile_image_url;
        if(isset($profile->field_profile_image[LANGUAGE_NONE])){
          $profile_image_url = substr(file_create_url(image_style_url('medium', $profile->field_profile_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
        }else{
          $profile_image_url =  getDefualtProfilePicture();
        }

        // bg_url
        $profile_bg_url;
        if(isset($profile->field_my_app_bg[LANGUAGE_NONE])){
          $profile_bg_url = substr(file_create_url(image_style_url('medium', $profile->field_my_app_bg[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
        }else{
          $profile_bg_url = getDefualtBackgroundCardPicture();
        }

        // device_access
        $device_access = array();
        if(isset($profile->field_device_access[LANGUAGE_NONE])){
          foreach ($profile->field_device_access[LANGUAGE_NONE] as $k_device_access => $v_device_access) {
              $data_item_device_access = field_collection_item_load($v_device_access['value']);

              $data_item_device_access_build       = $data_item_device_access->field_device_access_build[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_bundle_identifier = $data_item_device_access->field_bundle_identifier[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_device_name = $data_item_device_access->field_device_name[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_is_login    = $data_item_device_access->field_is_login[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_model_number= $data_item_device_access->field_model_number[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_online      = $data_item_device_access->field_online[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_platform    = $data_item_device_access->field_platform[LANGUAGE_NONE][0]['value'];

              $data_item_device_access_token_notification = '';
              if (isset($data_item_device_access->field_key_token_notification[LANGUAGE_NONE])) {
                $data_item_device_access_token_notification = $data_item_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];
              }
              
              $data_item_device_access_token_pushkit = '';
              if (isset($data_item_device_access->field_pushkit_token[LANGUAGE_NONE])) {
                $data_item_device_access_token_pushkit = $data_item_device_access->field_pushkit_token[LANGUAGE_NONE][0]['value'];
              }
              
              $data_item_device_access_udid        = $data_item_device_access->field_udid[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_version     = $data_item_device_access->field_device_access_version[LANGUAGE_NONE][0]['value'];

              $device_access[$v_device_access['value']] = array('build'      => $data_item_device_access_build, 
                                                                'bundle_identifier' => $data_item_device_access_bundle_identifier,
                                                                'device_name'=>$data_item_device_access_device_name,
                                                                'is_login'   =>$data_item_device_access_is_login,
                                                                'model_number'=> $data_item_device_access_model_number,
                                                                'online'     =>$data_item_device_access_online,
                                                                'platform'   =>$data_item_device_access_platform,
                                                                'token_notification'     =>$data_item_device_access_token_notification,
                                                                'token_pushkit'     =>$data_item_device_access_token_pushkit,
                                                                'udid'        =>$data_item_device_access_udid,
                                                                'version'     =>$data_item_device_access_version);
          }
        }

        $friends = array();
        if(isset($profile->field_profile_friends[LANGUAGE_NONE])){
          foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $k_friends => $v_friends) {
              $item_friends = field_collection_item_load($v_friends['value']);

              $item_friends_block    = '0';
              if (isset($item_friends->field_profile_friends_is_block[LANGUAGE_NONE])) {
                $item_friends_block    =  $item_friends->field_profile_friends_is_block[LANGUAGE_NONE][0]['value'];
              }

              $item_friends_hide    = '0';
              if (isset($item_friends->field_profile_friends_is_hide[LANGUAGE_NONE])) {
                $item_friends_hide    =  $item_friends->field_profile_friends_is_hide[LANGUAGE_NONE][0]['value'];
              }

              $item_friends_change_friends_name    = '';
              if (isset($item_friends->field_change_friend_name[LANGUAGE_NONE])) {
                $item_friends_change_friends_name    =  $item_friends->field_change_friend_name[LANGUAGE_NONE][0]['value'];
              }


              $item_friends_chat_id  = $item_friends->field_profile_friends_chat_id[LANGUAGE_NONE][0]['value'];


              $item_friends_class = '';
              if (isset($item_friends->field_profile_friend_classs[LANGUAGE_NONE])) {
                $item_friends_class   = $item_friends->field_profile_friend_classs[LANGUAGE_NONE][0]['value'];
              }

              $item_friends_favorite = '0';
              if (isset($item_friends->field_profile_friends_favorite[LANGUAGE_NONE])) {
                $item_friends_favorite = $item_friends->field_profile_friends_favorite[LANGUAGE_NONE][0]['value'];
              }


              $item_friends_item_id  = $v_friends['value'];
              $item_friends_status   = $item_friends->field_friend_status[LANGUAGE_NONE][0]['tid'];

              $item_friends_friend_id= $item_friends->field_friend_uid[LANGUAGE_NONE][0]['value'];


              $conversations[$item_friends_chat_id] = onLoadConversations($item_friends_chat_id);

              $friends[$item_friends_friend_id] = array('block'                => $item_friends_block,
                                           'hide'                 => $item_friends_hide,
                                           'change_friends_name'  => $item_friends_change_friends_name,
                                           'chat_id'              => $item_friends_chat_id,
                                           'classs'               => $item_friends_class,
                                           'favorite'             => $item_friends_favorite,
                                           'item_id'              => $item_friends_item_id,
                                           'status'               => $item_friends_status);
          }
        }

        $classs = array();
        if (isset($profile->field_field_my_class[LANGUAGE_NONE])) {
          foreach ($profile->field_field_my_class[LANGUAGE_NONE] as $k_classs => $v_classs) {
            $item_classs = field_collection_item_load($v_classs['value']);

            $item_classs_name = '';
            if (isset($item_classs->field_class_name[LANGUAGE_NONE])) {
              $item_classs_name = $item_classs->field_class_name[LANGUAGE_NONE][0]['value'];
            }

            $item_classs_image_url = "";
            if (isset($item_classs->field_class_image_profile[LANGUAGE_NONE])) {
              $item_classs_image_url = substr(file_create_url(image_style_url('medium', $item_classs->field_class_image_profile[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
            }

            $item_classs_is_default = '0';
            if (isset($item_classs->field_is_default[LANGUAGE_NONE])) {
              $item_classs_is_default = $item_classs->field_is_default[LANGUAGE_NONE][0]['value'];
            }

            $classs[$v_classs['value']] = array("image_url"  =>$item_classs_image_url,
                                                "is_default" =>$item_classs_is_default,
                                                "name"       =>$item_classs_name
                                              );
          }
        }

        $followings = array();
        if (isset($profile->field_following[LANGUAGE_NONE])) {
          foreach ($profile->field_following[LANGUAGE_NONE] as $k_following => $v_following) {
            $item_following = field_collection_item_load($v_following['value']);

            if (node_load($item_following->field_id_my_app_following[LANGUAGE_NONE][0]['value'])) {
              $item_following_node_id   = $item_following->field_id_my_app_following[LANGUAGE_NONE][0]['value'];
              $item_following_status    = $item_following->field_status_following[LANGUAGE_NONE][0]['value'];

              $item_following_owner_id  = '';
              if (isset($item_following->field_my_application_uid[LANGUAGE_NONE])) {
                $item_following_owner_id  = $item_following->field_my_application_uid[LANGUAGE_NONE][0]['value'];
              }

              $item_following_name      = '';
              if (isset($item_following->field_my_app_name[LANGUAGE_NONE])) {
                $item_following_name      = $item_following->field_my_app_name[LANGUAGE_NONE][0]['value'];
              }

              $item_following_image_url = '';
              if (isset($item_following->field_path_uri[LANGUAGE_NONE])) {
                 $item_following_image_url = $item_following->field_path_uri[LANGUAGE_NONE][0]['value'];
              }

              $item_following_item_id   = $v_following['value'];
              
              $item_following_object_id = $item_following->field_my_app_follower_object_id[LANGUAGE_NONE][0]['value'];

              $followings[$item_following_object_id] = array( "image_url"  =>$item_following_image_url,
                                                              "item_id"    =>$item_following_item_id,
                                                              "name"       =>$item_following_name,
                                                              "node_id"    =>$item_following_node_id,
                                                              "owner_id"   =>$item_following_owner_id,
                                                              "status"     =>$item_following_status,
                                                            );
            }

            
          }
        }

        $groups        = array();
        // $groups_detail = array();
        if (isset($profile->field_chat_group[LANGUAGE_NONE])) {
          foreach ($profile->field_chat_group[LANGUAGE_NONE] as $k_groups => $v_groups) {
            $item_groups = field_collection_item_load($v_groups['value']);


            $group_id = $item_groups->field_group_id[LANGUAGE_NONE][0]['value'];
            $groups[$group_id] = array("item_id"  =>$v_groups['value'],
                                       "status"   =>$item_groups->field_mg_status[LANGUAGE_NONE][0]['tid']);

            $groups_detail_node     = node_load($group_id); 
            if (!$groups_detail_node) {
              continue;
            }

            $groups_detail_node_name    = $groups_detail_node->title;
            $groups_detail_node_chat_id = $groups_detail_node->field_object_id[LANGUAGE_NONE][0]['value'];

            $groups_detail_node_image_url = '';
            if (isset($groups_detail_node->field_image_chat_group[LANGUAGE_NONE])) {
              $groups_detail_node_image_url = substr(file_create_url(image_style_url('medium', $groups_detail_node->field_image_chat_group[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
            }

            // field_members_group
            $groups_detail_node_members_group = array();
            if (isset($groups_detail_node->field_members_group[LANGUAGE_NONE])) {
              foreach ($groups_detail_node->field_members_group[LANGUAGE_NONE] as $k_members_group => $v_members_group) {
                $item_members_group = field_collection_item_load($v_members_group['value']);
  
                $item_members_group_friend_id = $item_members_group->field_members_group_friend_id[LANGUAGE_NONE][0]['value'];
                $item_members_group_status    = $item_members_group->field_mg_status[LANGUAGE_NONE][0]['tid'];

                $groups_detail_node_members_group[$item_members_group_friend_id] = array('item_id'=>$v_members_group['value'], 
                                                                                         'status'   =>$item_members_group_status);
              }
            }

            $groups[$group_id]['detail'] = array("chat_id"    => $groups_detail_node_chat_id,
                                                 "name"       => $groups_detail_node_name,
                                                 "creator_id" => $groups_detail_node->uid,
                                                 "members"    => $groups_detail_node_members_group,
                                                 "image_url"  => $groups_detail_node_image_url);

            /*
            $item_groups_chat_id    = $item_groups->field_object_id[LANGUAGE_NONE][0]['value'];
            $item_groups_image_url  = '';
            if (isset($item_groups->field_picture_group[LANGUAGE_NONE])) {
              $uri = $item_groups->field_picture_group[LANGUAGE_NONE][0]['uri'];

              $item_groups_image_url = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
            }

            $item_groups_members_group = array();
            if (isset($item_groups->field_members_group[LANGUAGE_NONE])) {
              foreach ($item_groups->field_members_group[LANGUAGE_NONE] as $k_members_group => $v_members_group) {
                $item_members_group = field_collection_item_load($v_members_group['value']);

                $item_members_group_friend_id = $item_members_group->field_members_group_friend_id[LANGUAGE_NONE][0]['value'];
                $item_members_group_status = $item_members_group->field_members_group_friend_id[LANGUAGE_NONE][0]['value'];

                $members_group[$v_members_group['value']] = array('friend_id'=>$item_members_group_friend_id, 
                                                                  'status'   =>$item_members_group_status);
              }
            }

            $item_groups_name       = $item_groups->field_name_group[LANGUAGE_NONE][0]['value'];
            $item_groups_owner_id   = $item_groups->field_chat_group_owner_id[LANGUAGE_NONE][0]['value'];
            $item_groups_status     = $item_groups->field_status_group[LANGUAGE_NONE][0]['value'];


            $conversations[$item_groups_chat_id] = onLoadConversations($item_groups_chat_id);

            $groups[$v_groups['value']] = array('chat_id' =>$item_groups_chat_id,
                                              'image_url' =>$item_groups_image_url,
                                              'members'   =>(object)$item_groups_members_group,
                                              'name'      =>$item_groups_name,
                                              'owner_id'  =>$item_groups_owner_id,
                                              'status'    =>$item_groups_status);
            */
          }
        }

        $center_chats = array();
        if (isset($profile->field_my_app_chat[LANGUAGE_NONE])) {
          foreach ($profile->field_my_app_chat[LANGUAGE_NONE] as $k_center_chat => $v_center_chat) {
            $item_center_chat = field_collection_item_load($v_center_chat['value']);

            $item_center_chat_app_id   = '';
            if (isset($item_center_chat->field_application_id[LANGUAGE_NONE])) {
              $item_center_chat_app_id   = $item_center_chat->field_application_id[LANGUAGE_NONE][0]['value'];
            }

            $item_center_chat_owner_id = '';
            if (isset($item_center_chat->field_owner_id[LANGUAGE_NONE])) {
              $item_center_chat_owner_id = $item_center_chat->field_owner_id[LANGUAGE_NONE][0]['value'];
            }

            $item_center_chat_chat_id  = '';
            if (isset($item_center_chat->field_profile_friends_chat_id[LANGUAGE_NONE])) {
              $item_center_chat_chat_id  = $item_center_chat->field_profile_friends_chat_id[LANGUAGE_NONE][0]['value'];
            }

            $item_center_chat_friend_id  = '';
            if (isset($item_center_chat->field_friend_uid[LANGUAGE_NONE])) {
              $item_center_chat_friend_id  = $item_center_chat->field_friend_uid[LANGUAGE_NONE][0]['value'];
            }

            $node     = node_load($item_center_chat_app_id); 

            if (!$node) {
              continue;
            }
            // watchdog(TAG, 'node: %param-%n', array('%param'=>$node->title, '%n'=>$item_center_chat_app_id), WATCHDOG_INFO);
            $application_name = $node->title;//$node->field_my_app_name[LANGUAGE_NONE][0]['value'];

            $application_image_url = '';
            // รูปของ application ที่เรากดคุยด้วย
            if (isset($node->field_my_app_picture[LANGUAGE_NONE])) {
              $application_image_url = substr(file_create_url(image_style_url('medium', $node->field_my_app_picture[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
            }else{

               $_i = (array)getDefualtPictureProfileMyApplication();
               $application_image_url = substr(file_create_url(image_style_url('medium', $_i['uri'])), strlen($GLOBALS['base_url']));
            }
            

            $friend_profile = profile2_by_uid_load($item_center_chat_friend_id, 'main');

            $friend_name = $friend_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

            $friend_image_url = '';
            if (!empty($friend_profile->field_profile_image[LANGUAGE_NONE])) {
              $friend_image_url = substr(file_create_url(image_style_url('medium', $friend_profile->field_profile_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
            }


            $conversations[$item_center_chat_chat_id] = onLoadConversations($item_center_chat_chat_id);

            $center_chats[$v_center_chat['value']] = array( 'app_id'          =>$item_center_chat_app_id,
                                                            'chat_id'         =>$item_center_chat_chat_id,
                                                            'name'            =>$application_name,
                                                            'image_url'       =>$application_image_url,
                                                            'owner_id'        =>$item_center_chat_owner_id,

                                                            'friend_id'       =>$item_center_chat_friend_id,
                                                            'friend_name'     =>$friend_name,
                                                            'friend_image_url'=>$friend_image_url
                                                            );
          }
        }
        ////////////////////// profiles //////////////////////////////


        ////////////////////// my_applications //////////////////////////////
        $my_applications_query  = new EntityFieldQuery;
        $my_applications_output = $my_applications_query->entityCondition('entity_type', 'node')
                       ->entityCondition('bundle', "application")
                       ->propertyCondition('uid', array($uid))
                       ->execute();

        $my_applications = array();
        if (!empty($my_applications_output['node'])) {
          $my_applications_nids = array_keys($my_applications_output['node']);
          foreach ($my_applications_nids as $k => $my_applications_nid) {
            $node = node_load($my_applications_nid);
            // $node_wrapper = entity_metadata_wrapper('node', $node);
            // $node_wrapper->field_key_token_notification->set($token);
            // $node_wrapper->save();

            $my_app_owner_id    = $uid;
            $my_app_name = $node->title;//$node->field_my_app_name[LANGUAGE_NONE][0]['value'];

            // image_url
            $my_app_image_url = "";
            if(isset($node->field_my_app_picture[LANGUAGE_NONE])){
              $my_app_image_url = substr(file_create_url(image_style_url('medium', $node->field_my_app_picture[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
            }else{
              $_i = (array)getDefualtPictureProfileMyApplication();
              $my_app_image_url = substr(file_create_url(image_style_url('medium', $_i['uri'])), strlen($GLOBALS['base_url']));
            }

            // category
            $my_app_category    = $node->field_my_app_category[LANGUAGE_NONE][0]['tid'];
            $my_app_subcategoty = $node->field_my_app_subcategoty[LANGUAGE_NONE][0]['tid'];

            // Emails
            $my_app_emails    = array();
            if(isset($node->field_my_app_multi_email[LANGUAGE_NONE])){
              foreach ($node->field_my_app_multi_email[LANGUAGE_NONE] as $k_my_app_email => $v_my_app_email) {
                  $data_item_my_app_email = field_collection_item_load($v_my_app_email['value']);

                  $my_app_emails_object_id = $data_item_my_app_email->field_object_id[LANGUAGE_NONE][0]['value'];
                  $my_app_emails_item_id   = $data_item_my_app_email->field_item_id[LANGUAGE_NONE][0]['value'];
                  $my_app_emails_name      = $data_item_my_app_email->field_email_text[LANGUAGE_NONE][0]['value'];
                  $my_app_emails_enabled   = $data_item_my_app_email->field_enable[LANGUAGE_NONE][0]['value'];

                  $my_app_emails[$my_app_emails_object_id] = array('item_id'=>$my_app_emails_item_id,
                                                                   'name'   =>$my_app_emails_name,
                                                                   'enabled'=>$my_app_emails_enabled);
              }
            }

            // Phones
            $my_app_phones    = array();
            if(isset($node->field_my_app_multi_phone[LANGUAGE_NONE])){
              foreach ($node->field_my_app_multi_phone[LANGUAGE_NONE] as $k_my_app_phone => $v_my_app_phone) {
                  $data_item_my_app_phone = field_collection_item_load($v_my_app_phone['value']);

                  $my_app_phones_object_id = $data_item_my_app_phone->field_object_id[LANGUAGE_NONE][0]['value'];
                  $my_app_phones_item_id   = $data_item_my_app_phone->field_item_id[LANGUAGE_NONE][0]['value'];
                  $my_app_phones_name      = $data_item_my_app_phone->field_phone_number[LANGUAGE_NONE][0]['value'];
                  $my_app_phones_enabled   = $data_item_my_app_phone->field_enable[LANGUAGE_NONE][0]['value'];

                  $my_app_phones[$my_app_emails_object_id] = array('item_id'=>$my_app_phones_item_id,
                                                                   'name'   =>$my_app_phones_name,
                                                                   'enabled'=>$my_app_phones_enabled);
              }
            }

            // My Post 
            $my_app_posts = array();
            if(isset($node->field_my_app_update[LANGUAGE_NONE])){
              foreach ($node->field_my_app_update[LANGUAGE_NONE] as $k_my_app_update => $v_my_app_update) {
                  $data_item_my_app_update = field_collection_item_load($v_my_app_update['value']);

                  $my_app_update_message = $data_item_my_app_update->field_my_app_message_update[LANGUAGE_NONE][0]['value'];
               
                  $my_app_update_images = array();
                  if(isset($data_item_my_app_update->field_multi_image[LANGUAGE_NONE])){
                    foreach ($data_item_my_app_update->field_multi_image[LANGUAGE_NONE] as $k_multi_image => $v_multi_image) {
                      $data_item_multi_image= field_collection_item_load($v_multi_image['value']);

                      $multi_image_image_url = "";
                      if(isset($data_item_multi_image->field_image[LANGUAGE_NONE])){

                        $uri = $data_item_multi_image->field_image[LANGUAGE_NONE][0]['uri'];

                        $thumbnail_uri  = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
                        $original_uri   = substr(file_create_url($uri), strlen($GLOBALS['base_url']));
                        // original_uri

                        $my_app_update_images[$v_multi_image['value']] = array("original_uri"=>$original_uri, "thumbnail_uri"=>$thumbnail_uri);
                      }
                    }
                  }

                  $my_app_likes = array();
                  if(isset($data_item_my_app_update->field_my_app_post_like[LANGUAGE_NONE])){
                    foreach ($data_item_my_app_update->field_my_app_post_like[LANGUAGE_NONE] as $k_post_like => $v_post_like) {
                      $data_item_post_like = field_collection_item_load($v_post_like['value']);

                      $friend_id = $data_item_post_like->field_friend_uid[LANGUAGE_NONE][0]['value'];
                      $object_id = $data_item_post_like->field_object_id[LANGUAGE_NONE][0]['value'];
                      $status    = $data_item_post_like->field_status_following[LANGUAGE_NONE][0]['value'];

                      $my_app_likes[$object_id] = array("status"=>$status, "uid"=>$friend_id);
                    }
                  }

                  $my_app_comments = array(); // 
                  if(isset($data_item_my_app_update->field_my_app_update_comment[LANGUAGE_NONE])){
                    foreach ($data_item_my_app_update->field_my_app_update_comment[LANGUAGE_NONE] as $k_comment => $v_comment) {
                      $data_item_comment = field_collection_item_load($v_comment['value']);

                      $comment_name = '';
                      if (isset($data_item_comment->field_friend_name[LANGUAGE_NONE])) {
                        $comment_name = $data_item_comment->field_friend_name[LANGUAGE_NONE][0]['value'];
                      }

                      $comment_text = '';
                      if (isset($data_item_comment->field_comment_message[LANGUAGE_NONE])) {
                        $comment_text = $data_item_comment->field_comment_message[LANGUAGE_NONE][0]['value'];
                      }

                      $comment_uid  = '';
                      if (isset($data_item_comment->field_friend_uid[LANGUAGE_NONE])) {
                        $comment_uid  = $data_item_comment->field_friend_uid[LANGUAGE_NONE][0]['value'];
                      }
                      
                      $comment_image_original_uri = "";
                      $comment_image_thumbnail_uri = "";
                      if(isset($data_item_comment->field_image[LANGUAGE_NONE])){
                        $comment_image_original_uri = substr(file_create_url($data_item_comment->field_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));

                        $comment_image_thumbnail_uri = substr(file_create_url(image_style_url('medium', $data_item_comment->field_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
                      }

                      $comment_likes = array();
                      if(isset($data_item_comment->field_my_app_post_like[LANGUAGE_NONE])){
                        foreach ($data_item_comment->field_my_app_post_like[LANGUAGE_NONE] as $k_comment_likes => $v_comment_likes) {
                          $data_item_comment_like = field_collection_item_load($v_comment_likes['value']);

                          $comment_like_friend_uid  = $data_item_comment_like->field_friend_uid[LANGUAGE_NONE][0]['value'];
                          $comment_like_object_id   = $data_item_comment_like->field_object_id[LANGUAGE_NONE][0]['value'];
                          $comment_like_status      = $data_item_comment_like->field_status_following[LANGUAGE_NONE][0]['value'];

                          $comment_likes[$comment_like_object_id] = array('status'=>$comment_like_status, 'uid'=>$comment_like_friend_uid);
                        }
                      }

                      $reply_comments = array();
                      if(isset($data_item_comment->field_reply_comment[LANGUAGE_NONE])){
                        foreach ($data_item_comment->field_reply_comment[LANGUAGE_NONE] as $k_reply_comments => $v_reply_comments) {
                          $data_item_reply_comments = field_collection_item_load($v_reply_comments['value']);

                          $reply_comments_uid   = $data_item_reply_comments->field_friend_uid[LANGUAGE_NONE][0]['value'];
                          $reply_comments_text  = $data_item_reply_comments->field_reply_message[LANGUAGE_NONE][0]['value'];
                          $reply_comments_name  = $data_item_reply_comments->field_friend_name[LANGUAGE_NONE][0]['value'];

                          $reply_comments_original_uri = "";
                          $reply_comments_thumbnail_uri = "";
                          if(isset($data_item_reply_comments->field_image[LANGUAGE_NONE])){
                            $reply_comments_original_uri = substr(file_create_url($data_item_reply_comments->field_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));

                            $reply_comments_thumbnail_uri = substr(file_create_url(image_style_url('medium', $data_item_reply_comments->field_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
                          }

                          // 
                          $reply_likes = array();
                          if(isset($data_item_reply_comments->field_reply_like[LANGUAGE_NONE])){
                            foreach ($data_item_reply_comments->field_reply_like[LANGUAGE_NONE] as $k_reply_like => $v_reply_like) {
                              $data_item_reply_like = field_collection_item_load($v_reply_like['value']);

                              $reply_like_uid         = $data_item_reply_like->field_friend_uid[LANGUAGE_NONE][0]['value'];
                              $reply_like_object_id   = $data_item_reply_like->field_object_id[LANGUAGE_NONE][0]['value'];
                              $reply_like_status      = $data_item_reply_like->field_status_following[LANGUAGE_NONE][0]['value'];

                              $reply_likes[$reply_like_object_id] = array('status'=>$reply_like_status, 'uid'=>$reply_like_uid);

                            }
                          }
                          
                          $reply_comments[$v_reply_comments['value']] = array( "name"         => $reply_comments_name, 
                                                                              "original_uri"  => $reply_comments_original_uri,
                                                                              "text"          => $reply_comments_text,
                                                                              "thumbnail_uri" => $reply_comments_thumbnail_uri,
                                                                              "uid"           => $reply_comments_uid,
                                                                              "likes"         => (object)$reply_likes);
                        }
                      }

                      $my_app_comments[$v_comment['value']] = array("name"          =>$comment_name,
                                                                    "text"          =>$comment_text,
                                                                    "uid"           =>$comment_uid,
                                                                    "thumbnail_uri" =>$comment_image_thumbnail_uri,
                                                                    "original_uri"  =>$comment_image_original_uri,
                                                                    "likes"         =>(object)$comment_likes,
                                                                    "replys"        =>(object)$reply_comments);
                    }
                  }

                  $my_app_posts[$v_my_app_update['value']] = array("message" =>$my_app_update_message, 
                                                            "images"  =>(object)$my_app_update_images,
                                                            "likes"   =>(object)$my_app_likes,
                                                            "comments"=>(object)$my_app_comments);
              }
            }
            
            $my_app_following = array();
            if(isset($node->field_my_app_follower[LANGUAGE_NONE])){
              foreach ($node->field_my_app_follower[LANGUAGE_NONE] as $k_my_app_follower => $v_my_app_follower) {
                $data_item_my_app_follower = field_collection_item_load($v_my_app_follower['value']);
                
                $my_app_following_object_id = $data_item_my_app_follower->field_my_app_follower_object_id[LANGUAGE_NONE][0]['value'];

                $my_app_following_uid       = $data_item_my_app_follower->field_my_app_uid_follower[LANGUAGE_NONE][0]['value'];

                $my_app_following_name      = '';
                if (isset($data_item_my_app_follower->field_my_app_name[LANGUAGE_NONE])) {
                  $my_app_following_name      = $data_item_my_app_follower->field_my_app_name[LANGUAGE_NONE][0]['value'];
                }

                $my_app_following_image_url = '';
                if (isset($data_item_my_app_follower->field_path_uri[LANGUAGE_NONE])) {
                  $my_app_following_image_url = $data_item_my_app_follower->field_path_uri[LANGUAGE_NONE][0]['value'];
                }

                $my_app_following_status    = '';
                if (isset($data_item_my_app_follower->field_status_following[LANGUAGE_NONE])) {
                  $my_app_following_status    = $data_item_my_app_follower->field_status_following[LANGUAGE_NONE][0]['value'];
                }

                $my_app_following[$my_app_following_object_id] = array('uid'       =>$my_app_following_uid,
                                                                       'name'      =>$my_app_following_name,
                                                                       'image_url' =>$my_app_following_image_url,
                                                                       'status'    =>$my_app_following_status);
              }
            }

            $my_applications[$my_applications_nid] = array("name"       => $my_app_name,
                                           "image_url"  => $my_app_image_url,
                                           "owner_id"   => $my_app_owner_id,
                                           "category"   => $my_app_category,
                                           "subcategory"=> $my_app_subcategoty,
                                           'mails'      => (object)$my_app_emails,
                                           'phones'     => (object)$my_app_phones,
                                           "posts"      => (object)$my_app_posts,
                                           'follow'     => (object)$my_app_following);
          }
        }

        $profiles = array( "name"           => $profile_name,
                           "status_message" => $profile_status_message,
                           "url_my_qrcode"  => $profile_url_my_qrcode,
                           "sound_call_waiting" => (object)$sound_call_waitings,
                           "mails"          => (object)$emails,
                           "phones"         => (object)$phones,
                           "my_id"          => (object)$my_id,
                           "image_url"      => $profile_image_url,
                           "bg_url"         => $profile_bg_url,
                           "badges"         => (object)$badges,
                           "device_access"  => (object)$device_access,
                           "line_id"        => $profile_line_id);


        ////////////////////////////////////// slide_store //////////////////////////////////////

        $slide_store_query  = new EntityFieldQuery();
        $slide_store_output = $slide_store_query->entityCondition('entity_type', 'node')
                                               ->entityCondition('bundle', 'slide_store')
                                               ->propertyCondition('status', 1)
                                               ->execute();

        $slide_stores = array();
        if (!empty($slide_store_output['node'])) {
          $slide_store_output_nids = array_keys($slide_store_output['node']);
          foreach ($slide_store_output_nids as $slide_store_output_k => $slide_store_output_nid) {
            $slide_store_output_node = node_load($slide_store_output_nid);

            $slide_store_output_link_url = "";
            if (isset($slide_store_output_node->field_slide_url[LANGUAGE_NONE])) {
              $slide_store_output_link_url = $slide_store_output_node->field_slide_url[LANGUAGE_NONE][0]['value'];
            }

            $slide_stores[$slide_store_output_nid] = array("name"       => $slide_store_output_node->title,
                                                           "url_image"  => substr(file_create_url(image_style_url('medium', $slide_store_output_node->field_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url'])),
                                                           "link_url"   => $slide_store_output_link_url);

          }
        }

        ///////////////////////////////////// slide_store //////////////////////////////////////

        ///////////////////////////////////// center //////////////////////////////////////
        $center_query  = new EntityFieldQuery();
        $center_result = $center_query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'application')
          ->fieldCondition('field_on_store', 'value', 1, '=')
          ->propertyCondition('status', 1)
          ->execute();

        $centers = array();
        if (!empty($center_result['node'])) {
          $center_nids = array_keys($center_result['node']);
  
          
          foreach ($center_nids as $center_key => $center_nid) {
            $center_node = node_load($center_nid);

            // $centers[$center_nid] = $center_node;

            
            $center_uri = "";
            if (isset($center_node->field_my_app_picture[LANGUAGE_NONE])) {
              $center_uri = $center_node->field_my_app_picture[LANGUAGE_NONE][0]['uri'];
            }else{
              $_i = (array)getDefualtPictureProfileMyApplication();

              $center_uri = $_i['uri'];
            }

            $center_image_url = substr(file_create_url(image_style_url('medium', $center_uri)), strlen($GLOBALS['base_url']));
       
            $center_category  = $center_node->field_my_app_category[LANGUAGE_NONE][0]['tid'];

            $center_profile = profile2_by_uid_load($center_node->uid, 'main');

            $center_app_name  = $center_node->title;

            $centers[$center_nid] = array(
                          "category"  => $center_category,
                          "image_url" => $center_image_url,
                          "name"      => $center_app_name,
                          "owner_id"  => $center_node->uid,
                          "owner_name"  => $center_profile->field_profile_name[LANGUAGE_NONE][0]['value'],
                          );
                          
          }
        }

        ///////////////////////////////////// center //////////////////////////////////////

        $result['result'] = TRUE;
        $result['data']   = array('profiles'       =>(object)$profiles,
                                'my_applications'=>(object)$my_applications,
                                'friends'        =>(object)$friends,
                                'groups'         =>(object)$groups,
                                'classs'         =>(object)$classs,
                                'followings'     =>(object)$followings,
                                'center_chats'   =>(object)$center_chats,
                                'slide_stores'   =>(object)$slide_stores,
                                'centers'        =>(object)$centers,
                                'conversations' =>(object)$conversations);

      }
      break;

    case 'profile':{
        $profile  = profile2_by_uid_load($uid, 'main');
        ////////////////////// profiles //////////////////////////////
        $profile_name           = $profile->field_profile_name[LANGUAGE_NONE][0]['value'];

        if (isset($profile->field_profile_display_name[LANGUAGE_NONE])) {
          $profile_name = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
        }

        $profile_status_message = "";
        if(isset($profile->field_profile_status_message[LANGUAGE_NONE])){
          $profile_status_message = $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'];
        }

        $profile_url_my_qrcode = "";
        if (isset($profile->field_profile_my_qrcode[LANGUAGE_NONE])) {
          $profile_url_my_qrcode  = substr(file_create_url(image_style_url('medium', $profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
        }
        
        // badges
        $badges = array();
        if(isset($profile->field_profile_badges[LANGUAGE_NONE])){
          foreach ($profile->field_profile_badges[LANGUAGE_NONE] as $k_badges => $v_badges) {
            $item_badges = field_collection_item_load($v_badges['value']);

            $data_badge_contact  = $item_badges->field_profile_badge_contact[LANGUAGE_NONE][0]['value'];
            $data_badge_recent   = $item_badges->field_profile_badge_recent[LANGUAGE_NONE][0]['value'];
            $data_badge_center   = $item_badges->field_profile_badge_center[LANGUAGE_NONE][0]['value'];
            $data_badge_setting  = $item_badges->field_profile_badge_setting[LANGUAGE_NONE][0]['value'];

            $badges =array("contact" => $data_badge_contact,
                           "center"  => $data_badge_recent, 
                           "recent"  => $data_badge_center,
                           "setting" => $data_badge_setting);
          }
        }else{
          $badges =array( "contact" => '0',
                          "center"  => '0', 
                          "recent"  => '0',
                          "setting" => '0');
        }
        
        $profile_line_id = "";
        if(isset($profile->field_profile_line_id[LANGUAGE_NONE])){
          $profile_line_id = $profile->field_profile_line_id[LANGUAGE_NONE][0]['value'];
        }

        // เสียงรอสาย
        $sound_call_waitings = array();
        if(isset($profile->field_sound_call_waiting[LANGUAGE_NONE])){
          foreach ($profile->field_sound_call_waiting[LANGUAGE_NONE] as $k_call_waiting => $v_call_waiting) {
            $data_call_waiting = field_collection_item_load($v_call_waiting['value']);

           
            $data_call_waiting_item_id  = $data_call_waiting->field_sound_call_waiting_item_id[LANGUAGE_NONE][0]['value'];
            $data_call_waiting_title    = $data_call_waiting->field_sound_call_waiting_title[LANGUAGE_NONE][0]['value'];
            $data_call_waiting_uri      = $data_call_waiting->field_sound_call_waiting_uri[LANGUAGE_NONE][0]['value'];

            $sound_call_waitings[$v_call_waiting['value']] =array("nid"       => $data_call_waiting_item_id, 
                                                                 "sound_url" => $data_call_waiting_uri,
                                                                 "title"     => $data_call_waiting_title);
          }
        }

        // Phones
        $phones = array();
        if(isset($profile->field_profile_multi_phone[LANGUAGE_NONE])){
          foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $k_phone => $v_phone) {
              $data_item_phone = field_collection_item_load($v_phone['value']);
              
              $data_item_phone_phone   =  $data_item_phone->field_phone_number[LANGUAGE_NONE][0]['value'];
              $data_item_phone_enabled =  $data_item_phone->field_enable[LANGUAGE_NONE][0]['value'];
              $phones[$v_phone['value']] = array('name'=>$data_item_phone_phone, 'enabled'=>$data_item_phone_enabled);
          }
        }

        // Emails
        $emails = array();
        if(isset($profile->field_profile_multi_email[LANGUAGE_NONE])){
          foreach ($profile->field_profile_multi_email[LANGUAGE_NONE] as $k_email => $v_email) {
              $data_item_email = field_collection_item_load($v_email['value']);
              
              $data_item_email_email   =  '';
              if (isset($data_item_email->field_email_text[LANGUAGE_NONE])) {
                $data_item_email_email   =  $data_item_email->field_email_text[LANGUAGE_NONE][0]['value'];
              }

              $data_item_email_enabled =  '0';
              if (isset($data_item_email->field_enable[LANGUAGE_NONE])) {
                $data_item_email_enabled =  $data_item_email->field_enable[LANGUAGE_NONE][0]['value'];
              }

              $emails[$v_email['value']] = array('name'=>$data_item_email_email, 'enabled'=>$data_item_email_enabled);
          }
        }

        // my_id
        $my_id = array();
        if(isset($profile->field_profile_my_id[LANGUAGE_NONE])){
          foreach ($profile->field_profile_my_id[LANGUAGE_NONE] as $k_my_id => $v_my_id) {
              $data_my_id = field_collection_item_load($v_my_id['value']);
              
              $my_id_value   =  $data_my_id->field_profile_my_id_value[LANGUAGE_NONE][0]['value'];
              $my_id_is_edit =  $data_my_id->field_profile_my_id_is_edit[LANGUAGE_NONE][0]['value'];
              $my_id[$v_my_id['value']] = array('enabled'=>'1', 'is_edit'=>$my_id_is_edit, 'value'=>$my_id_value);
          }
        }

        // image_url
        $profile_image_url;
        if(isset($profile->field_profile_image[LANGUAGE_NONE])){
          $profile_image_url = substr(file_create_url(image_style_url('medium', $profile->field_profile_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
        }else{
          $profile_image_url =  getDefualtProfilePicture();
        }

        // bg_url
        $profile_bg_url;
        if(isset($profile->field_my_app_bg[LANGUAGE_NONE])){
          $profile_bg_url = substr(file_create_url(image_style_url('medium', $profile->field_my_app_bg[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
        }else{
          $profile_bg_url = getDefualtBackgroundCardPicture();
        }

        // device_access
        $device_access = array();
        if(isset($profile->field_device_access[LANGUAGE_NONE])){
          foreach ($profile->field_device_access[LANGUAGE_NONE] as $k_device_access => $v_device_access) {
              $data_item_device_access = field_collection_item_load($v_device_access['value']);

              $data_item_device_access_build       = $data_item_device_access->field_device_access_build[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_bundle_identifier = $data_item_device_access->field_bundle_identifier[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_device_name = $data_item_device_access->field_device_name[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_is_login    = $data_item_device_access->field_is_login[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_model_number= $data_item_device_access->field_model_number[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_online      = $data_item_device_access->field_online[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_platform    = $data_item_device_access->field_platform[LANGUAGE_NONE][0]['value'];

              $data_item_device_access_token_notification = '';
              if (isset($data_item_device_access->field_key_token_notification[LANGUAGE_NONE])) {
                $data_item_device_access_token_notification = $data_item_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];
              }
              
              $data_item_device_access_token_pushkit = '';
              if (isset($data_item_device_access->field_pushkit_token[LANGUAGE_NONE])) {
                $data_item_device_access_token_pushkit = $data_item_device_access->field_pushkit_token[LANGUAGE_NONE][0]['value'];
              }
              
              $data_item_device_access_udid        = $data_item_device_access->field_udid[LANGUAGE_NONE][0]['value'];
              $data_item_device_access_version     = $data_item_device_access->field_device_access_version[LANGUAGE_NONE][0]['value'];

              $device_access[$v_device_access['value']] = array('build'      => $data_item_device_access_build, 
                                                                'bundle_identifier' => $data_item_device_access_bundle_identifier,
                                                                'device_name'=>$data_item_device_access_device_name,
                                                                'is_login'   =>$data_item_device_access_is_login,
                                                                'model_number'=> $data_item_device_access_model_number,
                                                                'online'     =>$data_item_device_access_online,
                                                                'platform'   =>$data_item_device_access_platform,
                                                                'token_notification'     =>$data_item_device_access_token_notification,
                                                                'token_pushkit'     =>$data_item_device_access_token_pushkit,
                                                                'udid'        =>$data_item_device_access_udid,
                                                                'version'     =>$data_item_device_access_version);
          }
        }

        $profiles = array( "name"           => $profile_name,
                           "status_message" => $profile_status_message,
                           "url_my_qrcode"  => $profile_url_my_qrcode,
                           "sound_call_waiting" => (object)$sound_call_waitings,
                           "mails"          => (object)$emails,
                           "phones"         => (object)$phones,
                           "my_id"          => (object)$my_id,
                           "image_url"      => $profile_image_url,
                           "bg_url"         => $profile_bg_url,
                           "badges"         => (object)$badges,
                           "device_access"  => (object)$device_access,
                           "line_id"        => $profile_line_id);

        $result['result'] = TRUE;
        $result['data']   = array('profiles'  =>(object)$profiles);
      }
      break;
    
    default:
      # code...
      break;
  }

  return $result;
}

function onLoadConversations($object_id){
  $conversations_query  = new EntityFieldQuery();
  $conversations_result = $conversations_query->entityCondition('entity_type', 'node')
                          ->entityCondition('bundle', 'conversation')
                          ->propertyCondition('title', $object_id, '=')
                          ->propertyCondition('status', 1)
                          ->execute();

  $conversations = array();
  if (!empty($conversations_result['node'])) {
    $conversations_nids = array_keys($conversations_result['node']);

    foreach ($conversations_nids as $conversations_key => $conversations_nid) {
      $conversations_node = node_load($conversations_nid);

      $conversations = array('messages'=>$conversations_node->field_conversation_messages[LANGUAGE_NONE][0]['value']);           
    }
  }

  return (object)$conversations;
}

function annmousu_register(){

  $result = array();

  if(empty($_POST['email']) || empty($_POST['UDID'])) {
    $result['result']   = FALSE;
    $result['function'] = "Email | UDID empty.";
    return $result;
  }

  // เช็กว่ามี  user ที่มี email แล้วหรือไม
  /*
  กรณีที่ email ยังไม่ถูกนำไปใช้งานจะสามารถ register ได้ตลอด โดยระบบจะ update เฉพาะ verify key เท่านั้น
  */
  if (user_load_by_mail($_POST['email']) == "") {

    $content_type  = 'annmousu_verify_token';
    try {

      $output = db_select('node', 'n')
          ->fields('n', array('nid', 'title'))
          ->condition('title', generate_name_annmousu($_POST['UDID']), '=')
          ->execute()
          ->fetchCol();
    
      $verify_key = generateKey();

      if (empty($output)) {
        # code...
        $result['status'] = 'add';

        $node = new stdClass();
        $node->title = generate_name_annmousu($_POST['UDID']);
        $node->type  = $content_type;
        $node->body[LANGUAGE_NONE][0]['value']  = "";
        $node->field_verify_token[LANGUAGE_NONE][0]['value']  = $_POST['UDID'];
        $node->field_verify_key[LANGUAGE_NONE][0]['value']    = $verify_key;
        
        $node->language = LANGUAGE_NONE;
        $node->revision = 0;

        $node = node_submit($node);
        node_save($node);
      }else{        
        $result['status'] = 'update';

        // การ update verify key
        $node = node_load($output[0]);
   
        $node_wrapper = entity_metadata_wrapper('node', $node);
        $node_wrapper->field_verify_key->set($verify_key);


        $node_wrapper->save();

      }
    } catch (Exception $e) {
        $result['result']   = FALSE;
        $result['message']   = $e->getMessage();
        return $result;
    }

    idna_mail_send("contact_message", $_POST['email'], '', $verify_key);

    $result['result']   = TRUE;
  }else{
    $result['result']   = FALSE;
    $result['message']  = "Email duplicate.";
  }

  return $result;
}

function annmousu_verify(){
  $result = array();

  if(empty($_POST['UDID']) || empty($_POST['key']) || empty($_POST['email'])) {
    $result['result']   = FALSE;
    $result['function'] = "UDID | KEY | email empty.";
    return $result;
  }

  try {

    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_verify_key', 'k', 'k.entity_id = n.nid');
    $query->leftJoin('field_data_field_verify_token', 't', 't.entity_id = n.nid');

    $query->fields('n', array('nid'));
    $query->fields('k', array('field_verify_key_value'));
    $query->fields('t', array('field_verify_token_value'));
    $query->condition('n.title', generate_name_annmousu($_POST['UDID']), '=');
    $query->condition('k.field_verify_key_value', $_POST['key'], '=');

    $output = $query->execute();
 
    if ($output->rowCount() > 0) {
      # code...
      while($row = $output->fetchAssoc())
      {
        // $result['data']= $row['nid'];


        // #1
        // load user object ขึ้นมาเพือแก้ไข mail
        $existingUser = user_load_by_mail($_POST['UDID'] . '@annmousu');
        // update some user property

        // กรณี user ยังไม่ได้ตั้งชือใหม่ เราจะกำหนดให้ชือเท่ากัน email
        if (strcasecmp($existingUser->name, $_POST['UDID'] . '@annmousu') != 0) { // 
          # code...
          $existingUser->name = $_POST['email'];
        }

        $existingUser->mail = $_POST['email'];
        $existingUser->pass = $_POST['key'];

        // save existing user
        user_save((object) array('uid' => $existingUser->uid), (array) $existingUser);

        // #2
        // เราต้องลบ ข้อมูล verify token เพราะเราได้ verify ได้ถุกต้องแล้ว
        node_delete($row['nid']);

        // #3
        /*
        // เราต้องไป update ที่ firebase
        $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
        // update email
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $existingUser->uid . "/data/profile/", array("mail"   =>$_POST['email']));
        */



        // <!---------- update email ที่ drupal 

        // #4
        // เป้นการโหลดข้อมูลของ  user uid เพอื่จะ แก้ไข สถานะ เพือน (field_heart_friend_status = 1)
        $user_fields = user_load($existingUser->uid);

        if (!$user_fields->uid) {
          // User is not logged in
          //services_error(t('User is not logged in.'), 406);

          $result['result'] = FALSE;
          $result['output'] = "uid not match is user";

          return $result;
        }

        $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

        // Load Profile ขึ้นมาเพือจะทำการแก้ไข
        $profile =  profile2_load($profile2_load_by_user['main']->pid);

        foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
          // Build array of field collection values.

          $data = field_collection_item_load($value['value']);

          // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

          // if($value['value'] == 16){
          /*if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
            $wrapper = entity_metadata_wrapper('field_collection_item', $data);
            
            // $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

            // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

            //Update value
            $wrapper->field_heart_friend_status->set('2');
            $wrapper->save();
            */


          /*
            // Firebase increment new HW Login
            $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

            $data_update = array(
              "mail"   =>$_POST['email'],
              "update"  => time()
            );

            $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $data->field_friend_uid[LANGUAGE_NONE][0]['value'] ."/friends/" . $existingUser->uid . "/", $data_update);
            */
          }

        // }

        // ------------> update email ที่ drupal


        $result['result']   = TRUE;
        break;
      }
    }else{
      $result['result']   = FALSE;
      $result['message'] = "Code verify no match.";
    }
  } catch (Exception $e) {
    $result['result']   = FALSE;
    $result['message']   = $e->getMessage();
    return $result;
  }
  return $result;
}

function twilio_voice_accessToken(){
  // watchdog(TAG, 'twilio_voice_accessToken: %param', array('%param'=>serialize($_REQUEST)), WATCHDOG_INFO);

  $result = array();

  // Use identity and room from query string if provided
  /*
  $identity = isset($_GET["identity"]) ? $_GET["identity"] : NULL;
  if (!isset($identity) || empty($identity)) {
    $identity = isset($_POST["identity"]) ? $_POST["identity"] : "alice";
  }
  */

/*
  if (!check_header()) {
    # code...
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }
  */

  $param = json_decode(file_get_contents('php://input'), true);

  // video
  if (empty($param['identity'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : twilio_voice_accessToken, parameter";
    return $result;
  }

  $identity = $param['identity'];

  /*

    define("TWILIO_ACCOUNT_SID", "AC94429faf5d0c017fdde2eb9347c699e6");
    define("TWILIO_API_KEY", "SK5b11e67487ccf92915a1ede27b640dfa");
    define("TWILIO_API_KEY_SECRET", "QuGFTh7pvRKUV9VeFwC6FmIoGjXiFwcC");
    define("TWILIO_PUSH_CREDENTIAL_SID", "CR6279daf7d3f608853b78f863fd7dc995");
    define("TWILIO_APP_SID", "AP30c22ca482e1db49ceac6cd2ff19c37c");
  */


  // Create access token, which we will serialize and send to the client
  $token = new AccessToken(TWILIO_ACCOUNT_SID, 
                           TWILIO_API_KEY, 
                           TWILIO_API_KEY_SECRET, 
                           3600 * 3, 
                           $identity
  );

  // Grant access to Video
  $grant = new VoiceGrant();
  $grant->setOutgoingApplicationSid(TWILIO_APP_SID);
  $grant->setPushCredentialSid(TWILIO_PUSH_CREDENTIAL_SID);
  $token->addGrant($grant);

  // echo $token->toJWT();

  $result['result'] = TRUE;
  $result['token']  = $token->toJWT();
  $result['$TWILIO_ACCOUNT_SID'] = serialize(TWILIO_ACCOUNT_SID);
  $result['$TWILIO_API_KEY'] = serialize(TWILIO_API_KEY);
  $result['$TWILIO_API_KEY_SECRET'] = serialize(TWILIO_API_KEY_SECRET);
  $result['$TWILIO_APP_SID'] = serialize(TWILIO_APP_SID);
  $result['$TWILIO_PUSH_CREDENTIAL_SID'] = serialize(TWILIO_PUSH_CREDENTIAL_SID);
  return $result;
}

function ___twilio_voice($headers, $request, $room_name){
  global $firebase;

  $uid        = $request['uid']; 
  $uuid       = $request['uuid'];
  $friend_id  = $request['friend_id'];
  $has_video  = $request['has_video'];

  
  $profile    = profile2_by_uid_load($uid, 'main');
  $name       = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

  $members    = array();
  // $room_name  = generateRandomString();

  //////////////////////// 1 /////////////////////////////
  $outgoing_call = array();
  $outgoing_call['field_name'] = 'field_twilio_outgoing_call'; 

  $outgoing_call['field_twilio_room_type'][LANGUAGE_NONE][0]['value']     = 'private';
  $outgoing_call['field_twilio_room_name'][LANGUAGE_NONE][0]['value']     = $room_name;
  $outgoing_call['field_twilio_room_uuid'][LANGUAGE_NONE][0]['value']     = $uuid;
  $outgoing_call['field_twilio_ic_has_video'][LANGUAGE_NONE][0]['value']  = $has_video;
  $outgoing_call['field_twilio_room_status'][LANGUAGE_NONE][0]['value']   = 'init';

  $outgoing_call_field_entity = entity_create('field_collection_item', $outgoing_call);
  $outgoing_call_field_entity->setHostEntity('profile2', $profile);
  $outgoing_call_field_entity->save();

  $outgoing_call_item_id = $outgoing_call_field_entity->item_id;

  // เราจะ insert members uid{caller} ลงไปคนแรก
  // $data = field_collection_item_load($field_entity->item_id);
  $value_video_member_1 = array();
  $value_video_member_1['field_name'] = 'field_twilio_video_members'; 
  $value_video_member_1['field_twv_members_friend_id'][LANGUAGE_NONE][0]['value'] = $uid;
  $value_video_member_1['field_twv_members_type'][LANGUAGE_NONE][0]['value']      = "caller";
  $value_video_member_1['field_twv_members_uid_invite'][LANGUAGE_NONE][0]['value']= $uid;
  // $value_video_member_1['field_twilio_room_name'][LANGUAGE_NONE][0]['value']      = $room_name;
  $value_video_member_1['field_twilio_ic_device_id'][LANGUAGE_NONE][0]['value']   = $headers['udid'];
  $value_video_member_1['field_twv_members_status'][LANGUAGE_NONE][0]['value']    = 'init';
  $value_video_member_1['field_twilio_room_statuscallback'][LANGUAGE_NONE][0]['value']    = 'init'; 

  $value_video_member_1_field_entity = entity_create('field_collection_item', $value_video_member_1);
  $value_video_member_1_field_entity->setHostEntity("field_twilio_video_members", field_collection_item_load($outgoing_call_item_id));
  $value_video_member_1_field_entity->save(); 

  $members[$value_video_member_1_field_entity->item_id] = array(
                  "friend_id"       =>$uid,
                  "type"            =>"caller",
                  "uid_invite"      =>$uid,
                  "status_callback" =>'init',
                  "device_id"       =>$headers['udid']
                );

  $value_video_member_2 = array();
  $value_video_member_2['field_name'] = 'field_twilio_video_members'; 
  $value_video_member_2['field_twv_members_friend_id'][LANGUAGE_NONE][0]['value'] = $friend_id;
  $value_video_member_2['field_twv_members_type'][LANGUAGE_NONE][0]['value']      = "participant";
  $value_video_member_2['field_twv_members_uid_invite'][LANGUAGE_NONE][0]['value']= $uid;
  // $value_video_member_2['field_twilio_room_name'][LANGUAGE_NONE][0]['value']      = $room_name;
  $value_video_member_2['field_twv_members_status'][LANGUAGE_NONE][0]['value']    = 'init';
  $value_video_member_2['field_twilio_room_statuscallback'][LANGUAGE_NONE][0]['value']    = 'init'; 

  $value_video_member_2_field_entity = entity_create('field_collection_item', $value_video_member_2);
  $value_video_member_2_field_entity->setHostEntity("field_twilio_video_members", field_collection_item_load($outgoing_call_item_id));
  $value_video_member_2_field_entity->save(); 

  $members[$value_video_member_2_field_entity->item_id] = array(
                  "friend_id"         =>$friend_id,
                  "type"              =>"participant",
                  "uid_invite"        =>$uid,
                  "status_callback"   =>'init',
                  // "room_name" =>$room_name
                );


  /////////////////////////////// Update Data to Firebase ///////////////////////////////
  $value = array(
              "room_name"             => $room_name,
              "type"                  => 'private',
              "has_video"             => $has_video,
              "room_status"           => 'init',
              "outgoing_call_item_id" => $outgoing_call_item_id,
              "members"               => $members
            );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid .'/outgoing_call/'. $uuid, $value);
  /////////////////////////////// Update Data to Firebase ///////////////////////////////
}

function twilio_voice_access_token(){
  $result = array();
  
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['uuid']) || empty($_REQUEST['friend_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : twilio_voice_access_token, parameter";
    return $result;
  }

  $time_start = microtime(true);

  $uid        = $_REQUEST['uid']; 
  $room_name  = generateRandomString(20);

  background_process_start('___twilio_voice', nginx_getallheaders(), $_REQUEST, $room_name);

  $time_end       = microtime(true);
  $execution_time = number_format(($time_end - $time_start), 2);
  $result['execution_time']  = $execution_time;
  
  $result['result']     = TRUE;
  $result['room_name']  = $room_name;
  $result['token']      = create_access_token($uid, $room_name);
  return $result;
}

/*
  function ทีใช้สำหรับสร้าง token และมีการส่ง voip ไปที่ client ด้วย
*/

function twilio_room_generation(){
  $result = array();
  
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uuid']) || empty($_REQUEST['type']) || empty($_REQUEST['uid'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : twilio_room_generation, parameter";
    return $result;
  }

  global $firebase;

  /*
  เราต้องแยกว่าเป้นการโทรออก หรือเป็นการ join ของกลุ่ม
  function 
    1. สร้างขึ้นมาใหม่ แสดงว่าเราต้องมีการส่ง voip ไปแจ้งคนที่เราต้องโทรหาด้วย
    2. join เป้นการ join เข้าเท่านั้น
  */

  $uid        = $_REQUEST['uid']; 
  $uuid       = $_REQUEST['uuid'];
  $type       = $_REQUEST['type'];
  $has_video  = $_REQUEST['has_video']; // 0 : audio | 1 : video

  $profile    = profile2_by_uid_load($uid, 'main');
  $name       = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

  // $name = $_REQUEST['name'];  // ชือคนโทรออก
  // $room = $_REQUEST['room'];  // ชือห้องที่เราต้องการสร้าง

  $members = array();

  $room_name = generateRandomString();

  //////////////////////// 1 /////////////////////////////
  $outgoing_call = array();
  $outgoing_call['field_name'] = 'field_twilio_outgoing_call'; 

  $outgoing_call['field_twilio_room_type'][LANGUAGE_NONE][0]['value'] = $type;
  $outgoing_call['field_twilio_room_name'][LANGUAGE_NONE][0]['value'] = $room_name;
  $outgoing_call['field_twilio_room_uuid'][LANGUAGE_NONE][0]['value'] = $uuid;

  $field_entity = entity_create('field_collection_item', $outgoing_call);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();

  $item_id = $field_entity->item_id;

  // เราจะ insert members uid{caller} ลงไปคนแรก
  // $data = field_collection_item_load($field_entity->item_id);
  $value_video_member = array();
  $value_video_member['field_name'] = 'field_twilio_video_members'; 
  $value_video_member['field_twv_members_friend_id'][LANGUAGE_NONE][0]['value'] = $uid;
  $value_video_member['field_twv_members_type'][LANGUAGE_NONE][0]['value']      = "caller";
  $value_video_member['field_twv_members_uid_invite'][LANGUAGE_NONE][0]['value']= $uid;
  $value_video_member['field_twilio_room_name'][LANGUAGE_NONE][0]['value']      = $room_name;
  $value_video_member['field_twilio_ic_device_id'][LANGUAGE_NONE][0]['value']   = nginx_getallheaders()['udid'];
  $value_video_member['field_twv_members_status'][LANGUAGE_NONE][0]['value']    = 'invite';

  $field_entity = entity_create('field_collection_item', $value_video_member);
  $field_entity->setHostEntity("field_twilio_video_members", field_collection_item_load($item_id));
  $field_entity->save(); 


  $members[$field_entity->item_id] = array(
                  "friend_id" =>$uid,
                  "type"      =>"caller",
                  "uid_invite"=>$uid,
                  "room_name" =>$room_name,
                  "status"    =>'invite',
                  "device_id" =>nginx_getallheaders()['udid']
                );


  //////////////////////// 1 /////////////////////////////

  $friend_ids = $_REQUEST['friend_ids']; // id ของเพือน(โดยจะส่งมาเป้น array)ที่เราต้องการโทรหา 

  /////////////////////////////// Send Voip to Friend //////////////////////////////////
  // เป็นการ หา pushkit token ของแต่ละ user โดยที่แต่ละ user อาจมีหลาย device ด้วย 
  // โดยมีเงือนไข device นั้น field field_is_login = 1 ถึงเราจะส่งเท่านั้น


  // flag เช็กว่า friend_id นี้ต้องมี pushkit_token, is_login == 1 ถึงจะเพิ่ม members
  $flag = false;
  foreach ($friend_ids as $key => $friend_id){

    $friend_id_token      = create_access_token($friend_id, $room_name);

    /////////
    $friend_profile = profile2_by_uid_load($friend_id, 'main');
    if(isset($friend_profile->field_device_access)){
      foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);

        if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0) {

          $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
          $action         = 'call';
          $handle         = array(
                            "uid"     => $uid, 
                            "name"    => $name, // ชือของ caller
                            "token"   => $friend_id_token,
                            "room_name"=>$room_name
                            );
          apns_voip($pushkit_token, $action, $uuid, $handle, $has_video);  
          $flag = true;
        }
      }
    }

    if ($flag) {
      $value_video_member = array();
      $value_video_member['field_name'] = 'field_twilio_video_members'; 
      $value_video_member['field_twv_members_friend_id'][LANGUAGE_NONE][0]['value'] = $friend_id;
      $value_video_member['field_twv_members_type'][LANGUAGE_NONE][0]['value']      = "participant";
      $value_video_member['field_twv_members_uid_invite'][LANGUAGE_NONE][0]['value']= $uid;
      $value_video_member['field_twilio_room_name'][LANGUAGE_NONE][0]['value']      = $room_name;
      $value_video_member['field_twv_members_status'][LANGUAGE_NONE][0]['value']    = 'invite';

      $field_entity = entity_create('field_collection_item', $value_video_member);
      $field_entity->setHostEntity("field_twilio_video_members", field_collection_item_load($item_id));
      $field_entity->save(); 

      $members[$field_entity->item_id] = array(
                  "friend_id" =>$friend_id,
                  "type"      =>"participant",
                  "uid_invite"=>$uid,
                  "status"    =>'invite',
                  "room_name" =>$room_name
                );

      // insert incoming call ให้กับ friend ที่เรา call ไป
      // $friend_profile
      $incoming_call = array();
      $incoming_call['field_name'] = 'field_twilio_incoming_call'; 

      $incoming_call['field_twilio_ic_name'][LANGUAGE_NONE][0]['value']     = $room_name;
      $incoming_call['field_twilio_ic_uid'][LANGUAGE_NONE][0]['value']      = $uid;
      $incoming_call['field_twilio_room_uuid'][LANGUAGE_NONE][0]['value']   = $uuid;
      $incoming_call['field_twilio_ic_token'][LANGUAGE_NONE][0]['value']    = $friend_id_token;
      $incoming_call['field_twilio_ic_has_video'][LANGUAGE_NONE][0]['value']= $has_video;

      $field_entity = entity_create('field_collection_item', $incoming_call);
      $field_entity->setHostEntity('profile2', $friend_profile);
      $field_entity->save();

      $value = array(
              "twilio_room_name"=> $room_name,
              "uid"             => $uid,
              "uuid"            => $uuid,
              "token"           => $friend_id_token,
              "has_video"       => $has_video
            );
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id .'/incoming_call/'. $field_entity->item_id, $value);
    }
    $flag = false;
    // กรณีเราจำเป้นต้องส่ง sms ไปยังเบอโทร friend id นี้
  }
  
  /////////////////////////////// Send Voip to Friend //////////////////////////////////

  /////////////////////////////// Update Data to Firebase ///////////////////////////////
  $value = array(
              "twilio_room_name"    => $room_name,
              "uuid"                => $uuid,
              "type"                => $type,
              "members"             => $members
            );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid .'/outgoing_call/'. $item_id, $value);
  /////////////////////////////// Update Data to Firebase ///////////////////////////////

  $result['result']     = TRUE;
  $result['room_name']  = $room_name;
  $result['token']      = create_access_token($uid, $room_name);

  return $result;
}

/*
  $name       : ชือ name 
  $room_name  : ชือ room_name
*/
function create_access_token($name, $room_name){
  // Create an Access Token
  $token = new AccessToken(
    TWILIO_ACCOUNT_SID,
    TWILIO_API_KEY,
    TWILIO_API_KEY_SECRET,
    3600 * 3, /* 3 hour(10800 seconds) */ // เราจะกำหนดให้มีอายุ 3 ชมเท่านั้น
    $name
  );

  // Grant access to Video
  $grant = new VideoGrant();
  $grant->setRoom($room_name);
  $token->addGrant($grant);

  return $token->toJWT();
}

function twilio(){
  $result = array();
  // if (!check_header()) {
  //   # code...
  //   $result['result']   = FALSE;
  //   $result['message']  = "check_header()";
  //   return $result;
  // }

  // $param = json_decode(file_get_contents('php://input'), true);

  /*
  if (empty($param['platform']) || empty($param['action']) || empty($param['uid']) || empty($param['friend_id']) || empty($param["uuid"])) {
    $result['result'] = FALSE;
    $result['message']  = "function : voip, parameter";
    
    return $result;
  }
  */

  // module_load_include('module', 'twilio', 'twilio');


  // Substitute your Twilio AccountSid and ApiKey details
  $accountSid   = 'AC94429faf5d0c017fdde2eb9347c699e6';
  $apiKeySid    = 'SKc494a853c4e4bd047f4aaa5ea28729c7';
  $apiKeySecret = '1FZNcielMkW1sv35zkUOTUX3tu1el7ZZ';

  $identity     = 'name';

  // name=iphone&room=test

  // Create an Access Token
  $token = new AccessToken(
    $accountSid,
    $apiKeySid,
    $apiKeySecret,
    3600 * 3, /* 3 hour(10800 seconds) */
    $identity
  );


  // // Grant access to Video
  $grant = new VideoGrant();
  $grant->setRoom('room');
  $token->addGrant($grant);

  // Serialize the token as a JWT
  // echo $token->toJWT();

  $result['result'] = TRUE;
  $result['token']  = $token->toJWT();;
  return $result;
}

/*
  uid   : user id ของผมส่ง
  name  : ชื่อของผู้ส่ง
  uuid  : device id เครื่องซึ่งจะไม่ซํ้ากัน
  pushkit_token : id ของ pushkit แต่เราเครื่องจะถูกส้รางเมือ install app ใหม่
  action : call, cancel

  ex. 
  $handle = array(
                  "uid"     => $uid,
                  "name"    => $name,
                  "group_id"=> $group_id
                  );

  apns_voip($pushkit_token, $action, $uuid, $friend_id_token, $handle, $has_video); 
*/
function apns_voip2(/*$uuid, */ $pushkit_token, $action, $uuid, $friend_id_token = '', $handle=array(), $has_video = '0', $sound = 'default'){

  $apnsHost = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_host');//'gateway.sandbox.push.apple.com';
  $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url']));   // dpm(dirname(__FILE__) . '/' . 'VOIP.pem');
  $apnsPort = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_port'); // 2195;


  // iphone 5s
  // $token_pkpush   = '395aa99183b9c31c2b6274dbfbbcd169c149c4f59782f4fde9b8386866ff15f5';

  // ipad
  // $token_pkpush = '7094ac021bd272647aa232eddc4c5254a4913f80a4c05b2232e4103deaaffb8c';
  $streamContext = stream_context_create();
  stream_context_set_option($streamContext, 'ssl', 'local_cert', $apnsCert);
  $apns = stream_socket_client('ssl://' . $apnsHost . ':' . $apnsPort, $error, $errorString, 2, STREAM_CLIENT_CONNECT, $streamContext);
  $payload['aps'] = array('hasVideo' => $has_video, 'sound' => $sound, 'uuid' => $uuid, 'handle'=>$handle, 'action'=>$action);

  // $payload['aps'] = array();
  $output = json_encode($payload);
  $token = pack('H*', $pushkit_token);
  $apnsMessage = chr(0) . chr(0) . chr(32) . $token . chr(0) . chr(strlen($output)) . $output;

  // $apnsMessage = chr(0) . chr(0) . chr(32) . pack('H*', str_replace(' ', '', $deviceToken)) . chr(0) . chr(strlen($payload)) . $payload;

  $result = fwrite($apns, $apnsMessage);

  // Expiry
  // fwrite($apns, $apnsMessage);
  
  socket_close($apns);
  fclose($apns);

  // watchdog(TAG, 'apns_voip: %error | %errorString | %payload', array('%error'=>serialize($error), '%errorString'=>serialize($errorString), '%payload'=>serialize($result)), WATCHDOG_INFO);
}


function apns_voip($pushkit_token, $action, $uuid, $handle=array(), $has_video = '0', $sound = 'default'){


    global $debug;
   // try {
    // error_reporting(0);

    // error_reporting(E_ALL);
    // ini_set('display_errors', 1);

    // Report all PHP errors
    // error_reporting(-1);

    // error_reporting(0);

    // $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url'])); 

    // $apnsCert = 'sites/default/files/VOIP.pem';

    // watchdog(TAG, 'apns_voip: %param', array('%param'=>config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), WATCHDOG_INFO);
    if ($debug) {
      // $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate_dev')['uri']), strlen($GLOBALS['base_url'])); 
      $push = new ApnsPHP_Push(
        ApnsPHP_Abstract::ENVIRONMENT_SANDBOX,
        APN_CERTIFICATE
      );
    }else{
      // $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url']));
      $push = new ApnsPHP_Push(
        ApnsPHP_Abstract::ENVIRONMENT_PRODUCTION,
        APN_CERTIFICATE
      );
    }
    

    // Connect to the Apple Push Notification Service
    $push->connect();

    // Instantiate a new Message with a single recipient
    $message = new ApnsPHP_Message($pushkit_token);
    // Set a custom identifier. To get back this identifier use the getCustomIdentifier() method
    // over a ApnsPHP_Message object retrieved with the getErrors() message.
    $message->setCustomIdentifier("Message-Badge-3");
    // Set badge icon to "3"
    $message->setBadge(3);
    // Set a simple welcome text
    $message->setText('Hello APNs-enabled device!'); // Hello APNs-enabled device
    // Play the default sound
    $message->setSound();
    // Set a custom property
    // $message->setCustomProperty('acme2', array('bang', 'whiz'));
    // Set another custom property
    $message->setCustomProperty('action', $action);
    $message->setCustomProperty('uuid', $uuid);
    // $message->setCustomProperty('token', $friend_id_token);
    $message->setCustomProperty('handle', $handle);
    $message->setCustomProperty('sound', $sound);
    $message->setCustomProperty('has_video', $has_video);
    // Set the expiry value to 60 seconds
    $message->setExpiry(60);
    // Add the message to the message queue
    $push->add($message);
    // Send all messages in the message queue
    $push->send();
    // Disconnect from the Apple Push Notification Service
    $push->disconnect();
    // Examine the error message container
    $aErrorQueue = $push->getErrors();
    if (!empty($aErrorQueue)) {
      $aErrorQueue;
      // var_dump($aErrorQueue);
      watchdog(TAG, 'error -> apns_voip: %error', array('%error'=>$aErrorQueue), WATCHDOG_ERROR);
    }
  // } catch (Exception $e) {
  //     // echo 'Caught exception: ',  $e->getMessage(), "\n";
  // } finally {
  //     // echo "First finally.\n";
  // }
}

function voip(){
  $result = array();

  if (!check_header()) {
    # code...
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  // video
  if (empty($param['platform']) || empty($param['action']) || empty($param['uid']) || empty($param['friend_id']) || empty($param["uuid"]) || empty($param["item_id"])) {
    $result['result'] = FALSE;
    $result['message']  = "function : voip, parameter";
    
    return $result;
  }

  global $firebase;

  /*
  action : start_call_action, end_call_action, held_call_action
  */
  $platform = $param['platform'];
  $action   = $param['action'];
  $uid      = $param['uid'];        // uid ของคนส่งคำขอ
  $friend_id= $param['friend_id'];  // friend_id เพื่อนที่ต้องติดต่อ
  $uuid     = $param['uuid'];
  $item_id  = $param['item_id'];


  switch ($action) {
    case 'start_call_action':{
      // module_load_include('module', 'opentok', 'opentok');

      $has_video = $param['has_video'];

      if (strcasecmp($has_video, "0") == 0) {
        // เป็นการ call audio
      }else{
        // เป็นการ call video
      }


      $profile = profile2_by_uid_load($uid, 'main');

      /////////
      $friend_profile = profile2_by_uid_load($friend_id, 'main');
      if(isset($friend_profile->field_device_access)){
        foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
          $item_load = field_collection_item_load($value['value']);

          // $result['pushkit_token']     = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
          if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0) {
            $apnsHost = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_host');//'gateway.sandbox.push.apple.com';
            $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url']));   // dpm(dirname(__FILE__) . '/' . 'VOIP.pem');
            $apnsPort = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_port'); // 2195;

            ////////////////// ** opentok ** /////////////////////////////
           
            // $opentok_api_key = variable_get('opentok_api_key', NULL);
            // $opk_sessionId = opentok_create_session($uuid)->__toString();
            // $kToken     = opentok_get_token($kSessionId);

            
            // echo "opentok_api_key : " . $opentok_api_key . '</br>';
            // echo "sessionId : " . $sessionId . '</br>';
            // echo "opentok_get_token : " . opentok_get_token($sessionId);
            
            ////////////////// ** opentok ** /////////////////////////////


            /////////////////  ** twilio ** /////////////////////////////
            // Substitute your Twilio AccountSid and ApiKey details
            $accountSid   = 'AC94429faf5d0c017fdde2eb9347c699e6';
            $apiKeySid    = 'SKc494a853c4e4bd047f4aaa5ea28729c7';
            $apiKeySecret = '1FZNcielMkW1sv35zkUOTUX3tu1el7ZZ';


            // สร้าง token ให้ user
            $identity     = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

            // Create an Access Token
            $token = new AccessToken(
              $accountSid,
              $apiKeySid,
              $apiKeySecret,
              3600 * 3 , /* 3 hour(10800 seconds) */
              $identity
            );


            // // Grant access to Video
            $grant = new VideoGrant();
            $grant->setRoom($uuid);
            $token->addGrant($grant);

            // Serialize the token as a JWT
            // echo $token->toJWT();

            $result['tokenJWT'] = $token->toJWT();


            // สร้าง token ให้ friend
            $identity     = $friend_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

            // Create an Access Token
            $token = new AccessToken(
              $accountSid,
              $apiKeySid,
              $apiKeySecret,
              3600 * 3 , /* 3 hour(10800 seconds) */
              $identity
            );


            // // Grant access to Video
            $grant = new VideoGrant();
            $grant->setRoom($uuid);
            $token->addGrant($grant);


            // $result['result'] = TRUE;
            // $result['token']  = $token->toJWT();;
            /////////////////  ** twilio ** /////////////////////////////

            // add profile ให้กับ user.  'publisher', 'subscriber'
            $value = array(
                "is_audio"    => "0",
                "friend_id"   => $friend_id,
                "status"      => "0",  // ตัวบอกว่าสายรับหรือยัง
                "tokenJWT"    => $token->toJWT()
                // "ktoken"      => $kToken,
                /*
                "opk_sessionId"  => $opk_sessionId,
                "members"     => array($uid       =>array("type"=>"publisher", "opk_token"=>opentok_get_token($opk_sessionId, 'publisher'), "status"=>"1"),
                                       $friend_id =>array("type"=>"subscriber", "opk_token"=>opentok_get_token($opk_sessionId, 'publisher'), "status"=>"0"))
                                       */

            );

            // idna/user/{user_id}/profiles/device_access/{item_id}/voip/
            //  #1 : บันทึก profile ตัวเองไว้ที่ firebase
            $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid .'/profiles/device_access/'. $item_id .'/'. FIREBASE_VOIP . $uuid , $value);

            // $result['value']     = $value;

            // $handle = "uid=" . $uid . "&name=" . $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

            $handle = array(
                      "uid"  => $uid,
                      "name" => $profile->field_profile_display_name[LANGUAGE_NONE][0]['value']
                      );

            // iphone 5s
            // $token_pkpush   = '395aa99183b9c31c2b6274dbfbbcd169c149c4f59782f4fde9b8386866ff15f5';

            // ipad
            // $token_pkpush = '7094ac021bd272647aa232eddc4c5254a4913f80a4c05b2232e4103deaaffb8c';
            $streamContext = stream_context_create();
            stream_context_set_option($streamContext, 'ssl', 'local_cert', $apnsCert);
            $apns = stream_socket_client('ssl://' . $apnsHost . ':' . $apnsPort, $error, $errorString, 2, STREAM_CLIENT_CONNECT, $streamContext);
            $payload['aps'] = array('hasVideo' => '1', 'sound' => 'default', 'uuid' => $uuid, 'handle'=>$handle, 'action'=>$action);

            // $payload['aps'] = array();
            $output = json_encode($payload);
            $token = pack('H*', $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value']);
            $apnsMessage = chr(0) . chr(0) . chr(32) . $token . chr(0) . chr(strlen($output)) . $output;
            // $result = fwrite($apns, $apnsMessage);

            // Expiry
            fwrite($apns, $apnsMessage);
            
            socket_close($apns);
            fclose($apns);
          // }




            // // $data = array('foo' => 'bar');
            // $serialized_data = serialize($payload);
            // $size = strlen($serialized_data);
            // /// print($size * 8 / 1000);
            // watchdog(TAG, 'Voip: %param', array('%param'=>$errorString .'|' .$error ), WATCHDOG_INFO);

            // $result['kSessionId'] = $kSessionId;
            // $result['kToken']     = $kToken;
            
            
          }
        }
      }

      /////////
    }
      break;

    case 'end_call_action':{
      $profile = profile2_by_uid_load($uid, 'main');

      /////////
      $friend_profile = profile2_by_uid_load($friend_id, 'main');
       if(isset($friend_profile->field_device_access)){
        foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
          $item_load = field_collection_item_load($value['value']);

          if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0) {
            // $result['pushkit_token']  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];

            // สว่น call
            // 395AA99183B9C31C2B6274DBFBBCD169C149C4F59782F4FDE9B8386866FF15F5
            // $array_token_pkpush = array("ff38f7dc0d34b6c582166cf5ecbb0e3114ca8160b038727826ed306b0e8e4a83", "8597a025aae811c3c007f6c02d0864c99a0e3b081639edd2060c0968aa8b65f2");

            // foreach ($array_token_pkpush as &$token_pkpush) {
              // $value = $value * 2;
              // dpm($value);

              $apnsHost = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_host');//'gateway.sandbox.push.apple.com';
              $apnsCert = $_SERVER['DOCUMENT_ROOT'] . substr(file_create_url(config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_certificate')['uri']), strlen($GLOBALS['base_url']));   // dpm(dirname(__FILE__) . '/' . 'VOIP.pem');
              $apnsPort = config_pages_get(CONFIG_PAGES_TYPE, 'field_apn_port'); // 2195;


              $streamContext = stream_context_create();
              stream_context_set_option($streamContext, 'ssl', 'local_cert', $apnsCert);
              $apns = stream_socket_client('ssl://' . $apnsHost . ':' . $apnsPort, $error, $errorString, 2, STREAM_CLIENT_CONNECT, $streamContext);
              $payload['aps'] = array('hasVideo' => 1, 'sound' => 'default', 'is_audio' => '0', 'uuid' => $uuid, 'handle'=>$profile->field_profile_display_name[LANGUAGE_NONE][0]['value'], 'action'=>$action);

              // $payload['aps'] = array();
              $output = json_encode($payload);
              $token = pack('H*', $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value']);
              $apnsMessage = chr(0) . chr(0) . chr(32) . $token . chr(0) . chr(strlen($output)) . $output;
              // $result = fwrite($apns, $apnsMessage);

              // dpm($result);
              // Expiry
              fwrite($apns, $apnsMessage);
             
              socket_close($apns);
              fclose($apns);
            // }
              // $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_VOIP . $uuid);
              
            //
          }
        }
      }
    }
      break;

    case 'hold_call_action':{
      // hold
    }
      break;
    
    default:
      # code...
      break;
  }

  // watchdog(TAG, 'Voip: %param', array('%param'=>serialize($param)), WATCHDOG_INFO);

  $result['result'] = TRUE;
  $result['param']  = $param;
  return $result;
}

function fwrite_stream($fp, $string) {
    for ($written = 0; $written < strlen($string); $written += $fwrite) {
        $fwrite = fwrite($fp, substr($string, $written));
        if ($fwrite === false) {
            return $written;
        }
    }
    return $written;
}

// FUNCTION to check if there is an error response from Apple
// Returns TRUE if there was and FALSE if there was not
function checkAppleErrorResponse($fp) {
    //byte1=always 8, byte2=StatusCode, bytes3,4,5,6=identifier(rowID). 
    // Should return nothing if OK.

    //NOTE: Make sure you set stream_set_blocking($fp, 0) or else fread will pause your script and wait 
    // forever when there is no response to be sent. 

    $apple_error_response = fread($fp, 6);

    if ($apple_error_response) {
        // unpack the error response (first byte 'command" should always be 8)
        $error_response = unpack('Ccommand/Cstatus_code/Nidentifier', $apple_error_response); 

        if ($error_response['status_code'] == '0') {
            $error_response['status_code'] = '0-No errors encountered';
        } else if ($error_response['status_code'] == '1') {
            $error_response['status_code'] = '1-Processing error';
        } else if ($error_response['status_code'] == '2') {
            $error_response['status_code'] = '2-Missing device token';
        } else if ($error_response['status_code'] == '3') {
            $error_response['status_code'] = '3-Missing topic';
        } else if ($error_response['status_code'] == '4') {
            $error_response['status_code'] = '4-Missing payload';
        } else if ($error_response['status_code'] == '5') {
            $error_response['status_code'] = '5-Invalid token size';
        } else if ($error_response['status_code'] == '6') {
            $error_response['status_code'] = '6-Invalid topic size';
        } else if ($error_response['status_code'] == '7') {
            $error_response['status_code'] = '7-Invalid payload size';
        } else if ($error_response['status_code'] == '8') {
            $error_response['status_code'] = '8-Invalid token';
        } else if ($error_response['status_code'] == '255') {
            $error_response['status_code'] = '255-None (unknown)';
        } else {
            $error_response['status_code'] = $error_response['status_code'].'-Not listed';
        }

        //echo '<br><b>+ + + + + + ERROR</b> Response Command:<b>' . $error_response['command'] . '</b>&nbsp;&nbsp;&nbsp;Identifier:<b>' . $error_response['identifier'] . '</b>&nbsp;&nbsp;&nbsp;Status:<b>' . $error_response['status_code'] . '</b><br>';

        // echo 'Identifier is the rowID (index) in the database that caused the problem, and Apple will disconnect you from server. To continue sending Push Notifications, just start at the next rowID after this Identifier.<br>';

        return true;
    }

    return false;
}

function shby_class()
{
  $result = array();

/*
  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

     // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
  $user = user_load($_POST['uid']);

  if (!$user->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user, NULL);

  // $profile2_load_by_user->field_profile_heart[LANGUAGE_NONE][0]['value'] = 99;

  // profile2_save($profile2_load_by_user);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile_user =  profile2_load($profile2_load_by_user['main']->pid);



  foreach ($_POST['uids'] as $key => $uid) {
    # code...

    $user_fields = user_load($uid);

    if (!$user_fields->uid) {
      // User is not logged in
      //services_error(t('User is not logged in.'), 406);

      $result['result'] = FALSE;
      $result['output'] = "uid not match is user";

      return $result;
    }

    $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

    // Load Profile ขึ้นมาเพือจะทำการแก้ไข
    $profile_friend =  profile2_load($profile2_load_by_user['main']->pid);

    
    foreach ($profile_friend->field_device_access[LANGUAGE_NONE] as $key => $value) {
      // Build array of field collection values.

      $data_friend = field_collection_item_load($value['value']);


      $token   = $data_friend->field_token[LANGUAGE_NONE][0]['value'];
      $title   = "HEART";
      $message = $profile_user->field_profile_name[LANGUAGE_NONE][0]['value'] . " send heart to you.";
      // $sound   = ;// turn_off_notifications

      $result['sound'] = $sound = $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/".  $_POST['uid']. '/turn_off_notifications/');//$firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/".  $_POST['uid']. '/turn_off_notifications/');

      $count_receive = 0;
      $friends = json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/friends"), true);

      foreach ($friends as $key => $value) {
        
        if ($key != 0) {
          
          if (array_key_exists('receive_heart', $value)) {
            $receive_heart = $value['receive_heart'];

            foreach ($receive_heart as $receive_heart_key => $receive_heart_value) {
                if ($receive_heart[$receive_heart_key]["is_read"] == 0) {
                  # code...
                  $count_receive++;
                }
            }
          }
        }
      }
      idna_send_push_notification($token, $title, $message, $sound, $vibrate = 0, $count_receive);
    }
  }
  */

  $result['result']  = TRUE;
  $result['function'] = "shby_class";
  $result['$_POST'] = $_POST;

  return $result;
}


/*
  get Friend status
*/
function get_friend_status(){
  return taxonomy_get_tree_nested(taxonomy_vocabulary_machine_name_load("tags_friend_status")->vid);;
}


/*
  get application category
*/
function application_category(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }


  /*
  $vocabulary = taxonomy_vocabulary_machine_name_load('tags_category_application');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));

  $result['result']  = TRUE;
  $result['function'] = "application_category";
  $result['data'] = $terms;
  */

  $result['result']  = TRUE;
  // taxonomy_get_tree_nested($vid, $parent = 0, $max_depth = NULL, $load_entities = FALSE, $image_styles = NULL)
  $result['data']    = taxonomy_get_tree_nested(taxonomy_vocabulary_machine_name_load("tags_category_application")->vid, 0, NULL, FALSE, 'thumbnail');

  return $result;
}

/**
  function get gender
*/
function get_gender(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $result['result']  = TRUE;
  $result['data']    = taxonomy_get_tree_nested(taxonomy_vocabulary_machine_name_load("gender")->vid);

  return $result;
}

/**
 * Returns a nested tree of taxonomy data (like taxonomy_get_tree) but with nested elements (under a new "children" property)
 *
 * @see taxonomy_get_tree()
 *
 * @return array
 *   Array of taxonomy objects (and their parents and children)
 *
 *  เป็น function ดึง parent -> child แล้วเราเพิ่มส่วน get field image  ด้วย
 */
function taxonomy_get_tree_nested($vid, $parent = 0, $max_depth = NULL, $load_entities = FALSE, $image_styles = NULL) {
  $tree = taxonomy_get_tree($vid, $parent, $max_depth, $load_entities);
  $list = array();
  $nested = array();

  // Build an array of all terms
  foreach ($tree as $term) {
    $term->children = array();
    $list[$term->tid] = $term;
  }

  // $term data behaves like a reference
  // If we update a term or child term in $list or $tree or $nested it'll be "updated" in all 3 places
  foreach ($list as $tid => $term) {
    foreach ($term->parents as $ptid) {

      if (is_null($image_styles)) {
        # code...
        $term->field_image = substr(file_create_url(entity_load('taxonomy_term', FALSE, array('vid' => $vid))[$tid]->field_tags_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));
      }else{

        /*
  // [7]  (null)  @"uri" : @"public:///20180406_64827038.png" 
  // var_dump(image_style_url('thumbnail', 'public:///20180406_64827038.png'));
        */
        
        $term->field_image = substr(file_create_url(image_style_url($image_styles, entity_load('taxonomy_term', FALSE, array('vid' => $vid))[$tid]->field_tags_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
      }




      if (isset($list[$ptid])) {
        // This term's parent tid exists; add the term to its children array
        $list[$ptid]->children[$tid] = $term;
      }
      elseif ($ptid == '0') {
        // The parent is 0, meaning it's a top-level term; add the term to the final $nested array
        // It doesn't matter if it doesn't have its children yet (see note above re: references)
        $nested[$tid] = $term;
      }
    }
  }

  return $nested;
}

/*
  จะถูกเรียก tigger for firebase
*/
function delete_my_application(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['app_id'])) {
    $result['result'] = FALSE;
    $result['message'] = "function delete_my_application : parameter";
    return $result;
  }

  global $firebase;
  $app_id   = $param['app_id'];
  $node     = node_load($app_id);

  /*
  เราต้องเช็กด้วยว่า application นี้ แสดงอยู่ store ? ถ้ามีให้ลบออก
  */
  if (isset($node->field_on_store[LANGUAGE_NONE])) {
    if (strcmp($node->field_on_store[LANGUAGE_NONE][0]['value'], '1') == 0) {
      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $node->nid .'/');
    }
  }

  node_delete($app_id);

  watchdog(TAG, 'node_delete >  delete_my_application app_id : %app_id', array('%app_id'=>$app_id), WATCHDOG_INFO);  

  $my_app_chat_query  = new EntityFieldQuery();
  $my_app_chat_result = $my_app_chat_query->entityCondition('entity_type', 'field_collection_item')
                          ->entityCondition('bundle', 'field_my_app_chat')
                          ->fieldCondition('field_application_id', 'value', $app_id, '=')
                          ->execute();

  $t = array();
  $tt = array();
  if (!empty($my_app_chat_result['field_collection_item'])) {
    $my_app_chat_nids = array_keys($my_app_chat_result['field_collection_item']);

    foreach ($my_app_chat_nids as $my_app_chat_key => $item_id) { 
      $item_load = field_collection_item_load($item_id);

      $friend_id   = $item_load->hostEntity()->uid;

      // idna > user > {user_id} > center_chat > {item_id}
      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $friend_id ."/center_chat/" . $item_id);
      $firebase->delete('conversation/' . $item_load->field_profile_friends_chat_id[LANGUAGE_NONE][0]['value']);

      $t[] = FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $friend_id ."/center_chat/" . $item_id;
      $tt[]= 'conversation/' . $item_load->field_profile_friends_chat_id[LANGUAGE_NONE][0]['value'];

      entity_delete_multiple('field_collection_item', array($item_id));   
    }
  }

  $result['t'] = $t;
  $result['tt']= $tt;

  /*
  // ลบ ข้อมูล Conversation
  $conversations_query  = new EntityFieldQuery();
  $conversations_result = $conversations_query->entityCondition('entity_type', 'node')
                          ->entityCondition('bundle', 'conversation')
                          ->propertyCondition('title', $data['chat_id'], '=')
                          ->execute();

  $conversations = array();
  if (!empty($conversations_result['node'])) {
    $conversations_nids = array_keys($conversations_result['node']);

    foreach ($conversations_nids as $conversations_key => $conversations_nid) { 
      node_delete($conversations_nid);      
    }
  }
  // ลบ ข้อมูล Conversation

  // chat_groups
  $firebase->delete('conversation/' . $data['chat_id']);
  */

  $result['result'] = TRUE;
  return  $result;
}


/**
 * Sends an e-mail.
 *
 * @param array $form_values
 *   An array of values from the contact form fields that were submitted.
 *   There are just two relevant items: $form_values['email'] and
 *   $form_values['message'].
 */
function idna_mail_send($key, $to, $name, $verify_key) {
  // All system mails need to specify the module and template key (mirrored from
  // hook_mail()) that the message they want to send comes from.
  $module = 'idna';

  switch ($key) {
    case 'contact_message':{
      // $key = 'contact_message';

      // Specify 'to' and 'from' addresses.
      // $to = $form_values['email'];
      $from = variable_get('site_mail', 'info@klovers.org');

      // "params" loads in additional context for email content completion in
      // hook_mail(). In this case, we want to pass in the values the user entered
      // into the form, which include the message body in $form_values['message'].
      // $params = '';//$form_values;

      $params = array('verify_key' => $verify_key);

      // The language of the e-mail. This will one of three values:
      // - user_preferred_language(): Used for sending mail to a particular website
      //   user, so that the mail appears in their preferred language.
      // - global $language: Used when sending a mail back to the user currently
      //   viewing the site. This will send it in the language they're currently
      //   using.
      // - language_default(): Used when sending mail to a pre-existing, 'neutral'
      //   address, such as the system e-mail address, or when you're unsure of the
      //   language preferences of the intended recipient.
      //
      // Since in our case, we are sending a message to a random e-mail address that
      // is not necessarily tied to a user account, we will use the site's default
      // language.
      $language = language_default();

      // Whether or not to automatically send the mail when drupal_mail() is
      // called. This defaults to TRUE, and is normally what you want unless you
      // need to do additional processing before drupal_mail_send() is called.
      $send = TRUE;
      // Send the mail, and check for success. Note that this does not guarantee
      // message delivery; only that there were no PHP-related issues encountered
      // while sending.
      $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
      if ($result['result'] == TRUE) {
        // drupal_set_message(t('Your message has been sent.'));
        watchdog(TAG, 'idna_mail_send > contact_message: Your message has been sent : %to', array('%to'=> $to), WATCHDOG_INFO);

      }
      else {
        // drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
        
        watchdog(TAG, 'idna_mail_send > contact_message: There was a problem sending your message and it was not sent : %to', array('%to'=> $to), WATCHDOG_INFO);
      }
    }
      break;

    case 'user_forgot_password':
    {

      // Specify 'to' and 'from' addresses.
      // $to = $form_values['email'];
      $from = variable_get('site_mail', 'info@klovers.org');

      // "params" loads in additional context for email content completion in
      // hook_mail(). In this case, we want to pass in the values the user entered
      // into the form, which include the message body in $form_values['message'].
      // $params = '';//$form_values;

      $params = array('name' => $name, 'verify_key' => $verify_key);


      // The language of the e-mail. This will one of three values:
      // - user_preferred_language(): Used for sending mail to a particular website
      //   user, so that the mail appears in their preferred language.
      // - global $language: Used when sending a mail back to the user currently
      //   viewing the site. This will send it in the language they're currently
      //   using.
      // - language_default(): Used when sending mail to a pre-existing, 'neutral'
      //   address, such as the system e-mail address, or when you're unsure of the
      //   language preferences of the intended recipient.
      //
      // Since in our case, we are sending a message to a random e-mail address that
      // is not necessarily tied to a user account, we will use the site's default
      // language.
      $language = language_default();

      // Whether or not to automatically send the mail when drupal_mail() is
      // called. This defaults to TRUE, and is normally what you want unless you
      // need to do additional processing before drupal_mail_send() is called.
      $send = TRUE;
      // Send the mail, and check for success. Note that this does not guarantee
      // message delivery; only that there were no PHP-related issues encountered
      // while sending.
      $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
      if ($result['result'] == TRUE) {
        // drupal_set_message(t('Your message has been sent.'));

        watchdog(TAG, 'idna_mail_send > user_forgot_password: Your message has been sent : %to', array('%to'=> $to), WATCHDOG_INFO);
      }
      else {
        // drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');

        watchdog(TAG, 'idna_mail_send > contact_message: There was a problem sending your message and it was not sent : %to', array('%to'=> $to), WATCHDOG_INFO);
      }

    }
      break;
    
    default:
      # code...
      break;
  }

}


function user_friends_heart($uid)
{
  $result = array();

    // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
  $user_fields = user_load($uid);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }


  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  // $uid_friends = array();

  $data = array();

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    // จะเลือกเฉพาะ friend ที่มี heart receive > 0 
    if($data_item_load->field_heart_send[LANGUAGE_NONE][0]['value'] > 0){
      // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

      $friend_user_fields = user_load($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value']);

      $tmp['uid'] = $friend_user_fields->uid;
      $tmp['name'] = $friend_user_fields->name;
      $tmp['mail'] = $friend_user_fields->mail;
      $tmp['data'] = $data_item_load;
      // $tmp['user_heart'] = $profile->field_profile_heart[LANGUAGE_NONE][0]['value'];
      $tmp['heart_send'] = $data_item_load->field_heart_send[LANGUAGE_NONE][0]['value'];
      $tmp['datetime_send'] = $data_item_load->field_datetime_send[LANGUAGE_NONE][0]['value'];

      $tmp['heart_receive'] = $data_item_load->field_heart_receive[LANGUAGE_NONE][0]['value'];
      $tmp['datetime_receive'] = $data_item_load->field_datetime_receive[LANGUAGE_NONE][0]['value'];

      $data[] = $tmp;
    }
  }
  
  $result['result'] = TRUE;
  // $result['GET'] = $uid;
  $result['function'] = "user friends heart";
  $result['data'] = $data;

  return $result;
}

function user_friends($uid)
{
  $result = array();

  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
  $user_fields = user_load($uid);

  if (!$user_fields->uid) {
    // User is not logged in

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  // $uid_friends = array();
  $data = array();
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    // $uid_friends[] = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];

    if($data_item_load->field_heart_friend_status[LANGUAGE_NONE][0]['value'] != 2){

      $friend_user_fields = user_load($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value']);

      $tmp['uid']         = $friend_user_fields->uid;
      $tmp['name']        = $friend_user_fields->name;
      $tmp['mail']        = $friend_user_fields->mail;

      $profile_friend = profile2_load(profile2_load_by_user($friend_user_fields, NULL)['main']->pid);

      if (count($profile_friend->field_profile_image) > 0) {
        # code...
        // file_create_url($account->picture->uri); 
        $tmp['profile_picture'] =  file_create_url($profile_friend->field_profile_image[LANGUAGE_NONE][0]['uri']);
      }else{
        $tmp['profile_picture'] =  "";
      }
      

      if($data_item_load->field_display_name[LANGUAGE_NONE][0]['value'] == ""){
        $tmp['display_name']  = $friend_user_fields->name;
      }else{
        $tmp['display_name']  = $data_item_load->field_display_name[LANGUAGE_NONE][0]['value'];
      }
      
      $tmp['heart_send']    = $data_item_load->field_heart_send[LANGUAGE_NONE][0]['value'];
      $tmp['heart_receive'] = $data_item_load->field_heart_receive[LANGUAGE_NONE][0]['value'];
      $tmp['friend_status'] = $data_item_load->field_heart_friend_status[LANGUAGE_NONE][0]['value'];

      $tmp['profile_friend'] = $profile_friend;

      if ($data_item_load->field_turn_off_notifications[LANGUAGE_NONE][0]['value'] == "") {
        # code...
        $tmp['turn_off_notifications'] = '0';
      }else{
        $tmp['turn_off_notifications'] = $data_item_load->field_turn_off_notifications[LANGUAGE_NONE][0]['value'];
      }
      

      $data[] = $tmp;
    }
  }

  $result['result'] = TRUE;
  $result['function'] = "user friends";
  $result['data'] = $data;
  // $result['user_heart']  =$profile->field_profile_heart[LANGUAGE_NONE][0]['value'];

  return $result;
}

function accept_friend(){

  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // load profile ของเราขึ้นมาแก้ใข friend status
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      //Update value
      $wrapper->field_heart_friend_status->set('2');
      $wrapper->save();
    }
  }

  // load profile ของเพื่อนขึ้นมาแก้ไข friend status
  $fprofile = profile2_by_uid_load($_REQUEST['uid_friend'], 'main');
  foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      //Update value
      $wrapper->field_heart_friend_status->set('2');
      $wrapper->save();
    }
  }

  $result['result'] = TRUE;
  return $result;
}

function accept_friend_v1()
{
  $result = array();

  // เป้นการโหลดข้อมูลของ  user uid เพอื่จะ แก้ไข สถานะ เพือน (field_heart_friend_status = 1)
  $user_fields = user_load($_POST['uid']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      // $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

      // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

      //Update value
      $wrapper->field_heart_friend_status->set('2');
      $wrapper->save();


      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

      $data = array(
        "friend_status"   =>'2',
        "update"  => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data);
      */
    }

  }


  // เป้นการโหลดข้อมูลของ  friend uid เพอื่จะ แก้ไข สถานะ เพือน (field_heart_friend_status = 1)
  $user_fields = user_load($_POST['uid_friend']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid friend not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      // $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

      // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

      //Update value
      $wrapper->field_heart_friend_status->set('2');
      $wrapper->save();


      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

      $data = array(
        "friend_status"   =>'2',
        "update"  => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/" . $_POST['uid'] . "/", $data);
      */
    }
  }

  $result['result'] = TRUE;
  $result['function'] = "accept_friend";
  $result['POST'] = $_POST;

  return $result;
}

function not_accept_friend(){
  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // load profile ของเราขึ้นมาแก้ใข friend status
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      //Update value
      $wrapper->field_heart_friend_status->set('-3');
      $wrapper->save();
    }
  }

  // load profile ของเพื่อนขึ้นมาแก้ไข friend status
  $fprofile = profile2_by_uid_load($_REQUEST['uid_friend'], 'main');
  foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      //Update value
      $wrapper->field_heart_friend_status->set('-4');
      $wrapper->save();
    }
  }

  $result['result'] = TRUE;
  return $result;
}

function not_accept_friend_v1()
{
  $result = array();

  // เป้นการโหลดข้อมูลของ  user uid เพอื่จะ แก้ไข สถานะ เพือน (field_heart_friend_status = 1)
  $user_fields = user_load($_POST['uid']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      // $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

      // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

      //Update value
      $wrapper->field_heart_friend_status->set('-2');
      $wrapper->save();


  /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

      $data = array(
        "friend_status"   =>'-2',
        "update"  => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data);
      */
    }

  }


  // เป้นการโหลดข้อมูลของ  friend uid เพอื่จะ แก้ไข สถานะ เพือน (field_heart_friend_status = 1)
  $user_fields = user_load($_POST['uid_friend']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      
      // $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

      // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

      //Update value
      $wrapper->field_heart_friend_status->set('-2');
      $wrapper->save();



      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

      $data = array(
        "friend_status"   =>'-2',
        "update"  => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/" . $_POST['uid'] . "/", $data);
      */
    }

  }


  $result['result'] = TRUE;
  $result['function'] = "not accept_friend";
  $result['POST'] = $_POST;

  return $result;
}

function delete_friend(){

  $result = array();
  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  /*
foreach ($user_profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
    if ($value['value'] == $_POST['item_id']) {
      # code...
      $wrapper = entity_metadata_wrapper('field_collection_item', field_collection_item_load($value['value']));
      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;
    }
  }
  */

  // user
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      // $wrapper->field_heart_friend_status->set('-999');
      // $wrapper->save();

      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;
    }
  }

  // friend
  $fprofile = profile2_by_uid_load($_REQUEST['uid_friend'], 'main');
   foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      // $wrapper->field_heart_friend_status->set('-999');
      // $wrapper->save();

      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;      
    }
  }

  $result['result'] = TRUE;
  return $result;
}

function delete_friend_v1(){
  $result = array();

  $user_fields = user_load($_POST['uid']);
  // $uid_fields = user_load($_POST['uid_friend']);
  // $name = user_load($_POST['name']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_heart_friend_status->set('-999');
      $wrapper->save();

      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      
      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend']);
      */
      break;
      
    }
  }

  // friend

  $friend_fields = user_load($_POST['uid_friend']);
  // $uid_fields = user_load($_POST['uid_friend']);
  // $name = user_load($_POST['name']);

  if (!$friend_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "friend uid not match is user";

    return $result;
  }

  $profile2_load_by_friend = profile2_load_by_user($friend_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $friend_profile =  profile2_load($profile2_load_by_friend['main']->pid);

  foreach ($friend_profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_heart_friend_status->set('-999');
      $wrapper->save();

    /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      
      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/" . $_POST['uid']);
      */
      break;
      
    }
  }

  $result['result'] = TRUE;
  $result['function'] = "delete_friend";

  return $result;
}

function send_heart_to_friends()
{
  $result = array();

   // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
  $user_fields = user_load($_POST['uid']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // $profile2_load_by_user->field_profile_heart[LANGUAGE_NONE][0]['value'] = 99;

  // profile2_save($profile2_load_by_user);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile_user =  profile2_load($profile2_load_by_user['main']->pid);


  // เช็กว่าเรา user นี้สามารถส่ง heart ได้หรือไหม
  // if($profile_user->field_profile_heart[LANGUAGE_NONE][0]['value'] > 0){

    // Firebase 
    // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

    // ลดจำนวน heart
    // $decrement_heart = $profile_user->field_profile_heart[LANGUAGE_NONE][0]['value'] - 1;

    // ลดจำนวน heart ที่อยู่ที่ firebase 
    // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] . "/profile/", array("heart"   =>$decrement_heart));
    
    // ลดจำนวน heart ที่อยู่ที่ drupal 
    // $profile_user->field_profile_heart[LANGUAGE_NONE][0]['value'] = $decrement_heart;
    profile2_save($profile_user);


    foreach ($profile_user->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
      // Build array of field collection values.

      $data = field_collection_item_load($value['value']);

      // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

      // if($value['value'] == 16){
      // update heart receive คือ เพิ่มขึ้นอีกหนึ่ง
      if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
        $wrapper = entity_metadata_wrapper('field_collection_item', $data);

        /*
        if($data->field_heart_send[LANGUAGE_NONE][0]['value'] >= LIMIT_SEND_HEART){

          $result['result'] = FALSE;
          $result['output'] = "Cannot send heart limit heart : " . LIMIT_SEND_HEART;

          return $result;
        }
        */
        
        $value_update = $data->field_heart_send[LANGUAGE_NONE][0]['value'] + 1;

        // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

        //Update value
        $wrapper->field_heart_send->set($value_update);
        $wrapper->field_datetime_send->set(time());
        $wrapper->save();

        /*
        // update firebase
        $data_update = array(
          "send"   =>$value_update
        );

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data_update);
        */


        // update firebase
        $data_update = array(
          "is_read"   =>"0", // เป็นการ update จากที่เราส่งถึงเพือนคนนี้
          "time"  => time()
        );

/*
        $firebase->push(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/send_heart/", $data_update);
        */
        break;
      }
    }
    // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user 

    /*
    เป็นการ  update heart ของเพื่อน ว่า field_heart_send เท่าไร
    */

    $user_fields = user_load($_POST['uid_friend']);

    if (!$user_fields->uid) {
      // User is not logged in
      //services_error(t('User is not logged in.'), 406);

      $result['result'] = FALSE;
      $result['output'] = "uid not match is user";

      return $result;
    }

    $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

    // Load Profile ขึ้นมาเพือจะทำการแก้ไข
    $profile_friend =  profile2_load($profile2_load_by_user['main']->pid);

    /*
    // เพิ่มจำนวน heart
    $increment_heart = $profile->field_profile_heart[LANGUAGE_NONE][0]['value'] + 1;

    // เพิ่มจำนวน heart ที่อยู่ที่ firebase 
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] . "/", array("heart"   =>$increment_heart));
    
    // เพิ่มจำนวน heart ที่อยู่ที่ drupal 
    $profile->field_profile_heart[LANGUAGE_NONE][0]['value'] = $increment_heart;
    profile2_save($profile);
    */

    foreach ($profile_friend->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
      // Build array of field collection values.

      $data = field_collection_item_load($value['value']);

      // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

      // if($value['value'] == 16){
      if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid']){
        $wrapper = entity_metadata_wrapper('field_collection_item', $data);
        
        $value_update = $data->field_heart_receive[LANGUAGE_NONE][0]['value'] + 1;

        // watchdog(TAG, 'Update Heart = %edit', array('%edit' => $value_update), WATCHDOG_INFO);

        //Update value
        $wrapper->field_heart_receive->set($value_update);
        $wrapper->field_datetime_receive->set(time());
        $wrapper->save();


        /*
        // update firebase
        $data_update = array(
          "receive"   =>$value_update
        );

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/" . $_POST['uid_friend'] . "/", $data_update);
        */
        
        /*
        $data_update = array(
          "is_read"   =>"0",
          "time"  => time()
        );

        $firebase->push(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/" . $_POST['uid'] . "/receive_heart/", $data_update);
        */

        break;
      }
    }



    // send notication to friend
    // เราต้อง profile  uid friend เพื่อหา token เพื่อใช้สำหรับ ส่่ง push notification เพราะว่า โอกาศที่ 1 user จะ login จากหลาย device ดังนี้เราต้องส่ง ทุก device ที่ login ของ friend  นั้นๆ

    /*
    $friend_fields = user_load($_POST['uid_friend']);

    if (!$friend_fields->uid) {
      // User is not logged in
      //services_error(t('User is not logged in.'), 406);

      $result['result'] = FALSE;
      $result['output'] = "uid not match is user";

      return $result;
    }

    $profile2_load_by_friend = profile2_load_by_user($friend_fields, NULL);

    // Load Profile ขึ้นมาเพือจะทำการแก้ไข
    $profile_friend =  profile2_load($profile2_load_by_friend['main']->pid);
    */

    // $result['profile_friend'] = $profile_friend;
    // $result['profile_friend'] = $profile_friend;

    foreach ($profile_friend->field_device_access[LANGUAGE_NONE] as $key => $value) {
      // Build array of field collection values.

      $data_friend = field_collection_item_load($value['value']);


      $token   = $data_friend->field_token[LANGUAGE_NONE][0]['value'];
      $title   = "HEART";
      $message = $profile_user->field_profile_name[LANGUAGE_NONE][0]['value'] . " send heart to you.";
      // $sound   = ;// turn_off_notifications

      $result['sound'] = $sound = '0';//$firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/".  $_POST['uid']. '/turn_off_notifications/');//$firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends/".  $_POST['uid']. '/turn_off_notifications/');


      /* คำนวณหา badge */
      /*
      $count_receive = 0;
      $friends = json_decode($firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid_friend'] ."/friends"), true);

      foreach ($friends as $key => $value) {
        
        if ($key != 0) {
          
          if (array_key_exists('receive_heart', $value)) {
            $receive_heart = $value['receive_heart'];

            foreach ($receive_heart as $receive_heart_key => $receive_heart_value) {
                if ($receive_heart[$receive_heart_key]["is_read"] == 0) {
                  # code...
                  $count_receive++;
                }
            }
          }
        }
      }
      */
      /* คำนวณหา badge */


      // idna_send_push_notification($token, $title, $message, $sound, $vibrate = 0, $count_receive);

    }
    // send notication to friend

    $result['result'] = TRUE;
    $result['function'] = "send heart to friend";
    $result['POST'] = $_POST;

/*
  }else{
    $result['result'] = FALSE;
    $result['output'] = "Cannot send heart = 0 " ;
  }
  */

  return $result;
}


function recreate_qrcode(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (!isset($param['uid'])) {
    $result['result'] = FALSE;
    $result['message'] = "Error : parameter";
    return $result;
  }

  global $firebase;
  $getallheaders = nginx_getallheaders();

  $uid                = $param['uid'];
  $platform           = $getallheaders['platform'];
  $bundleidentifier   = $getallheaders['bundle_identifier'];

  ///-----------

  $account = user_load($uid);

  generatorQRCode($account, $platform, $bundleidentifier);

  $profile = profile2_by_uid_load($account->uid, 'main');
  $url_my_qrcode = substr(file_create_url($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));

  
  // add profile ให้กับ user
  $values = array(
                  "url_my_qrcode" => $url_my_qrcode
                );
  
  /*
   #1 : บันทึก profile ตัวเองไว้ที่ firebase
  */
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profiles/', $values);

  ///-----------

  $result['result']        = TRUE;
  $result['url_my_qrcode'] = $url_my_qrcode;

  return $result;
}

/*
  $value = array();
  $value['field_name'] = 'field_profile_my_id'; // field collection name

  $value['field_profile_my_id_value'][LANGUAGE_NONE][0]['value'] = $my_id;
  $value['field_profile_my_id_is_edit'][LANGUAGE_NONE][0]['value'] = "1";

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $value);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();




  /// 
  $query  = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->fieldCondition('field_platform', 'value', strtolower($platform), '=')
    ->propertyCondition('title', $udid, '=')
    ->execute();

  // dpm($result['node']);

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $key => $nid) {
      $node = node_load($nid);
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_key_token_notification->set($token);
      $node_wrapper->save();
    }
  }else{
*/
function find_friend(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (!isset($param['uid']) || !isset($param['fction']) || !isset($param['code'])) {
    $result['result'] = FALSE;
    $result['param'] = $param;
    return $result;
  }

  global $firebase;
  $uid        = $param['uid'];

  /*
  0 = my id
  1 = qrcode
  */
  $fction     = $param['fction'];
  $code       = $param['code'];

  switch ($fction) {
    case '0':{
        /*
          เป็นการ find friend จาก id
        */
        
        $query  = new EntityFieldQuery;
        $output = $query->entityCondition('entity_type', 'field_collection_item')
                  ->entityCondition('bundle', 'field_profile_my_id')
                  ->fieldCondition('field_profile_my_id_value', 'value', $code, '=')
                  ->execute();

        if (!empty($output['field_collection_item'])) {
          $key = array_keys($output['field_collection_item'])[0];

          // เราจะได้ friend_id ของเจ้าของ code นี้
          $friend_id   = field_collection_item_load($key)->hostEntity()->uid;

          // กรณีเป้น ตัวเอง(My self)
          if (strcasecmp($uid, $friend_id) == 0) {

            $result['result']     = TRUE;
            $result['friend_status']  = '99';
            $result['message']    = "You can't add yourself as a friend.";
            return  $result;
          }

          // เป้น การ load friends ของ uid ขึ้นมาเช็ดว่า friend_id เป้น friend เราอยุ่หรือไม่
          $profile_user = profile2_by_uid_load($uid, 'main');

          $friend_status = 0;
          foreach ($profile_user->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
              $data_item_load = field_collection_item_load($value['value']);
              
              if($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $friend_id){
                
                $friend_status = $data_item_load->field_friend_status[LANGUAGE_NONE][0]['tid'];
                break;
              }
          }

          $profile_friend    = profile2_by_uid_load($friend_id, 'main');

          $result['name']     = $profile_friend->field_profile_name[LANGUAGE_NONE][0]['value'];
          if(count($profile_friend->field_profile_image) > 0){
            $result['url_image'] = substr(file_create_url($profile_friend->field_profile_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));
          }else{
            $result['url_image'] = "";
          }

          $result['friend_id']      = $friend_id;

          if ($friend_status == 0) {
            // แสดงยังไม่ได้ เป้นเพือนสามารถเพิ่มเพือนได้ โดย return profile 
            $result['result']         = TRUE;
            $result['friend_status']  = '0';
           
          }else{
              switch ($friend_status) {
                // Friend กรณีเราเป็นเพือนกันอยู่แล้ว
                case '10':{
                  $result['result']         = TRUE;
                  $result['friend_status']  = '10';
                  $result['message']        = "is already your friend.";
                }
                  break;

                // Friend Cancel : กรณีเราเคยขอเป้นเพือนแล้วโดน เพือน กด cancel
                case '13':{
                  $result['result']         = TRUE;
                  $result['friend_status']  = '13';
                  $result['message']        = "Friend Cancel.";
                }
                  break;

                // Friend request : กรณีเราส่งคำขอเป้นเพือน
                case '11':{
                  $result['result']         = TRUE;
                  $result['friend_status']  = '11';
                  $result['message']        = "Friend request.";
                }
                  break;

                // Wait for a friend : เพือนคนนี้ส่งคำขอ ขอเราเป็นเพือน
                case '12':{
                  $result['result']         = TRUE;
                  $result['friend_status']  = '12';
                  $result['message']        = "Wait for a friend.";
                }
                  break;
                
                default:
                  # code...
                  break;
              }
          }
        }else{
          // กรณีหาเพือ่นไม่เจอ 
          $result['result']   = TRUE;
          $result['friend_status']  = '-1';
          $result['code']  = $code;
          $result['message']  = "Friend not found.";
          return $result;
        }
      }
      break;

      case '1':{
        /*
          เป็นการ find friend จาก scan qrcode. เราต้อง เอา code ทีได้จากการ scan มา decode ก่อน โดย code คือ friend_id นั้นเอง
        */

        $friend_id = dec_enc('decrypt', $code);


        if (!is_numeric($friend_id)) {
          $result['result']     = FALSE;
          $result['message']    = "error_reporting()";
          return  $result;
        }

        // กรณีเป้น ตัวเอง(My self)
        if (strcasecmp($uid, $friend_id) == 0) {

          $result['result']     = TRUE;
          $result['friend_status']  = '99';
          $result['message']    = "You can't add yourself as a friend.";
          return  $result;
        }

        /*
        เป้น การ load friends ของ uid ขึ้นมาเช็ดว่า friend_id เป้น friend เราอยุ่หรือไม่
        */
        $profile_user = profile2_by_uid_load($uid, 'main');

        $friend_status = 0;
        foreach ($profile_user->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
            $data_item_load = field_collection_item_load($value['value']);
            
            if($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $friend_id){
              
              $friend_status = $data_item_load->field_friend_status[LANGUAGE_NONE][0]['tid'];
              break;
            }
        }

        $profile_friend    = profile2_by_uid_load($friend_id, 'main');

        $result['name']     = $profile_friend->field_profile_name[LANGUAGE_NONE][0]['value'];
        if(count($profile_friend->field_profile_image) > 0){
          $result['url_image'] = substr(file_create_url($profile_friend->field_profile_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));
        }else{
          $result['url_image'] = "";
        }

        $result['friend_id']      = $friend_id;

        if ($friend_status == 0) {
          // แสดงยังไม่ได้ เป้นเพือนสามารถเพิ่มเพือนได้ โดย return profile 
          $result['result']         = TRUE;
          $result['friend_status']  = '0';
         
        }else{
          switch ($friend_status) {
            // Friend กรณีเราเป็นเพือนกันอยู่แล้ว
            case '10':{
              $result['result']         = TRUE;
              $result['friend_status']  = '10';
              $result['message']        = "is already your friend.";
            }
              break;

            // Friend Cancel : กรณีเราเคยขอเป้นเพือนแล้วโดน เพือน กด cancel
            case '13':{
              $result['result']         = TRUE;
              $result['friend_status']  = '13';
              $result['message']        = "Friend Cancel.";
            }
              break;

            // Friend request : กรณีเราส่งคำขอเป้นเพือน
            case '11':{
              $result['result']         = TRUE;
              $result['friend_status']  = '11';
              $result['message']        = "Friend request.";
            }
              break;

            // Wait for a friend : เพือนคนนี้ส่งคำขอ ขอเราเป็นเพือน
            case '12':{
              $result['result']         = TRUE;
              $result['friend_status']  = '12';
              $result['message']        = "Wait for a friend.";
            }
              break;
            
            default:
              # code...
              break;
          }
        }
      }
      break;
    
    default:
      # code...
      break;
  }

  return $result;
}

function find_friend2(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

   if (empty($_POST['fction']) || empty($_POST['uid'])) {
    $result['result'] = FALSE;
    return $result;
  }

  global $firebase;
  $uid        = $_POST['uid'];
  $fction     = $_POST['fction'];
  $uid_friend = $_POST['uid_friend'];
  $isQR       = $_POST['isQR'];

  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ friend ของ uid นี้
  $user_fields = user_load($uid);

  if (!$user_fields->uid) {
    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  if (strcasecmp($isQR, '0') == 0) {
    # การค้นหาแบบ id search

      $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', 0, '!=')
        ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', $uid, '!=')
        ->execute()
        ->fetchCol();

    $mul_users =  user_load_multiple($uids);

    $tm = array();

    foreach ($mul_users as $account) {
      # code...
      
      // $tmp['uid'] = $account->uid;
      // $tmp['name'] = $account->name;
      // $tmp['mail'] = $account->mail;

      // // $path= file_create_url($uri)  uri
      // if(!is_null($account->picture)){
      //   $tmp['url_image'] = file_create_url($account->picture->uri); 
      // }else{
      //   $tmp['url_image'] = "";
      // }

      // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
      $user_fields = user_load($account->uid);

      if (!$user_fields->uid) {
        // User is not logged in
        //services_error(t('User is not logged in.'), 406);

        continue;
      }

      // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

      // $key = $profile2_load_by_user->field_profile_heart_id[LANGUAGE_NONE][0]['value'];

      // $tm[] = $profile2_load_by_user->field_profile_heart_id;


      $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

      $profile =  profile2_load($profile2_load_by_user['main']->pid);

      // $key = $profile->field_profile_heart_id[LANGUAGE_NONE][0]['value'];

    /*
      // ที่ใช้ uid_friend เพราว่าเราใช้ function ร่วมกันกับ search qrcode ด้วย
      if (strcasecmp($uid_friend, $key) == 0) {
        # code...

        $result['result'] = TRUE;
        $result['data']   = $profile;

        return  $result;

        break;
      }
      */
    }

    $result['result'] = FALSE;
    $result['message']   = "User not found.";

    return  $result;

  }else{
    # การค้นหาแบบ qrcode

    $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

    // $profile2_load_by_user->field_profile_heart[LANGUAGE_NONE][0]['value'] = 99;

    // profile2_save($profile2_load_by_user);

    // Load Profile ขึ้นมาเพือจะทำการแก้ไข
    $profile =  profile2_load($profile2_load_by_user['main']->pid);


    //  load profile ของ uid friend
    $friend_fields = user_load($_POST['uid_friend']);
    $profile2_load_by_friend = profile2_load_by_user($friend_fields, NULL);

    // load profile ของ uid friend

     // เช็กว่าเพือนคนนี้ เป้นเพือนเราอยู่แล้วหรือไม่ (check is friend duplicate ?)
    foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
      // Build array of field collection values.

      $data = field_collection_item_load($value['value']);

      if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']) {

  /*
   0 = Family
   1 = Favority
   2 = Friends
   3 = Friend Requests, -3 = User cancel Friend Requests
   4 = Wait to Accept,  -4 = เป็นตัวบอกว่า เพือน cancel คำขอของเรา
   5 = Hide
   6 = Block
   
   -2 = เพื่อน cancel คำขอ
   -4 = เรา cancel wait to accept
   */

        switch ($data->field_heart_friend_status[LANGUAGE_NONE][0]['value']) {
          case '0':
          case '1':
          case '2':
            # code...
          $message = "is already your friend.";
            break;

          case '3':
          $message = "Friend Requests";
            break;
          case '4':
            # code...
          $message = "wait to accept";
            break;
          
          default:
            # code...
            break;
        }

        $result['result']   = TRUE;
        $result['message']  = $message;
        $result['status']   = strval($data->field_heart_friend_status[LANGUAGE_NONE][0]['value']);
        $result['data']     = profile2_load($profile2_load_by_friend['main']->pid);
        return $result;
      }
    }


    $result['result']   = TRUE;
    $result['data']     = profile2_load($profile2_load_by_friend['main']->pid);
    $result['status']   = '99';
  }

  return $result;
}

function people_you_may_know(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid'])) {
    $result['result']   = FALSE;
    $result['message']  = "function : people_you_may_know, parameter";
    return $result;
  }

  $uid = $_REQUEST['uid'];

  $profile = profile2_by_uid_load($uid, 'main');
  $uid_friends = array('0', '1', $uid);

  $tm =array();
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    // 
    // field_heart_friend_status == 99 เราจะนํามาคิดด้วย
    // if ($data->field_heart_friend_status[LANGUAGE_NONE][0]['value'] != '99') {
    //   # code...
    //   $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];
    // }

    // field_heart_friend_status

    // $data_item_load->field_friend_status[LANGUAGE_NONE][0]['tid']

    /*
    if (strcasecmp($data_item_load->field_friend_status[LANGUAGE_NONE][0]['tid'], '11') == 0) {
      # code...
      $tm[] = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];
      continue;
    }else if (strcasecmp($data_item_load->field_friend_status[LANGUAGE_NONE][0]['tid'], '12') == 0) {
      # code...
      $tm[] = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];
      continue;
    }
    /*else if (strcasecmp($data_item_load->field_heart_friend_status[LANGUAGE_NONE][0]['value'], '-4') == 0) {
      # code...
      $tm[] = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];
      continue;
    }
    */

    $uid_friends[] = $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'];
  }
  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user 


  $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', $uid_friends, 'NOT IN')
        ->orderBy("ur.uid", "ASC")
        ->execute()
        ->fetchCol();

  $users =  user_load_multiple($uids);

  $data = array();
  foreach ($users as $account) {
    # code...
    
    $tmp['uid'] = $account->uid;
    // $tmp['name'] = $account->name;
    $tmp['mail'] = $account->mail;

/*
    // $path= file_create_url($uri)  uri
    if(!is_null($account->picture)){
      $tmp['url_image'] = file_create_url($account->picture->uri); 
    }else{
      $tmp['url_image'] = "";
    }

    */


  
    // $friend_user_fields = user_load($account->uid);
    // $profile_friend = profile2_load(profile2_load_by_user($friend_user_fields, NULL)['main']->pid);

    // 

    $profile_friend = profile2_by_uid_load($account->uid, 'main');
    $tmp['name'] = $profile_friend->field_profile_name[LANGUAGE_NONE][0]['value'];
    if(isset($profile_friend->field_profile_image[LANGUAGE_NONE])){
      $tmp['url_image'] = substr(file_create_url(image_style_url('medium', $profile_friend->field_profile_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
    }else{
      $tmp['url_image'] = getDefualtProfilePicture();
    }
    $data[] = $tmp;
  }

  $result['result'] = TRUE;
  $result['function'] = "people_you_may_know";
  $result['data'] = $data;

  $result['uid_friends'] = $uid_friends;
  $result['tm'] = $tm;

  return $result;
}

function edit_display_name(){
  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['name']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  $profile->field_profile_name[LANGUAGE_NONE][0]['value'] = $_REQUEST['name'];
  $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'] = $_REQUEST['name'];

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // จะได้ เพือนมาทั้งหมด
    $data_item_load = field_collection_item_load($value['value']);

    // Load profile ของเพือนแต่ละคน เพื่อที่เราจะ update รูปของเราที่เป้นเพือนด้วย
    $fprofile = profile2_by_uid_load($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'], 'main');
    foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $fkey => $fvalue) {
      $fdata_item_load = field_collection_item_load($fvalue['value']);

      /*
        เราต้องเช็ดว่า เพื่อนคนใหน uid ตรงกันเรา ถึงจะ update displayname
      */
      if($fdata_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid']){
        $wrapper = entity_metadata_wrapper('field_collection_item', $fdata_item_load);
            
        $wrapper->field_display_name->set($_REQUEST['name']);
        $wrapper->save();

        break;
      }
    }
  }

  profile2_save($profile);

  $result['result'] = TRUE;
  return  $result;
}

function turn_off_notifications(){
  $result = array();
  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_turn_off_notifications->set($_POST['status']);
      $wrapper->save();
      break;
    }
  }
  $result['result']   = TRUE;
  return  $result;
}

function turn_off_notifications_v1()
{
  $result = array();

  $user_fields = user_load($_POST['uid']);
  // $uid_fields = user_load($_POST['uid_friend']);
  // $name = user_load($_POST['name']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_turn_off_notifications->set($_POST['status']);
      $wrapper->save();

      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      $data = array(
        "turn_off_notifications"  =>$_POST['status'],
        "update"        => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data);
      */

      break;
      
    }
  }

  $result['result']   = TRUE;
  
  return  $result;
}

function hide_friend(){
  $result = array();
  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);

    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_heart_friend_status->set($_REQUEST['status']);
      $wrapper->save();
      break;
    }
  }
  $result['result'] = TRUE;
  return  $result;
}

function hide_friend_v1(){

  $result = array();

  $user_fields = user_load($_POST['uid']);
  // $uid_fields = user_load($_POST['uid_friend']);
  // $name = user_load($_POST['name']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_heart_friend_status->set($_POST['status']);
      $wrapper->save();

      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      $data = array(
        "friend_status"  =>$_POST['status'],
        "update"        => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data);
      */

      break;
      
    }
  }

  $result['result']   = TRUE;
  $result['function'] = "hide_friend";
  $result['status']   = $_POST['status'];
  $result['data']     = $_POST;
  return  $result;
}

function set_class_friend()
{
  $result = array();

  $user_fields = user_load($_POST['uid']);
  // $uid_fields = user_load($_POST['uid_friend']);
  // $name = user_load($_POST['name']);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    if(strcasecmp($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'], $_POST['uid_friend']) == 0){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);

      //Update value
      $wrapper->field_heart_friend_status->set($_POST['status']);
      $wrapper->save(TRUE);

      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      $data_update = array(
        "friend_status"  =>$_POST['status'],
        "update"        => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/friends/" . $_POST['uid_friend'] . "/", $data_update);
      */

      $result['result']   = TRUE;
      $result['function'] = "set_class_friend";
      return  $result;

      break;
      
    }
  }

  $result['result']   = TRUE;
  $result['function'] = "set_class_friend";
  $result['status']   = $_POST['status'];
  $result['data']     = $_POST;
  return  $result;

}

function cancel_wait_to_accept(){

  $result = array();
  if (empty($_REQUEST['uid'] || empty($_REQUEST['uid_friend']))) {
    $result['result'] = FALSE;
    return $result;
  }

  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      $wrapper->field_heart_friend_status->set($_POST['status']);
      $wrapper->save();
      break;
    }
  }

  $fprofile = profile2_by_uid_load($_REQUEST['uid_friend'], 'main');
  foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);            
      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;
    }
  }

  $result['result'] = TRUE;
  return  $result;
}

function edit_friend_display_name(){

  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['name']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // $user_fields = user_load($_REQUEST['uid']);
  // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  // $profile =  profile2_load($profile2_load_by_user['main']->pid);

  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    // if($value['value'] == 16){
    if($data->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid_friend']){
      $wrapper = entity_metadata_wrapper('field_collection_item', $data);

      //Update value
      $wrapper->field_display_name->set($_REQUEST['name']);
      $wrapper->save();


      /*
      // Firebase increment new HW Login
      $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
      $data_update = array(
        "display_name"  =>$_REQUEST['name'],
        "is_update_display_name"=>"1"
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_REQUEST['uid'] ."/data/contacts/" . $_REQUEST['uid_friend'] . "/", $data_update);
      */

      break;
      
    }
  }

  $result['result'] = TRUE;
  $result['value']  = $_REQUEST['name'];
  return  $result;
}
/*
function edit_display_name(){
  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['name']))) {
    $result['result'] = FALSE;
    return $result;
  }

  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

  $user_fields = user_load($_REQUEST['uid']);
  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);
  $profile->field_profile_name[LANGUAGE_NONE][0]['value'] = $_REQUEST['name'];

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    // $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    $friend_uid = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];

    $is_update_display_name = $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_uid . "/data/contacts/" . $_POST['uid'] . "/is_update_display_name/");

    if (intval($is_update_display_name) == 0) {
      $value = array(
        "display_name"  => $_REQUEST['name']
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_uid . "/data/contacts/" . $_REQUEST['uid'], $value);
    }

  }
  profile2_save($profile);

  $value = array(
    "display_name"  => $_REQUEST['name']
  );

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/data/profile/', $value);

  $result['result'] = TRUE;
  $result['value']  = $_REQUEST['name'];
  return  $result;
}
*/

function edit_phone_v1_0()
{
  $result = array();

  $user_fields = user_load($_POST['uid']);
  // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL)['main'];

  $profile2_load_by_user->field_profile_phone[LANGUAGE_NONE][0]['value'] = $_POST['number'];

  profile2_save($profile2_load_by_user);


  /*

  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  $data = array(
    "phone"  => $_POST['number'],
    "update"  => time()
  );
  // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid, $data);

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/data/profile/', $data);



  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  // $uid_friends = array();
  $data = array();
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    $data_update = array(
      "phone" => $_POST['number'],
      "update"  => time()
    );
  
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] . '/friends/' . $user_fields->uid, $data_update);
  }
  */

  $result['result'] = TRUE;
  $result['status'] = "0";

  return $result;
}

function edit_phone()
{
  $result = array();

  /* v1.0
  $user_fields = user_load($_POST['uid']);
  // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL)['main'];

  $profile2_load_by_user->field_profile_phone[LANGUAGE_NONE][0]['value'] = $_POST['number'];

  profile2_save($profile2_load_by_user);


  $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  $data = array(
    "phone"  => $_POST['number'],
    "update"  => time()
  );
  // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid, $data);

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/profile/', $data);



  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  // $uid_friends = array();
  $data = array();
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);

    $data_update = array(
      "phone" => $_POST['number'],
      "update"  => time()
    );
  
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] . '/friends/' . $user_fields->uid, $data_update);
  }
  */


  //  v1.1 support multi phone
  // fction เป็นตัวบอกว่า เพิ่ม, แก้ไข, ลบ*/

  /*

  number_old, number_new 
  กรณีเพิ่มใหม่ เราจะคิดเฉพาะ number_new เท่านั้น
  กรณีแก้ไข่ เราจะคิดเฉพาะ number_old, number_new 
  */

  switch ($_POST['fction']) {
    case 'add':
    {
        // #1 load profile friend
        $user_fields = user_load($_POST['uid']);

        if (!$user_fields->uid) {

          $result['result'] = FALSE;
          $result['output'] = "User is not logged in";

          return $result;
        }

        $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
        $profile =  profile2_load($profile2_load_by_user['main']->pid);
        // #2 load profile friend

        // #3 
        $flag = TRUE;
        // check is phone number duplicat
        foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $key => $value) {
            $data_item_load = field_collection_item_load($value['value']);
            if($data_item_load->field_phone_number[LANGUAGE_NONE][0]['value'] == $_POST['number_new']){
              
              $flag = FALSE;
              break;
            }
        }

        if ($flag) {
          # code...
          $value = array();
          $value['field_name'] = 'field_profile_multi_phone'; // field collection name

          $value['field_phone_number'][LANGUAGE_NONE][0]['value'] = $_POST['number_new'];

          // Create the field collection entry and associate it with the profile
          $field_entity = entity_create('field_collection_item', $value);
          $field_entity->setHostEntity('profile2', $profile);
          $field_entity->save();

          $result['result'] = TRUE;
          $result['status'] = "0";
          $result['fction'] = $_POST['fction'];
        }else{
          $result['result'] = TRUE;
          $result['status'] = "1";
          $result['message'] = "Duplicate Phone number";
          $result['$_POST'] = $_POST;
        }
      break;
    }

    case 'edit':{
      // #1 load profile friend
      $user_fields = user_load($_POST['uid']);

      if (!$user_fields->uid) {

        $result['result'] = FALSE;
        $result['output'] = "User is not logged in";

        return $result;
      }

      $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
      $profile =  profile2_load($profile2_load_by_user['main']->pid);
      // #2 load profile friend

      // #3 
      $flag = TRUE;
      // check is phone number duplicat
      foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $key => $value) {
          $data_item_load = field_collection_item_load($value['value']);
          if($data_item_load->field_phone_number[LANGUAGE_NONE][0]['value'] == $_POST['number_old']){
            
            $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);

            //Update value
            $wrapper->field_phone_number->set($_POST['number_new']);
            $wrapper->save(TRUE);

            /*
            // Firebase increment new HW Login
            $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
            $data_update = array(
              "phone"  =>$_POST['number_new'],
              "update" => time()
            );

            $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $_POST['uid'] ."/data/profile/", $data_update);
            */
            break;
          }
      }

      $result['result'] = TRUE;
      $result['status'] = "0";
      $result['number_old'] = $_POST['number_old'];
      $result['fction'] = $_POST['fction'];

      break;
    }
    case 'delete':
      # code...
      break;
    
    default:
      # code...
      break;
  }

  return  $result;
}

function edit_multi_phone()
{
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['fction']) || empty($param['uid'])) {
    $result['result'] = FALSE;
    $result['message'] = "function edit_multi_phone : parameter";
    return $result;
  }

  global $firebase;

  //  v1.1 support multi phone
  // fction เป็นตัวบอกว่า เพิ่ม, แก้ไข, ลบ*/

  /*

  number_old, number_new 
  กรณีเพิ่มใหม่ เราจะคิดเฉพาะ number_new เท่านั้น
  กรณีแก้ไข่ เราจะคิดเฉพาะ number_old, number_new 
  */

  
  $uid    = $param['uid'];
  $fction = $param['fction'];
  $item_id= $param['item_id'];
  $number = $param['number'];

  switch ($fction) {
    case 'add':
    {
        // #1 load profile friend
        // $user_fields = user_load($_POST['uid']);
        // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
        // $profile =  profile2_load($profile2_load_by_user['main']->pid);
        // #2 load profile friend

        $profile = profile2_by_uid_load($uid, 'main');

        // #3 
        $flag = TRUE;
        // check is phone number duplicat
        if(isset($profile->field_profile_multi_phone)){
          foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $key => $value) {
              $data_item_load = field_collection_item_load($value['value']);
              if($data_item_load->field_phone_number[LANGUAGE_NONE][0]['value'] == $number){
                
                $flag = FALSE;
                break;
              }
          }
        }

        if ($flag) {
          # code...
          $value = array();
          $value['field_name'] = 'field_profile_multi_phone'; // field collection name

          $value['field_phone_number'][LANGUAGE_NONE][0]['value'] = $number;
          $value['field_enable'][LANGUAGE_NONE][0]['value'] = "1";

          // Create the field collection entry and associate it with the profile
          $field_entity = entity_create('field_collection_item', $value);
          $field_entity->setHostEntity('profile2', $profile);
          $field_entity->save();

          /*
          $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);

          $value = array(
            "number"  => $_POST['number'],
            "enabled"   => "1",  
            "create"  => time(),
            "update"  => time()
          );
          // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid, $data);

          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/data/profile/phones/' . $field_entity->item_id, $value);
          */

          $value = array(
            "name"      => $number,
            "enabled"   => "1"  // เปิด หรือ ปิดการใช้
          );
          // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid, $data);

          // $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/data/profile/mails/' . $field_entity->item_id, $value);

          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/phones/" . $field_entity->item_id, $value);

          $result['result']  = TRUE;
          $result['is_edit']  = FALSE;
          $result['item_id'] = $field_entity->item_id;
          $result['value']    = $value;
        }else{
          $result['result'] = FALSE;
          $result['message'] = "Duplicate phone.";
        }
      break;
    }

    case 'delete':{

      // $user_fields = user_load($_POST['uid']);
      // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
      // $profile =  profile2_load($profile2_load_by_user['main']->pid);
      // #2 load profile friend

      $profile = profile2_by_uid_load($uid, 'main');
      // #3 
      $flag = TRUE;
      // check is phone number duplicat
      foreach ($profile->field_profile_multi_phone[LANGUAGE_NONE] as $key => $value) {
          $data_item_load = field_collection_item_load($value['value']);
          if($data_item_load->item_id == $item_id){
            entity_delete_multiple('field_collection_item', array($data_item_load->item_id));

            // firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/phones/" . $data_item_load->item_id);
            
            $result['result']   = TRUE;
            $result['item_id']  = $data_item_load->item_id;
            return $result;
            break;
          }
      }
      break;
    }
    
    default:
      # code...
      break;
  }

  return  $result;
}

function add_call_waiting(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : add_call_waiting, parameter";
    $result['_REQUEST']  = $_REQUEST;
    return $result;
  }

  $result['result'] = TRUE;
  // $result['data']   = $sound_call_waitings;
  return  $result;
}

function list_default_call_waiting()
{
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['uid'])) {
    $result['result'] = FALSE;
    $result['message'] = "function list_default_call_waiting : parameter";
    return $result;
  }

  $uid = $param['uid'];

   /*
  เราจะดึง sound call waiting ของระบบ กับ uid ทีสร้างขึ้นมาเอง
   */
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'default_sound_call_waiting')
    ->propertyCondition('uid', array(1, $uid))
    ->propertyCondition('status', 1)
    ->execute();  

  $nodes = node_load_multiple(array_keys($entities['node']));  

  $sound_call_waitings = array();
  foreach ($nodes as $node) {
    $fid        = (array)file_load($node->field_call_waiting_uri[LANGUAGE_NONE][0]['fid']);

    // $uid        = $node->uid;
    $nid        = $node->nid;
    $title      = $node->title;
    $sound_url  = substr(file_create_url($fid['uri']), strlen($GLOBALS['base_url']));

    $sound_call_waitings[] = array("nid"=>$nid, "title"=>$title, "sound_url"=>$sound_url);
  } 

  $result['result'] = TRUE;
  $result['data']   = $sound_call_waitings;
  return  $result;
}

function edit_multi_email()
{
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['fction']) || empty($param['uid'])) {
    $result['result'] = FALSE;
    $result['message'] = "function edit_multi_email : parameter";
    return $result;
  }

  global $firebase;

  $fction   = $param["fction"];
  $uid      = $param["uid"];
  $email    = $param["email"];
  $item_id  = $param["item_id"];

  switch (strtolower($fction)) {
    case 'add':
    {
        // #1 load profile friend
        // $user_fields = user_load($_POST['uid']);
        // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
        // $profile =  profile2_load($profile2_load_by_user['main']->pid);
        // #2 load profile friend
        $profile = profile2_by_uid_load($uid, 'main');

        // #3 
        $flag = TRUE;
        
        // check is phone number duplicat
        // if(isset($items->field_my_app_update)){

        if(isset($profile->field_profile_multi_email)){
          foreach ($profile->field_profile_multi_email[LANGUAGE_NONE] as $key => $value) {
              $data_item_load = field_collection_item_load($value['value']);
              if($data_item_load->field_email_text[LANGUAGE_NONE][0]['value'] == $email){
                
                $flag = FALSE;
                break;
              }
          }
        }

        if ($flag) {
          # code...
          $value = array();
          $value['field_name'] = 'field_profile_multi_email'; // field collection name

          $value['field_email_text'][LANGUAGE_NONE][0]['value'] = $email;
          $value['field_enable'][LANGUAGE_NONE][0]['value'] = "1";

          // Create the field collection entry and associate it with the profile
          $field_entity = entity_create('field_collection_item', $value);
          $field_entity->setHostEntity('profile2', $profile);
          $field_entity->save();

          $value = array(
            "name"      => $email,
            "enabled"   => "1"  // เปิด หรือ ปิดการใช้
          );
          // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid, $data);

          // $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $user_fields->uid . '/data/profile/mails/' . $field_entity->item_id, $value);

          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/mails/" . $field_entity->item_id, $value);

          $result['result']  = TRUE;
          $result['is_edit'] = FALSE;
          $result['item_id'] = $field_entity->item_id;
          $result['item']    = $value;
        }else{
          $result['result'] = FALSE;
          $result['message'] = "Duplicate Email.";
        }
      break;
    }
    case 'delete':{
      $profile = profile2_by_uid_load($uid, 'main');

      // #3 
      $flag = TRUE;
      // check is phone number duplicat
      foreach ($profile->field_profile_multi_email[LANGUAGE_NONE] as $key => $value) {
          $data_item_load = field_collection_item_load($value['value']);
          if($data_item_load->item_id == $item_id){
            entity_delete_multiple('field_collection_item', array($data_item_load->item_id));

            $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/mails/" . $data_item_load->item_id);

            $result['result'] = TRUE;
            $result['item_id'] = $data_item_load->item_id;
            return $result;
            break;
          }
      }
      break;
    }
    default:
      # code...
      break;
  }

  return  $result;
}

function edit_status_message(){

  /*
  if (empty($_REQUEST['uid']) || empty($_REQUEST['message'])) {
    $result['result'] = FALSE;
    return  $result;
  }

  $result = array();

  $user_fields = user_load($_REQUEST['uid']);
  // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL)['main'];
  $profile2_load_by_user->field_profile_status_message[LANGUAGE_NONE][0]['value'] = $_REQUEST['message'];
  profile2_save($profile2_load_by_user);


  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  // $uid_friends = array();
  $data = array();
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data_item_load = field_collection_item_load($value['value']);
    $data_update = array(
      "status_message" => $_REQUEST['message']
    );
  }

  $result['result'] = TRUE;
  $result['value'] = $_REQUEST['message'];

  return  $result;
  */

  $result = array();

  if (empty($_REQUEST['uid'] || empty($_REQUEST['message']))) {
    $result['result'] = FALSE;
    return $result;
  }

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');
  $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'] = $_REQUEST['message'];

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    /*
      จะได้ เพือนมาทั้งหมด
    */
    $data_item_load = field_collection_item_load($value['value']);

    // Load profile ของเพือนแต่ละคน เพื่อที่เราจะ update รูปของเราที่เป้นเพือนด้วย
    $fprofile = profile2_by_uid_load($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'], 'main');
    foreach ($fprofile->field_profile_friends[LANGUAGE_NONE] as $fkey => $fvalue) {
      $fdata_item_load = field_collection_item_load($fvalue['value']);

      /*
        เราต้องเช็ดว่า เพื่อนคนใหน uid ตรงกันเรา ถึงจะ update displayname
      */
      if($fdata_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_REQUEST['uid']){
        $wrapper = entity_metadata_wrapper('field_collection_item', $fdata_item_load);
            
        $wrapper->field_profile_status_message->set($_REQUEST['message']);
        $wrapper->save();

        break;
      }
    }
  }
  profile2_save($profile);

  $result['result'] = TRUE;
  return  $result;
}

function outgoing_call(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) || empty($param['uuid']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function outgoing_call : parameter";
    return $result;
  }

  $uid  = $param['uid'];
  $uuid = $param['uuid'];
  $data = $param['data'];

  $query    = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                ->entityCondition('bundle', 'field_twilio_outgoing_call')
                ->fieldCondition('field_twilio_room_uuid', 'value', $RoomName, '=')
                ->execute();

  if (!empty($entities['field_collection_item'])) {
    $item_id = array_keys($entities['field_collection_item'])[0];
    $data_item = field_collection_item_load($item_id);
  }

  $result['result'] = TRUE;
  return $result;
}

function outgoing_call2(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) || empty($param['item_id']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function incoming_call : parameter";
    return $result;
  }

  global $firebase;
  $uid      = $param['uid'];
  $item_id  = $param['item_id'];
  $data     = $param['data'];


  $data_item = field_collection_item_load($item_id);
  if ($data_item) {

    // เราต้องเช็กว่าค่านี้เป็น profile caller หรือไม่
    // $uid_caller = $data_item->hostEntity()->uid;

    if (isset($data_item->field_twilio_video_members)) {
      foreach ($data_item->field_twilio_video_members[LANGUAGE_NONE] as $key => $value) {
        $item_load = field_collection_item_load($value['value']);

        // field_twv_members_status

        if(strcasecmp($item_load->field_twv_members_status[LANGUAGE_NONE][0]['value'], "participant-disconnected") != 0){

          $friend_profile = profile2_by_uid_load($item_load->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'], 'main');

          // #1
          if(isset($friend_profile->field_device_access)){
            foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
              $item_load = field_collection_item_load($value['value']);
              
              //  เรา้ตองเพิ่มเช็กว่า udid != $device_id{เป็น เครื่องที่รับสาย} 
              
              if (strcasecmp($item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'], "") != 0 && strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], "1") == 0 && strcasecmp($item_load->field_udid[LANGUAGE_NONE][0]['value'], $device_id) != 0) {
                
                $pushkit_token  = $item_load->field_pushkit_token[LANGUAGE_NONE][0]['value'];
                $action         = 'cancel';
                $handle         = array(
                                  "room_name"     => $room_name
                                  );
                // apns_voip($pushkit_token, $action, $uuid, $friend_id_token, $handle, $has_video); 
                // apns_voip($pushkit_token, $action, $handle);
              }
            }
          }

        }
        
        /*
        if(strcasecmp($item_load->field_twv_members_friend_id[LANGUAGE_NONE][0]['value'], $uid) == 0){
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          if(strcasecmp($item_load->field_twilio_ic_device_id[LANGUAGE_NONE][0]['value'], $data["device_id"]) != 0){
            $wrapper->field_twilio_ic_device_id->set($data["device_id"]);
          }
          if(strcasecmp($item_load->field_twv_members_status[LANGUAGE_NONE][0]['value'], $data["status"]) != 0){
            $wrapper->field_twv_members_status->set($data["status"]);
          }
          $wrapper->save();


          // udpate firebase caller members
          $valus_update = array(
              "device_id"  => $data["device_id"],
              "status"     => $data["status"]
          );
          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid_caller . "/outgoing_call/" . $item_id . "/members/" . $value['value'], $valus_update);
          break;
        }
        */
      }
    }

    // $valus_update = array(
    //           "status"     => "room-ended"
    //       );
    // if (strcasecmp($data_item->field_twilio_room_type[LANGUAGE_NONE][0]['value'], "private") == 0) {
    //   $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid_caller . "/outgoing_call/" . $item_id , $valus_update);
    // }
  }


  $result['result'] = TRUE;
  // $result['param']  = $param;
  return  $result;
}

/*
  หลักการทำงาน
  จะถูกเรียก firebase cloud function โดยจะถูกเรียกหลังมีการรับสาย

  $uid : เป้นคนที่รับสาย โดยเราต้อง ดึงข้อมูลของ uid นี้ว่ามี device มี device อะไรบ้างเพือจะส่ง cancel voip โดยตรงไม่ใช่เครื่องที่มี device_id ตรงกับ $device_id{param} นอกนั้นเราจะส่ง voip ทั้งหมด

  **** เราต้องวิ่งไป update  ข้อมูลให้กับ Caller ในส่วนของ device_id ที่รับสาย


  step
  1. load ข้อมูล uid เพือ loop หา device_access เพือส่ง voip ไป cancel
  2. เราต้อง load ข้อมูล profile $uid เพือจะ update ข้อมูลของ incoming_call โดย field_twilio_ic_name == room_id และจะ update field_twilio_ic_device_id = $device_id
  3. query outgoing_call โดย field_twilio_room_name == room_id และจะ update field_twilio_ic_device_id = $device_id
  4. update ข้อมูล firebase ของ /idna/user/{caller_id}/outgoing_call/{room_id} {device_id = $device_id}
*/
function incoming_call(){
  $result = array();

  $result['result'] = TRUE;
  return $result;
}


/*
function set_my_id()
{
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['my_id'])) {
    $result['result'] = FALSE;
    return $result;
  }


  global $firebase;

  $uid = $_REQUEST['uid'];
  $my_id = $_REQUEST['my_id'];

  $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', 0, '!=')
        ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', $uid, '!=')
        ->execute()
        ->fetchCol();

  $mul_users =  user_load_multiple($uids);
  foreach ($mul_users as $account) {
    // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
    // $user_fields = user_load($account->uid);
    // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);
    // $profile =  profile2_load($profile2_load_by_user['main']->pid);

    $profile = profile2_by_uid_load($account->uid, 'main');
    $key = $profile->field_profile_heart_id[LANGUAGE_NONE][0]['value'];

    // เช็ดว่ามีคนตั้ง id นี้หรือเปล่า  ตัวใหญ่-เล้กมองเป้นตัวเดียวกัน
    if (strcasecmp($my_id, $key) == 0) {
      $result['result'] = FALSE;
      $result['message'] = "My ID Duplicate.";
      return  $result;
      break;
    }
  }
 
  # code...
  // $user_fields = user_load($_POST['uid']);
  // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
  // $profile2_load_by_user = profile2_load_by_user($user_fields, NULL)['main'];

  $profile2_load_by_user = profile2_by_uid_load($uid, 'main');
  $profile2_load_by_user->field_profile_heart_id[LANGUAGE_NONE][0]['value'] = $my_id;
  profile2_save($profile2_load_by_user);



  // Firebase : update image url profile
  $data_update = array(
      "my_id"  => $my_id
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/", $data_update);

  $result['result'] = TRUE;
 
  return  $result;
}
*/

function update_token_notication(){

  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['key']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_token_notication : parameter";
    return $result;
  }

  global $firebase;

  $key      = $param["key"];
  $data     = $param["data"];


  // https://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_load_multiple/7.x
  $udid     = $data['udid'];
  $token    = $data['token'];
  $platform = strtolower($data['platform']);

  $content_type = "token_notification";

  $query  = new EntityFieldQuery();
  $output = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->fieldCondition('field_platform', 'value', $platform, '=')
    ->propertyCondition('title', $udid, '=')
    ->execute();

  if (!empty($output['node'])) {
    $nids = array_keys($output['node']);
    foreach ($nids as $k => $nid) {
      $node = node_load($nid);
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_key_token_notification->set($token);
      $node_wrapper->save();
    }
  }else{

    $node = new stdClass();
    $node->title = $udid;
    $node->type  = $content_type;
    // $node->uid   = $_POST['uid'];
    $node->field_platform[LANGUAGE_NONE][0]['value']  = $platform;
    $node->field_key_token_notification[LANGUAGE_NONE][0]['value']    = $token;
    
    $node->language = LANGUAGE_NONE;
    // $node->revision = 0;
    $node->status   = 0;

    $node = node_submit($node);
    node_save($node);
  }

  $firebase->delete(FIREBASE_DEFAULT_PATH . "token_notification/" . $key);

  $result['result'] = TRUE;
  return  $result;
}

function login_with_social(){

  try {
    $result = array();
    $getallheaders = nginx_getallheaders();

    // if (array_key_exists("bundle_identifier", $getallheaders) && array_key_exists("platform", $getallheaders)) {
    //   $result['y']   = 'y';

    //   if ((strcasecmp($getallheaders["platform"], "ios") != 0) || (strcasecmp($getallheaders["platform"], "android") != 0) || (strcasecmp($getallheaders["platform"], "firebase") != 0))  {
    //     $result['z']   = 'z';
    //   }
    // }
    if (!check_header()) {
      $result['result']   = FALSE;
      $result['message']  = "check_header()";
      $result['header']   = $getallheaders;
      return $result;
    }

    if (empty($_REQUEST['type']) || empty($_REQUEST['data'])) {
      $result['result'] = FALSE;
      $result['message'] = "function login_with_social : parameter";
      return $result;
    }


    // $text_search = $_REQUEST['text_search'];
    $type = $_REQUEST['type'];
    $data = json_decode($_REQUEST['data']); // 

    switch ($type) {
      case 'facebook':
        {
          // $result['result']   = FALSE;
          //   $result['xx']  = $data->id;
          //   return $result;

          if (!property_exists($data, 'id')) {
            $result['result']   = FALSE;
            $result['message']  = "property_exists not id";
            return $result;
          }

          // เช็กว่ามี  user ที่มี email แล้วหรือไม
          if (user_load_by_mail($data->id . '@facebook') == "") {
            // add new user
            $new_user = array(
              'name' => generate_name_annmousu($data->id),
              'pass' => DEFUALT_PASSWORD, // note: do not md5 the password
              'mail' => $data->id . '@facebook',
              'status' => 1,
              'init' => $data->id . '@facebook',
              'roles' => array(
                DRUPAL_AUTHENTICATED_RID => 'authenticated user'
              ),
            );

            // The first parameter is sent blank so a new user is created.
            user_save('', $new_user); 
          }


          $user = user_load_by_mail($data->id . '@facebook');

          /** update profile **/
          $profile = profile2_by_uid_load($user->uid, 'main');
          $profile->field_profile_name[LANGUAGE_NONE][0]['value'] = $data->name;
          $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'] = $data->name;

          
          if (property_exists($data, 'picture')) {
            // $result['url'] =  $data->picture->data->url;

            // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
            $binary =  file_get_contents($data->picture->data->url);//base64_decode($image);

            //Create the directory if it does not already exist, otherwise check the permissions
            $directory = 'public://';
            file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

            $currentDate = date("Ymd");
            $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
            
            //Saves a file to the specified destination and creates a database entry.
            $image_url = (array)klovers_file_save_data($user->uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);
            
            // save รูป profile
            $profile->field_profile_image[LANGUAGE_NONE][0] = $image_url;
          }

          profile2_save($profile);

          /** update profile **/
          
          module_load_include('inc', 'services', 'resources/user_resource');

          $result['result']   = TRUE;
          $result['data'] = onLoadDataUser(_user_resource_login(generate_name_annmousu($data->id), DEFUALT_PASSWORD));

          return $result;

        }
        break;


      case 'google':
        {

          if (!property_exists($data, 'id')) {
            $result['result']   = FALSE;
            $result['message']  = "property_exists not id";
            return $result;
          }

          // เช็กว่ามี  user ที่มี email แล้วหรือไม
          if (user_load_by_mail($data->id . '@google') == "") {
            // add new user
            $new_user = array(
              'name' => generate_name_annmousu($data->id),
              'pass' => DEFUALT_PASSWORD, // note: do not md5 the password
              'mail' => $data->id . '@google',
              'status' => 1,
              'init' => $data->id . '@google',
              'roles' => array(
                DRUPAL_AUTHENTICATED_RID => 'authenticated user'
              ),
            );

            // The first parameter is sent blank so a new user is created.
            user_save('', $new_user); 
          }



          $user = user_load_by_mail($data->id . '@google');

          /** update profile **/
          $profile = profile2_by_uid_load($user->uid, 'main');
          $profile->field_profile_name[LANGUAGE_NONE][0]['value'] = $data->name;
          $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'] = $data->name;

          
          if (property_exists($data, 'url')) {
            // $result['url'] =  $data->picture->data->url;

            // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
            $binary =  file_get_contents($data->url);//base64_decode($image);

            //Create the directory if it does not already exist, otherwise check the permissions
            $directory = 'public://';
            file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

            $currentDate = date("Ymd");
            $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
            
            //Saves a file to the specified destination and creates a database entry.
            $image_url = (array)klovers_file_save_data($user->uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);
            
            // save รูป profile
            $profile->field_profile_image[LANGUAGE_NONE][0] = $image_url;
          }

          profile2_save($profile);

          /** update profile **/



          
          module_load_include('inc', 'services', 'resources/user_resource');

          $result['result']   = TRUE;
          $result['data'] = onLoadDataUser(_user_resource_login(generate_name_annmousu($data->id), DEFUALT_PASSWORD));

          return $result;
          
        }
        break;


      case 'line':
        {
          if (!property_exists($data, 'id')) {
            $result['result']   = FALSE;
            $result['message']  = "property_exists not id";
            return $result;
          }

          // เช็กว่ามี  user ที่มี email แล้วหรือไม
          if (user_load_by_mail($data->id . '@line') == "") {
          // if (user_load_by_mail($data->id . '@line') == "") {
            // add new user
            $new_user = array(
              'name' => generate_name_annmousu($data->id),
              'pass' => DEFUALT_PASSWORD, // note: do not md5 the password
              'mail' => $data->id . '@line',
              'status' => 1,
              'init' => $data->id . '@line',
              'roles' => array(
                DRUPAL_AUTHENTICATED_RID => 'authenticated user'
              ),
            );

            // The first parameter is sent blank so a new user is created.
            user_save('', $new_user); 
          }


          $user = user_load_by_mail($data->id . '@line');

          /** update profile **/
          $profile = profile2_by_uid_load($user->uid, 'main');
          $profile->field_profile_name[LANGUAGE_NONE][0]['value'] = $data->name;
          $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'] = $data->name;

          
          if (property_exists($data, 'url')) {
            // $result['url'] =  $data->picture->data->url;

            // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
            $binary =  file_get_contents($data->url);//base64_decode($image);

            //Create the directory if it does not already exist, otherwise check the permissions
            $directory = 'public://';
            file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

            $currentDate = date("Ymd");
            $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
            
            //Saves a file to the specified destination and creates a database entry.
            $image_url = (array)klovers_file_save_data($user->uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);
            
            // save รูป profile
            $profile->field_profile_image[LANGUAGE_NONE][0] = $image_url;
          }

          profile2_save($profile);
          /** update profile **/


          
          module_load_include('inc', 'services', 'resources/user_resource');

          $result['result']   = TRUE;
          $result['data'] = onLoadDataUser(_user_resource_login(generate_name_annmousu($data->id), DEFUALT_PASSWORD));

          return $result;
        }
        break;

      case 'instagram':
        {

          
        }
        break;
      
      default:
        # code...
        break;
    }

    $result['result'] = TRUE;
    $result['type']   = $type;
    $result['data']   = $data;
    return  $result;
  } catch (Exception $e) {
    // echo 'Caught exception: ',  $e->getMessage(), "\n";

    $result['result'] = FALSE;
    $result['Exception']   = $e->getMessage();
    return  $result;
  }

}

function search_application(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['text_search'])) {
    $result['result'] = FALSE;
    $result['message'] = "function search_application : parameter";
    return $result;
  }

  $text_search = $_REQUEST['text_search'];

  $content_type = "application";

  
  $query  = new EntityFieldQuery();
  $values = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    // ->fieldCondition('title', 'value', 'value','%'. $text_search .'%', 'LIKE')
    //->propertyCondition('title', $udid, '=')
    ->propertyCondition('title', '%'. $text_search .'%', 'like')
    ->propertyCondition('status', 1)
    ->execute();

  $data = array();
  if (!empty($values['node'])) {
    $nids = array_keys($values['node']);
    
    foreach ($nids as $key => $nid) {
      $node = node_load($nid);

      $image_uri = "";
      if (isset($node->field_my_app_picture[LANGUAGE_NONE])) {
        $image_uri = substr(file_create_url(image_style_url('medium', $node->field_my_app_picture[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
      }

      $owner_profile = profile2_by_uid_load($node->uid, 'main');

      $data[] = array("node_id"=>$nid, "name"=>$node->title, "owner_id"=>$node->uid, "owner_name"=>$owner_profile->field_profile_name[LANGUAGE_NONE][0]['value'], "image_uri"=>$image_uri, "category"=>$node->field_my_app_category[LANGUAGE_NONE][0]['tid']);
    }
  }

  $result['result']   = TRUE;
  $result['data']     = $data;
  return  $result;
}

function center_create_chat(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['friend_id']) || empty($_REQUEST['app_id'])) {
    $result['result'] = FALSE;
    $result['message'] = "function center_create_chat : parameter";
    return $result;
  }

  global $firebase;
  $app_id     = $_REQUEST['app_id'];
  $friend_id  = $_REQUEST['friend_id'];   // คือ user id ที่ต้องการติดต่อเข้ามาหรือ สอบถามรายละเอียด

  $node     = node_load($app_id); 
  $owner_id = $node->uid;

  if (!$node) {
    // เกดิจากกรณี node id นี้โดนลบไปแล้ว ซึ้งเกิดจากบางกรณีเราต้องทำการ เช็กเพิ่ม
    $result['result'] = FALSE;
    $result['message'] = "function  : error : nid= ". $app_id .", เกดิจากกรณี node id นี้โดนลบไปแล้ว ซึ้งเกิดจากบางกรณีเราต้องทำการ เช็กเพิ่ม ";
    return $result;
  } 

  $friend_profile = profile2_by_uid_load($friend_id, 'main');

  /*
  #1
  เช็ดว่าเพือนคนนี้เคย chat กับ application id แล้วหรือยัง
  */
  $is_friend_chat = false;
  // $item_id_friend_chat;
  if(isset($friend_profile->field_my_app_chat[LANGUAGE_NONE])){
    foreach ($friend_profile->field_my_app_chat[LANGUAGE_NONE] as $k_my_app_chat => $v_my_app_chat) {
      $item_load_my_app_chat = field_collection_item_load($v_my_app_chat['value']);

      if (strcmp($item_load_my_app_chat->field_application_id[LANGUAGE_NONE][0]['value'], $app_id) == 0) {
        $is_friend_chat = true;
        // $item_id_friend_chat = $v_my_app_chat['value'];
        break;
      }
    }
  }

  $owner_profile  = profile2_by_uid_load($owner_id, 'main');
  $is_owner_chat = false;
  // $item_id_owner_chat;
  if(isset($owner_profile->field_my_app_chat[LANGUAGE_NONE])){
    foreach ($owner_profile->field_my_app_chat[LANGUAGE_NONE] as $k_my_app_chat => $v_my_app_chat) {
      $item_load_my_app_chat = field_collection_item_load($v_my_app_chat['value']);

      if ((strcmp($item_load_my_app_chat->field_application_id[LANGUAGE_NONE][0]['value'], $app_id) == 0) && 
          (strcmp($item_load_my_app_chat->field_friend_uid[LANGUAGE_NONE][0]['value'], $friend_id) == 0)) {
        $is_owner_chat = true;
        // $item_id_owner_chat = $v_my_app_chat['value'];
        break;
      }
    }
  }

  // if (!($is_friend_chat && $is_owner_chat)) {
  //   $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/' . FIREBASE_CENTER_CHAT  .  $item_id_friend_chat);
  //   $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $owner_id . '/' . FIREBASE_CENTER_CHAT  .  $is_owner_chat);

  //   // entity_delete_multiple('field_collection_item', array($item_id_friend_chat, $item_id_owner_chat));

  //   $is_friend_chat = false;
  //   $is_owner_chat = false;    
  // }


  $application_name = $node->title;//$node->field_my_app_name[LANGUAGE_NONE][0]['value'];
  // รูปของ application ที่เรากดคุยด้วย
  $application_image_url = substr(file_create_url(image_style_url('medium', $node->field_my_app_picture[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));


  $chat_id = generateRandomString(LENGTH_CHAT_ID);
  if (!$is_friend_chat) {
    //  แสดงว่า friend id นี้ไม่เคยคุยกับ application id นี้เลย

    $my_app_chat_values = array();
    $my_app_chat_values['field_name'] = 'field_my_app_chat'; 

    $my_app_chat_values['field_application_id'][LANGUAGE_NONE][0]['value']           = $app_id;   // application id
    $my_app_chat_values['field_owner_id'][LANGUAGE_NONE][0]['value']                 = $owner_id; // user id ของเจ้าของ application
    $my_app_chat_values['field_profile_friends_chat_id'][LANGUAGE_NONE][0]['value']  = $chat_id;  
    $my_app_chat_values['field_friend_uid'][LANGUAGE_NONE][0]['value']               = $friend_id;

    $entity_friend = entity_create('field_collection_item', $my_app_chat_values);
    $entity_friend->setHostEntity('profile2', $friend_profile);
    $entity_friend->save();





    $friend_name = $friend_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

    $friend_image_url = '';
    if (!empty($friend_profile->field_profile_image[LANGUAGE_NONE])) {
      $friend_image_url = substr(file_create_url(image_style_url('medium', $friend_profile->field_profile_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
    }
    
    $v = array(
                "app_id"          => $app_id,
                "owner_id"        => $owner_id,
                "chat_id"         => $chat_id,
                "name"            => $application_name,
                "image_url"       => $application_image_url,

                "friend_id"       => $friend_id,
                "friend_name"     => $friend_name,
                "friend_image_url"=> $friend_image_url,
              );

    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/' . FIREBASE_CENTER_CHAT  . $entity_friend->item_id . "/", $v);

    $result['data']   = $v;
  }


  /*
  #2
  เราต้อง chat ว่า ower_id นี้เคยคุยกัน friend_id นี้หรือเปล่า
  */
  
  if (!$is_owner_chat) {
    //  แสดงว่า friend id นี้ไม่เคยคุยกับ application id นี้เลย
    // $chat_id = generateRandomString(LENGTH_CHAT_ID);

    $my_app_chat_values = array();
    $my_app_chat_values['field_name'] = 'field_my_app_chat'; 

    $my_app_chat_values['field_application_id'][LANGUAGE_NONE][0]['value']           = $app_id;   // application id
    $my_app_chat_values['field_owner_id'][LANGUAGE_NONE][0]['value']                 = $owner_id; // user id ของเจ้าของ application
    $my_app_chat_values['field_profile_friends_chat_id'][LANGUAGE_NONE][0]['value']  = $chat_id;  
    $my_app_chat_values['field_friend_uid'][LANGUAGE_NONE][0]['value']               = $friend_id;

    $entity_friend = entity_create('field_collection_item', $my_app_chat_values);
    $entity_friend->setHostEntity('profile2', $owner_profile);
    $entity_friend->save();


    $friend_name = $friend_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

    $friend_image_url = '';
    if (!empty($friend_profile->field_profile_image[LANGUAGE_NONE])) {
      $friend_image_url = substr(file_create_url(image_style_url('medium', $friend_profile->field_profile_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
    }
    
    $v = array(
                "app_id"          => $app_id,
                "owner_id"        => $owner_id,
                "chat_id"         => $chat_id,
                "name"            => $application_name,
                "image_url"       => $application_image_url,

                "friend_id"       => $friend_id,
                "friend_name"     => $friend_name,
                "friend_image_url"=> $friend_image_url,
              );

    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $owner_id . '/' . FIREBASE_CENTER_CHAT  . $entity_friend->item_id . "/", $v);
  }

  $result['result']   = TRUE;
  $result['_REQUEST'] = $_REQUEST;
  return  $result;
}

function center_get_detail_application(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['app_id'])) {
    $result['result'] = FALSE;
    $result['message'] = "function center_get_detail_application : parameter";
    return $result;
  }
  global $firebase;
  $uid    = $_REQUEST['uid'];
  $app_id = $_REQUEST['app_id'];

  $time_start     = microtime(true);

  $node    = node_load($app_id);  

  $profile = profile2_by_uid_load($node->uid, 'main');

  $name       = $node->title;//$node->field_my_app_name[LANGUAGE_NONE][0]['value'];
  $category   = $node->field_my_app_category[LANGUAGE_NONE][0]['tid'];
  $subcategory= $node->field_my_app_subcategoty[LANGUAGE_NONE][0]['tid'];
  $owner_id   = $node->uid;

  // $result['data']   = array('item_id'     =>$app_id, 
  //                           'name'        =>$name,
  //                           'owner_id'    =>$owner_id,
  //                           'category'    =>$category,
  //                           'subcategory' =>$subcategory,
  //                           );

  // return $result;

  $owner_name = $profile->field_profile_name[LANGUAGE_NONE][0]['value'];
  if (isset($profile->field_profile_display_name[LANGUAGE_NONE])) {
    $owner_name = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
  }
  
  $image_url  = "";
  if (isset($node->field_my_app_picture[LANGUAGE_NONE])) {
    $image_url = substr(file_create_url(image_style_url('medium', $node->field_my_app_picture[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
  }

  $emails = array();
  if (isset($node->field_my_app_multi_email[LANGUAGE_NONE])) {
    # code...
    foreach ($node->field_my_app_multi_email[LANGUAGE_NONE] as $k_email => $v_email) {
      $email_items = field_collection_item_load($v_email['value']);

      $email_items_object_id  = $email_items->field_object_id[LANGUAGE_NONE][0]['value'];
      $email_items_item_id    = $email_items->field_item_id[LANGUAGE_NONE][0]['value'];
      $email_items_name       = $email_items->field_email_text[LANGUAGE_NONE][0]['value'];
      $email_items_enabled    = $email_items->field_enable[LANGUAGE_NONE][0]['value'];

      $emails[$email_items_object_id] = array("item_id"=>$email_items_item_id, "name"=>$email_items_name, "enabled"=>$email_items_enabled);
    }
  }
  $result['mails'] = (object)$emails;

  $phones = array();
  if (isset($node->field_my_app_multi_phone[LANGUAGE_NONE])) {
    # code...
    foreach ($node->field_my_app_multi_phone[LANGUAGE_NONE] as $k_phone => $v_phone) {
      $phone_items = field_collection_item_load($v_phone['value']);

      $phone_items_object_id  = $phone_items->field_object_id[LANGUAGE_NONE][0]['value'];
      $phone_items_item_id    = $phone_items->field_item_id[LANGUAGE_NONE][0]['value'];
      $phone_items_name       = $phone_items->field_phone_number[LANGUAGE_NONE][0]['value'];
      $phone_items_enabled    = $phone_items->field_enable[LANGUAGE_NONE][0]['value'];

      $phones[$phone_items_object_id] = array("item_id"=>$phone_items_item_id, "name"=>$phone_items_name, "enabled"=>$phone_items_enabled);
    }
  }
  $result['phones'] = (object)$phones;

  $follower = array();
  if(isset($node->field_my_app_follower[LANGUAGE_NONE])){
    foreach ($node->field_my_app_follower[LANGUAGE_NONE] as $k_follow => $v_follow) {
      $item_follower = field_collection_item_load($v_follow['value']);
      
      $item_follow_object_id   = $item_follower->field_my_app_follower_object_id[LANGUAGE_NONE][0]['value'];
      $item_follow_uid_follower= $item_follower->field_my_app_uid_follower[LANGUAGE_NONE][0]['value'];
      $item_follow_app_name    = $item_follower->field_my_app_name[LANGUAGE_NONE][0]['value'];
      $item_follow_image_url   = $item_follower->field_path_uri[LANGUAGE_NONE][0]['value'];
      $item_status_following   = $item_follower->field_status_following[LANGUAGE_NONE][0]['value'];

      $follower[$item_follow_object_id] = array("image_url" =>$item_follow_image_url, 
                                                "name"      =>$item_follow_app_name, 
                                                "status"    =>$item_status_following, 
                                                "uid"       =>$item_follow_uid_follower);
    }
  }

  $result['follower']  = (object)$follower;

  $posts = array();
  if(isset($node->field_my_app_update)){
    if (!empty($node->field_my_app_update[LANGUAGE_NONE])) {
      foreach ($node->field_my_app_update[LANGUAGE_NONE] as $pkey => $pvalue) {

          $pitems = field_collection_item_load($pvalue['value']);
          // $posts[$pvalue['value']]["title"]    = $pitems->title;
          $posts[$pvalue['value']]["message"]  = $pitems->field_my_app_message_update[LANGUAGE_NONE][0]['value'];
          // $posts[$pvalue['value']]['picture']  = file_load($pitems->field_image[LANGUAGE_NONE][0]['fid']);

          // category
          
          // field_multi_image
          $images = array();
          if(isset($pitems->field_multi_image[LANGUAGE_NONE])){
            foreach ($pitems->field_multi_image[LANGUAGE_NONE] as $k_image => $v_image) {
                $item_image = field_collection_item_load($v_image['value']);

                $uri = $item_image->field_image[LANGUAGE_NONE][0]['uri'];

                $thumbnail_uri  = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
                $original_uri   = substr(file_create_url($uri), strlen($GLOBALS['base_url']));
                

                $images[$v_image['value']] = array("thumbnail_uri"=>$thumbnail_uri, "original_uri"=>$original_uri);
            }
          }

          $posts[$pvalue['value']]["images"]  =  (object)$images;


          // field_my_app_update_comment
          $comments = array();
          if(isset($pitems->field_my_app_update_comment[LANGUAGE_NONE])){
            // $posts[$pvalue['value']]["comments"]  =  (string)count($pitems->field_my_app_update_comment[LANGUAGE_NONE]);

            foreach ($pitems->field_my_app_update_comment[LANGUAGE_NONE] as $k_comment => $v_comment) {
                $item_comment = field_collection_item_load($v_comment['value']);

                // $posts[$pvalue['value']]["commentsx"][] = $v_comment['value'];

                $item_comment_uid   = $item_comment->field_friend_uid[LANGUAGE_NONE][0]['value'];
                $item_comment_name  = $item_comment->field_friend_name[LANGUAGE_NONE][0]['value'];
                $item_comment_text  = $item_comment->field_comment_message[LANGUAGE_NONE][0]['value'];

                $thumbnail_uri_comment  = "";
                $original_uri_comment   = "";
                if (isset($item_comment->field_image[LANGUAGE_NONE])) {
                  $uri_comment = $item_comment->field_image[LANGUAGE_NONE][0]['uri'];

                  $original_uri_comment  = substr(file_create_url($uri_comment), strlen($GLOBALS['base_url']));
                  $thumbnail_uri_comment = substr(file_create_url(image_style_url('medium', $uri_comment)), strlen($GLOBALS['base_url']));
                }

                $reply_comments = array();
                if(isset($item_comment->field_reply_comment[LANGUAGE_NONE])){
                  
                  foreach ($item_comment->field_reply_comment[LANGUAGE_NONE] as $k_reply_comment => $v_reply_comment) {
                    $item_reply_comment = field_collection_item_load($v_reply_comment['value']);
 
                    $item_reply_comment_text   = $item_reply_comment->field_reply_message[LANGUAGE_NONE][0]['value'];
                    $item_reply_comment_uid    = $item_reply_comment->field_friend_uid[LANGUAGE_NONE][0]['value'];
                    $item_reply_comment_name   = $item_reply_comment->field_friend_name[LANGUAGE_NONE][0]['value'];

                    // field_image
                    $thumbnail_uri_reply_comment  = "";
                    $original_uri_reply_comment   = "";
                    if (isset($item_reply_comment->field_image[LANGUAGE_NONE])) {
                      $uri_reply_comment = $item_reply_comment->field_image[LANGUAGE_NONE][0]['uri'];

                      $original_uri_reply_comment  = substr(file_create_url($uri_reply_comment), strlen($GLOBALS['base_url']));
                      $thumbnail_uri_reply_comment = substr(file_create_url(image_style_url('medium', $uri_reply_comment)), strlen($GLOBALS['base_url']));
                    }

                    $reply_likes = array();
                    if (isset($item_reply_comment->field_reply_like[LANGUAGE_NONE])) {
                      
                      foreach ($item_reply_comment->field_reply_like[LANGUAGE_NONE] as $k_reply_like => $v_reply_like) {
                        $item_reply_like = field_collection_item_load($v_reply_like['value']);

                        $item_reply_like_uid        = $item_reply_like->field_friend_uid[LANGUAGE_NONE][0]['value'];
                        $item_reply_like_object_id  = $item_reply_like->field_object_id[LANGUAGE_NONE][0]['value'];
                        $item_reply_like_status     = $item_reply_like->field_status_following[LANGUAGE_NONE][0]['value'];

                        $reply_likes[$item_reply_like_object_id] = array("uid"=>$item_reply_like_uid, 
                                                                         "status"=>$item_reply_like_status);
                      }
                    }

                    $reply_creator = array(); // field_creator
                    if(isset($item_reply_comment->field_creator[LANGUAGE_NONE])){
                      foreach ($item_reply_comment->field_creator[LANGUAGE_NONE] as $k_reply_creator => $v_reply_creator) {
                          $item_reply_comment = field_collection_item_load($v_reply_creator['value']);

                          $item_reply_comment_user_id  = $item_reply_comment->field_creator_uid[LANGUAGE_NONE][0]['value'];
        
                          $item_reply_comment_name     = $item_reply_comment->field_creator_name[LANGUAGE_NONE][0]['value'];
                          $item_reply_comment_image_url= $item_reply_comment->field_creator_image_uri[LANGUAGE_NONE][0]['value'];
                          
                          $item_reply_comment_create   = $item_reply_comment->field_creator_time_create[LANGUAGE_NONE][0]['value'];
                          $item_reply_comment_update   = $item_reply_comment->field_creator_time_update[LANGUAGE_NONE][0]['value'];

                          $reply_creator = array("user_id"   => $item_reply_comment_user_id,
                                           "name"      => $item_reply_comment_name, 
                                           "image_url" => $item_reply_comment_image_url, 
                                           "create"    => $item_reply_comment_create,
                                           "update"    => $item_reply_comment_update);
                      }
                    }

                    $reply_comments[$v_reply_comment['value']] = array( "name"  =>$item_reply_comment_name,
                                                                        "uid"   =>$item_reply_comment_uid,
                                                                        "text"  =>$item_reply_comment_text,
                                                                        "original_uri" => $original_uri_reply_comment,
                                                                        "thumbnail_uri" => $thumbnail_uri_reply_comment,
                                                                        "creator"=>(object)$reply_creator,
                                                                        "likes"  =>(object)$reply_likes);
                  }
                  
                }else{
                  // $reply_comments[$v_comment['value']]  =  '2x';
                }

                $comment_creator = array(); // field_creator
                if(isset($pitems->field_creator[LANGUAGE_NONE])){
                  foreach ($pitems->field_creator[LANGUAGE_NONE] as $k_comment_creator => $v_comment_creator) {
                      $item_comment_creator = field_collection_item_load($v_comment_creator['value']);

                      $item_comment_creator_user_id  = $item_comment_creator->field_creator_uid[LANGUAGE_NONE][0]['value'];
                      
                      $item_comment_creator_name     = $item_comment_creator->field_creator_name[LANGUAGE_NONE][0]['value'];
                      $item_comment_creator_image_url= $item_comment_creator->field_creator_image_uri[LANGUAGE_NONE][0]['value'];
                      
                      $item_comment_creator_create   = $item_comment_creator->field_creator_time_create[LANGUAGE_NONE][0]['value'];
                      $item_comment_creator_update   = $item_comment_creator->field_creator_time_update[LANGUAGE_NONE][0]['value'];

                      $comment_creator = array("user_id"   => $item_comment_creator_user_id,
                                       "name"      => $item_comment_creator_name, 
                                       "image_url" => $item_comment_creator_image_url, 
                                       "create"    => $item_comment_creator_create,
                                       "update"    => $item_comment_creator_update);
                  }
                }

                $comments[$v_comment['value']] = array("uid"=>$item_comment_uid, 
                                                       "name"=>$item_comment_name, 
                                                       "text"=>$item_comment_text,
                                                       "thumbnail_uri"=>$thumbnail_uri_comment,
                                                       "original_uri" =>$original_uri_comment,
                                                       "creator"=>(object)$comment_creator,
                                                       "replys"=>(object)$reply_comments);
            }

            $posts[$pvalue['value']]["comments"] = (object)$comments;
          }else{
            $posts[$pvalue['value']]["comments"] = (object)$comments;
          }

          // 

          // likes

          $likes = array();
          if(isset($pitems->field_my_app_post_like[LANGUAGE_NONE])){
            // $posts[$pvalue['value']]["likes"]  =  (string)count($pitems->field_my_app_post_like[LANGUAGE_NONE]);

            foreach ($pitems->field_my_app_post_like[LANGUAGE_NONE] as $k_like => $v_like) {
                $item_like = field_collection_item_load($v_like['value']);

                $object_id = $item_like->field_object_id[LANGUAGE_NONE][0]['value'];

                /*
                image_url: 
                "/sites/default/files/styles/medium/public/20180..."
                name: 
                "iPhone 7+"
                status: 
                "1"
                uid: 
                "548594"

                */

                $likes[$object_id] = array("uid"   => $item_like->field_friend_uid[LANGUAGE_NONE][0]['value'], 
                                           "name"  => $item_like->field_friend_name[LANGUAGE_NONE][0]['value'], 
                                           "image_url"  => $item_like->field_path_uri[LANGUAGE_NONE][0]['value'], 
                                           "status"=> $item_like->field_status_following[LANGUAGE_NONE][0]['value']);
            }

            $posts[$pvalue['value']]["likes"] = (object)$likes;
          }else{
            $posts[$pvalue['value']]["likes"] = (object)$likes;
          }

          /*
          $comments =array();
          
          if(isset($pitems->field_my_app_update_comment)){
            if (!empty($pitems->field_my_app_update_comment[LANGUAGE_NONE])) {
              foreach ($pitems->field_my_app_update_comment[LANGUAGE_NONE] as $ckey => $cvalue) {
                  $citems = field_collection_item_load($cvalue['value']);

                  $comments[$cvalue['value']]['message'] = $citems->field_comment_message[LANGUAGE_NONE][0]['value'];
              }
            }
          }
          
          $posts[$pvalue['value']]['comments']  = $comments;
          */

          $post_creator = array(); // field_creator
          if(isset($pitems->field_creator[LANGUAGE_NONE])){
            foreach ($pitems->field_creator[LANGUAGE_NONE] as $k_post_creator => $v_post_creator) {
                $item_post_creator = field_collection_item_load($v_post_creator['value']);

                $item_post_creator_user_id  = $item_post_creator->field_creator_uid[LANGUAGE_NONE][0]['value'];

                $item_post_creator_name     = $item_post_creator->field_creator_name[LANGUAGE_NONE][0]['value'];
                $item_post_creator_image_url= $item_post_creator->field_creator_image_uri[LANGUAGE_NONE][0]['value'];
                
                $item_post_creator_create   = $item_post_creator->field_creator_time_create[LANGUAGE_NONE][0]['value'];
                $item_post_creator_update   = $item_post_creator->field_creator_time_update[LANGUAGE_NONE][0]['value'];

                $post_creator = array("user_id"   => $item_post_creator_user_id,
                                 "name"      => $item_post_creator_name, 
                                 "image_url" => $item_post_creator_image_url, 
                                 "create"    => $item_post_creator_create,
                                 "update"    => $item_post_creator_update);
            }

            $posts[$pvalue['value']]["creator"] = (object)$post_creator;
          }else{
            $posts[$pvalue['value']]["creator"] = (object)$post_creator;
          }
      }
    }
  }

  $result['posts']  = (object)$posts;


  $result['result'] = TRUE;
  $result['data']   = array('item_id'     =>$app_id, 
                            'name'        =>$name, 
                            'owner_id'    =>$owner_id,
                            'owner_name'  =>$owner_name,
                            'category'    =>$category, 
                            'subcategory' =>$subcategory, 
                            'image_url'   =>$image_url,
                            'phones'      =>(object)$phones, 
                            'mails'       =>(object)$emails, 
                            'posts'       =>(object)$posts, 
                            'follower'    =>(object)$follower, );

  $time_end       = microtime(true);
  $execution_time = number_format(($time_end - $time_start), 2);
  $result['execution_time']  = $execution_time;

  return  $result;
}

function update_token_pushkit(){

  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['key']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_token_pushkit : parameter";
    return $result;
  }

  global $firebase;

  $key      = $param["key"];
  $data     = $param["data"];


  // https://api.drupal.org/api/drupal/modules%21node%21node.module/function/node_load_multiple/7.x
  $udid     = $data['udid'];
  $token    = $data['token'];
  $platform = strtolower($data['platform']);

  $content_type = "pushkit_token";

  $query  = new EntityFieldQuery();
  $output = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->fieldCondition('field_platform', 'value', $platform, '=')
    ->propertyCondition('title', $udid, '=')
    ->execute();

  if (!empty($output['node'])) {
    $nids = array_keys($output['node']);
    foreach ($nids as $k => $nid) {
      $node = node_load($nid);
      $node_wrapper = entity_metadata_wrapper('node', $node);
      $node_wrapper->field_pushkit_token->set($token);
      $node_wrapper->save();
    }
  }else{

    $node = new stdClass();
    $node->title = $udid;
    $node->type  = $content_type;
    // $node->uid   = $_POST['uid'];
    $node->field_platform[LANGUAGE_NONE][0]['value']  = $platform;
    $node->field_pushkit_token[LANGUAGE_NONE][0]['value']    = $token;
    
    $node->language = LANGUAGE_NONE;
    // $node->revision = 0;
    $node->status   = 0;

    $node = node_submit($node);
    node_save($node);
  }

  $firebase->delete(FIREBASE_DEFAULT_PATH . "token_pushkit/" . $key);

  $result['result'] = TRUE;
  return  $result;
}

function update_device_access(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);

  if (empty($param['item_id']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_device_access : parameter";
    return $result;
  }

  global $firebase;

  $item_id  = $param["item_id"];
  $data     = $param["data"];

  $item_load = field_collection_item_load($item_id);
  $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
    
  //Check & Update value
  if(strcasecmp($item_load->field_is_login[LANGUAGE_NONE][0]['value'], $data['is_login']) != 0){
    $wrapper->field_is_login->set($data['is_login']);
  }

  if(strcasecmp($item_load->field_online[LANGUAGE_NONE][0]['value'], $data['online']) != 0){
    $wrapper->field_online->set($data['online']);
  }

  $wrapper->save();
  
  $result['result'] = TRUE;
  return  $result;
}


function get_profiles(){
  $result = array();
  if (empty($_REQUEST['uid']) || empty($_REQUEST['uids'])) {
    $result['result'] = FALSE;
    return  $result;
  }

  $data = array();
  foreach ($_REQUEST['uids'] as $account) {
    $profile = profile2_by_uid_load($account, 'main');
    
    $item = array();
    $item['name']           = $profile->field_profile_name[LANGUAGE_NONE][0]['value'];
    $item['status_message'] = $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'];// 
    $item['picture']        = file_load($profile->field_profile_image[LANGUAGE_NONE][0]['fid']);
    $data[] = $item;
  }

  $result['result']     = TRUE;
  $result['data']  = $data;
  return  $result;
}

function get_store(){
  $result = array();

  $uids = db_select('users', 'ur')
      ->fields('ur', array('uid'))
      // ->condition('ur.uid', $uid, '!=')
      // ->condition('ur.uid', 0, '!=')
      // ->condition('ur.uid', 1, '!=')
      ->condition('ur.uid', 0, '!=')
      ->condition('ur.uid', 1, '!=')
      ->execute()
      ->fetchCol();

  $mul_users =  user_load_multiple($uids);

  $data = array();
  foreach ($mul_users as $account) {

    $profile = profile2_by_uid_load($account->uid, 'main');
    foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
      $item             = array();
      $item["owner_id"] = $account->uid;
      $item["item"]     = field_collection_item_load($value['value']);
      $data[]           = $item;
    }
  }

  // ดึง slide
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'slide_store')
    ->execute();  

  $nodes = node_load_multiple(array_keys($entities['node']));  

  $slides = array();
  foreach ($nodes as $node) {
    $slides[] = file_load($node->field_image[LANGUAGE_NONE][0]['fid']);
  } 

  $result['result'] = TRUE;
  $result['data']   = $data;
  $result['slides'] = $slides;
  return  $result;
}

function get_app_detail(){
  $result = array();

  if (empty($_REQUEST['item_id'])) {
    $result['result'] = FALSE;
    return  $result;
  }

  $items = field_collection_item_load($_REQUEST['item_id']);

  $item = array();
  $item['item_id']        = $_REQUEST['item_id'];
  $item['name']           = $items->field_my_app_name[LANGUAGE_NONE][0]['value'];
  $item['category']       = $items->field_my_app_category[LANGUAGE_NONE][0]['tid'];
  $item['picture']        = file_load($items->field_image[LANGUAGE_NONE][0]['fid']);

  /* field_my_app_update */
  $posts = array();
  if(isset($items->field_my_app_update)){
    if (!empty($items->field_my_app_update[LANGUAGE_NONE])) {
      foreach ($items->field_my_app_update[LANGUAGE_NONE] as $pkey => $pvalue) {

          $pitems = field_collection_item_load($pvalue['value']);
          $posts[$pvalue['value']]["title"]    = $pitems->field_my_app_title[LANGUAGE_NONE][0]['value'];
          $posts[$pvalue['value']]["message"]  = $pitems->field_my_app_message_udate[LANGUAGE_NONE][0]['value'];
          $posts[$pvalue['value']]['picture']  = file_load($pitems->field_image[LANGUAGE_NONE][0]['fid']);

          
          $comments =array();
          
          if(isset($pitems->field_my_app_update_comment)){
            if (!empty($pitems->field_my_app_update_comment[LANGUAGE_NONE])) {
              foreach ($pitems->field_my_app_update_comment[LANGUAGE_NONE] as $ckey => $cvalue) {
                  $citems = field_collection_item_load($cvalue['value']);

                  $comments[$cvalue['value']]['message'] = $citems->field_comment_message[LANGUAGE_NONE][0]['value'];
              }
            }
          }
          
          $posts[$pvalue['value']]['comments']  = $comments;
      }
    }
  }

  $item['posts']  = $posts;


  $result['result'] = TRUE;
  $result['data']   = $item;

  return  $result;
}

/*
 $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['item_id'])) {
    $result['result'] = FALSE;
    $result['message'] = "function force_logout : parameter";
    return $result;
  }

  global $firebase;
  $uid     = $_REQUEST['uid'];
  $item_id = $_REQUEST['item_id']; 
*/

function user_forgot_password(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['mail'])) {
    $result['result'] = FALSE;
    $result['message'] = "function force_logout : parameter";
    return $result;
  }

  $mail = $_REQUEST['mail'];

  // load user object ขึ้นมาเพือแก้ไข mail
  $load_user = user_load_by_mail($mail);
  // update some user property

  if ($load_user) {
    # code...

    /*
    $verify_key = generateKey();
    $load_user->pass = $verify_key;

    // save existing user
    user_save((object) array('uid' => $load_user->uid), (array) $load_user);

    idna_mail_send("user_forgot_password", $mail, $load_user->name, $verify_key);


    // idna_mail_send("user_forgot_password", $_POST['email'], $verify_key);
    // $verify_key = generateKey();
    

    $result['result']   = TRUE;
    // $result['message'] = "xxxx";
    */

    module_load_include('inc', 'services', 'resources/user_resource');

    $result['result'] = TRUE;
    $result['data']   = _user_resource_request_new_password($mail);
  }else{
    $result['result']   = FALSE;
    $result['message'] = "Email not match " . $_POST['email'];
  }

  /*
  if (!empty($_POST['email'])) {
    # code...
    // #1
    

    // // กรณี user ยังไม่ได้ตั้งชือใหม่ เราจะกำหนดให้ชือเท่ากัน email
    // if (strcasecmp($existingUser->name, $_POST['UDID'] . '@annmousu') != 0) { // 
    //   # code...
    //   $existingUser->name = $_POST['email'];
    // }

    // $existingUser->mail = $_POST['email'];
    // $existingUser->pass = $_POST['key'];

    // // save existing user
    // user_save((object) array('uid' => $existingUser->uid), (array) $existingUser);

    
  }else{
    $result['result']   = FALSE;
    $result['message'] = "Email empty.";
  }
  
  $result['function'] = "user_forgot_password";
  $result['$_POST']   = $_POST;
  */

  return $result;
}


function delete_center_chat(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['item_id'])) {
    $result['result'] = FALSE;
    $result['message'] = "function delete_center_chat : parameter";
    return $result;
  }

  $item_id    = $param['item_id'];

  entity_delete_multiple('field_collection_item', array($item_id));

  $result['result'] = TRUE;
  // $result['param']  = $param;
  return $result;
}

function conversation_send_notification(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  /*
  "chat_id"  : event.params.chat_id,
  "message_id": event.params.message_id,
  "data"    : crnt.val()
  */

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['chat_id']) || empty($param['message_id']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function conversation_send_notification : parameter";
    return $result;
  }

  global $firebase;
  
  $chat_id    = $param['chat_id'];
  $message_id = $param['message_id'];
  $data       = $param['data'];

  $uid        = $data['ownerId'];



  // เราจะทำการ บันทึกการ สนทนาทั้งหมดไว้ที่ database ด้วย
  $content_type = "conversation";
  $query        = new EntityFieldQuery();
  $query_value  = $query->entityCondition('entity_type', 'node')
                         ->entityCondition('bundle', $content_type)
                         ->propertyCondition('status', 1)
                         ->propertyCondition('title', $chat_id, '=')
                         ->execute();

  if (!empty($query_value['node'])) {
    $nids = array_keys($query_value['node']);

    // 
    foreach ($nids as &$key) {
      $node = node_load($key);

      $node_wrapper = entity_metadata_wrapper('node', $node);
      
      $messages = $node_wrapper->field_conversation_messages->value();

      $messages   = json_decode($messages, TRUE);

      /*
      จะได้ last object ของ message ออกมา
      
      $lastEl = array_values(array_slice($messages, -1))[0];
      watchdog(TAG, 'conversation_send_notification: %v-%count', array('%v'=> serialize($lastEl), '%count'=>count($messages)), WATCHDOG_INFO);
      */
      

      array_push($messages, array($message_id => $data));

      $node_wrapper->field_conversation_messages->set(json_encode($messages));

      $node_wrapper->save();
    }
  }else{

    $node = new stdClass();
    $node->title = $chat_id;
    $node->type  = $content_type;
    $node->uid   = $uid;

    $node->field_conversation_messages[LANGUAGE_NONE][0]['value'] = json_encode(array(array($message_id => $data)));

    $node->language = LANGUAGE_NONE;
    $node->status   = 1;
    $node->comment  = 0; 
    $node = node_submit($node);
    node_save($node);
  }


  switch ($data['type']) {
    case '1':{
       
      $query    = new EntityFieldQuery();
      $entities = $query->entityCondition('entity_type', 'field_collection_item')
                        ->entityCondition('bundle', 'field_profile_friends')
                        ->fieldCondition('field_profile_friends_chat_id', 'value', $chat_id, '=')
                        ->fieldCondition('field_friend_uid', 'value', $uid, '=')
                        ->execute();

      if (!empty($entities['field_collection_item'])) {
        // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
        $item_id = array_keys($entities['field_collection_item'])[0];

        $item_load = field_collection_item_load($item_id);

        $friend_id = $item_load->hostEntity()->uid;
        // if ($data_item) {
        //   $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
        //   if (strcmp($wrapper->field_status_following->value(), $data["status"]) != 0) {
        //     $wrapper->field_status_following->set($data["status"]);
        //     $wrapper->save();
        //   }
        // }

        $user_profile = profile2_by_uid_load($uid, 'main');

        $friend_profile = profile2_by_uid_load($friend_id, 'main');

        // $result['friend_profile'] = $friend_profile;

        foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $k => $v) {
          $item_load_device_access = field_collection_item_load($v['value']);

          // $result['token_notification'] = $item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];

          if($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'] != ""){
            // $item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];

            if (empty($friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'])) {
              # code...
              $badge = '1';
            }else{
              $badge = $friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] + 1;
            }

            // update บันทึก badge
            // $wrapper = entity_metadata_wrapper('field_collection_item', $item_load_device_access);
            // $wrapper->field_profile_badge->set($badge);   
            // $wrapper->save();

            $friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] = $badge;
            profile2_save($friend_profile);


            $friend_name = $user_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

            $message = $friend_name .' send message : '. $data['content'];

            $sval = array('type'=>'conversation',
                      'room_type' =>'private',
                      'friend_id'=>$uid,
                      'friend_name'=>$friend_name);

            send_push_notification($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'], '', $message, $sval, $badge);

          }
        }

      }else {
        $query    = new EntityFieldQuery();
        $entities = $query->entityCondition('entity_type', 'field_collection_item')
                          ->entityCondition('bundle', 'field_chat_group')
                          ->fieldCondition('field_object_id', 'value', $chat_id, '=')
                          ->execute();

        if (!empty($entities['field_collection_item'])) {
          // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
          $item_id = array_keys($entities['field_collection_item'])[0];

          $item_load = field_collection_item_load($item_id);

          // $result['result'] = TRUE;
          // $result['item_load'] = $item_load;
          
          // return $result;

          // 

          // field_members_group
          $members_group = array();
          foreach ($item_load->field_members_group[LANGUAGE_NONE] as $k => $v) {
            $item_load_members_group = field_collection_item_load($v['value']);

            // $members_group[] = $item_load_members_group->field_members_group_friend_id[LANGUAGE_NONE][0]['value'];
 
            $friend_id = $item_load_members_group->field_members_group_friend_id[LANGUAGE_NONE][0]['value'];

            $user_profile = profile2_by_uid_load($uid, 'main');

            $friend_profile = profile2_by_uid_load($friend_id, 'main');

            // $result['friend_profile'] = $friend_profile;

            foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $k => $v) {
              $item_load_device_access = field_collection_item_load($v['value']);

              // $result['token_notification'] = $item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];
              if(empty($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0])){
                continue;
              }

              if($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'] != ""){
                // $item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];

                if (empty($friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'])) {
                  # code...
                  $badge = '1';
                }else{
                  $badge = $friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] + 1;
                }

                // update บันทึก badge
                // $wrapper = entity_metadata_wrapper('field_collection_item', $item_load_device_access);
                // $wrapper->field_profile_badge->set($badge);   
                // $wrapper->save();

                $friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] = $badge;
                profile2_save($friend_profile);


                $group_name = $item_load->field_name_group[LANGUAGE_NONE][0]['value'];
                // 

                
                if($item_load->field_chat_group_owner_id[LANGUAGE_NONE][0]['value'] == $uid) {

                  $message = 'Group > ' . $group_name .' send message : '. $data['content'];

                  $sval = array('type'      =>'conversation',
                                'room_type' =>'group',
                                'friend_id' =>$uid,
                                'group_name'=>$group_name,
                                'group_id'  =>$item_load->item_id,
                                );

                  send_push_notification($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'], '', $message, $sval, $badge);
                }else{

                  $group_id = $item_load->field_group_id[LANGUAGE_NONE][0]['value'];

                  $message = 'Group > ' . $group_name .' send message : '. $data['content'];

                  $sval = array('type'      =>'conversation',
                                'room_type' =>'group',
                                'friend_id' =>$uid,
                                'group_name'=>$group_name,
                                'group_id'  =>$group_id,
                                );

                  send_push_notification($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'], '', $message, $sval, $badge);
                }

              }
            }

          }

          // $result['members_group']  = $members_group;
        }else{
            watchdog(TAG, '%v', array('%v'=> 'center chat'), WATCHDOG_INFO);
            /*
            $query    = new EntityFieldQuery();
            $entities = $query->entityCondition('entity_type', 'field_collection_item')
                              ->entityCondition('bundle', 'field_my_app_chat')
                              ->fieldCondition('field_profile_friends_chat_id', 'value', $chat_id, '=')
                              ->fieldCondition('field_friend_uid', 'value', $uid, '=')
                              ->execute();

            if (!empty($entities['field_collection_item'])) {
              // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
              $item_id = array_keys($entities['field_collection_item'])[0];

              $item_load = field_collection_item_load($item_id);

              $friend_id = $item_load->hostEntity()->uid;

              $user_profile = profile2_by_uid_load($uid, 'main');

              $friend_profile = profile2_by_uid_load($friend_id, 'main');

              // watchdog(TAG, '1, %uid - %friend_id - %item_id', array('%uid'=> $uid, '%friend_id'=> $friend_id, '%item_id'=> $item_id), WATCHDOG_INFO);

              // $result['friend_profile'] = $friend_profile;


              // 

              $application_id = $item_load->field_application_id[LANGUAGE_NONE][0]['value'];

              $node = node_load($application_id);

              
              foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $k => $v) {
                $item_load_device_access = field_collection_item_load($v['value']);

                // $result['token_notification'] = $item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];

                if($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'] != ""){
                  // $item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];

                  if (empty($friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'])) {
                    # code...
                    $badge = '1';
                  }else{
                    $badge = $friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] + 1;
                  }

                  // update บันทึก badge
                  // $wrapper = entity_metadata_wrapper('field_collection_item', $item_load_device_access);
                  // $wrapper->field_profile_badge->set($badge);   
                  // $wrapper->save();

                  $friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] = $badge;
                  profile2_save($friend_profile);


                  $friend_name = $user_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

                  $message = $friend_name .'  [Application >' . $node->title . ']  send message : '. $data['content'] . '.';

                  $sval = array('type'=>'conversation',
                            'room_type' =>'private',
                            'friend_id'=>$uid,
                            'friend_name'=>$friend_name);

                  send_push_notification($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'], '', $message, $sval, $badge);

                }
              }
            
            }else{
              watchdog(TAG, '2, %v', array('%v'=> 'center chat'), WATCHDOG_INFO);
            }

            */

        }
        // end else
      }
     }
      break;
    
    default:
      # code...
      break;
  }

  $result['result'] = TRUE;
  $result['param']  = $param;
  return $result;
}

/*

*/
function add_friend(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) || empty($param['friend_id'])) {
    $result['result'] = FALSE;
    return $result;
  }

  global $firebase;
  $uid        = $param['uid'];
  $friend_id  = $param['friend_id'];

  // กรณีเป้น ตัวเอง(My self)
  if (strcasecmp($uid, $friend_id) == 0) {
    $result['result']     = TRUE;
    $result['friend_status']  = '-1';
    $result['message']    = "You can't add yourself as a friend.";
    return  $result;
  }

  /*
  เป้น การ load friends ของ uid ขึ้นมาเช็ดว่า friend_id เป้น friend เราอยุ่หรือไม่
  */
  $profile_user = profile2_by_uid_load($uid, 'main');

  $friend_status = 0;
  foreach ($profile_user->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
      $data_item_load = field_collection_item_load($value['value']);
      
      if($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] == $friend_id){
        
        $friend_status = $data_item_load->field_friend_status[LANGUAGE_NONE][0]['tid'];
        break;
      }
  }

  if ($friend_status == 0) {
    // มีอยู่กรณีเดียวทีเราสามารถเพิ่มเพือนได้
    /*
    หลักการคือ friend_id ต้องยังไม่เคยเป้นเพื่อนเท่านั้น
    ขั้นตอน
    1. เราต้องเพิ่ม friend_id  เป็นเพื่อน โดยสถานะ Wait for a friend(12) ที่ database และ firebase database
    2. เราต้องเพิ่ม uid ไปเป็นเพือน ของ friend_id ด้วย โดยสถานะ Friend request(11) ที่ database และ firebase database
    */

    // module_load_include('module', 'opentok', 'opentok');

    $chat_id = generateRandomString(LENGTH_CHAT_ID);

    // เป็นการเพือนให้ตัวเรา
    $user_profile = profile2_by_uid_load($uid, 'main');


    // $user_classs_item_id = get_friend_classs($user_profile);

    $friend_values = array();
    $friend_values['field_name'] = 'field_profile_friends'; // field collection name

    $friend_values['field_friend_uid'][LANGUAGE_NONE][0]['value']               = $friend_id;
    $friend_values['field_change_friend_name'][LANGUAGE_NONE][0]['value']       = '';
    $friend_values['field_profile_friends_chat_id'][LANGUAGE_NONE][0]['value']  = $chat_id;
    $friend_values['field_friend_status'][LANGUAGE_NONE][0]['tid']              = FRIEND_STATUS_WAIT_FOR_A_FRIEND;
    // $friend_values['field_profile_friend_classs'][LANGUAGE_NONE][0]['value']    = $user_classs_item_id;

    /*
    opk token มีไว้สำหรับ call audio, video 
    */
    // $opk_token = opentok_get_token($user_profile->field_opentok_session_id[LANGUAGE_NONE][0]['value'], 'publisher');
    // $friend_values['field_opentok_token'][LANGUAGE_NONE][0]['value']            = $opk_token;
  
    $field_entity = entity_create('field_collection_item', $friend_values);
    $field_entity->setHostEntity('profile2', $user_profile);
    $field_entity->save();

    $values = array(
      "status"       => FRIEND_STATUS_WAIT_FOR_A_FRIEND,
      "chat_id"      => $chat_id,
      "item_id"      => $field_entity->item_id,
      // "classs"       => $user_classs_item_id
    );
    $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/friends/' . $friend_id . "/", $values);
    
    $result['values']  = $values;  


    
    // เป็นการเพิ่มตัวเรา  ให้เพือน
    $friend_profile = profile2_by_uid_load($friend_id, 'main');

    // $friend_classs_item_id = get_friend_classs($friend_profile);

    $user_values = array();
    $user_values['field_name'] = 'field_profile_friends'; // field collection name

    $user_values['field_friend_uid'][LANGUAGE_NONE][0]['value']               = $uid;
    $user_values['field_change_friend_name'][LANGUAGE_NONE][0]['value']       = '';
    $user_values['field_profile_friends_chat_id'][LANGUAGE_NONE][0]['value']  = $chat_id;
    $user_values['field_friend_status'][LANGUAGE_NONE][0]['tid']              = FRIEND_STATUS_FRIEND_REQUEST;
    // $user_values['field_profile_friend_classs'][LANGUAGE_NONE][0]['value']    = $friend_classs_item_id;

        /*
    opk token มีไว้สำหรับ call audio, video 
    */
    // $opk_token = opentok_get_token($friend_profile->field_opentok_session_id[LANGUAGE_NONE][0]['value'], 'publisher');
    // $user_values['field_opentok_token'][LANGUAGE_NONE][0]['value']            = $opk_token;

    //field_opentok_token
  
    $field_entity = entity_create('field_collection_item', $user_values);
    $field_entity->setHostEntity('profile2', $friend_profile);
    $field_entity->save();

    $values = array(
      "status"       => FRIEND_STATUS_FRIEND_REQUEST,
      "chat_id"      => $chat_id,
      "item_id"      => $field_entity->item_id,
    );
    $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/friends/' . $uid . "/", $values);

    foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $k => $v) {
      $item_load = field_collection_item_load($v['value']);
          
      if($item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'] != ""){
        $friend_name = $profile_user->field_profile_display_name[LANGUAGE_NONE][0]['value'];
        $message =  $friend_name . ' send friend request.';


        $friend_url_image = '';
        if (isset($profile_user->field_profile_image)) {
          # code...
          if (!empty($profile_user->field_profile_image[LANGUAGE_NONE])) {
            $friend_url_image = substr(file_create_url($profile_user->field_profile_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));
          }
        }

        $data = array('type'=>'friend_request',
                      'friend_id'=>$uid,
                      'friend_name'=>$friend_name,
                      'friend_url_image' =>$friend_url_image);

        send_push_notification($item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'], TAG, $message, $data);
      }
    }

    $result['result']         = TRUE;
    $result['friend_status']  = '99';  
    $result['message']        = "Send requests friend success.";
  }else{
    switch ($friend_status) {
      // Friend กรณีเราเป็นเพือนกันอยู่แล้ว
      case '10':{
        $result['result']         = TRUE;
        $result['friend_status']  = '-1';
        $result['message']        = "is already your friend.";
      }
        break;

      // Friend Cancel : กรณีเราเคยขอเป้นเพือนแล้วโดน เพือน กด cancel
      case '13':{
        $result['result']         = TRUE;
        $result['friend_status']  = '-1';
        $result['message']        = "Friend Cancel.";
      }
        break;

      // Friend request : กรณีเราส่งคำขอเป้นเพือน
      case '11':{
        $result['result']         = TRUE;
        $result['friend_status']  = '-1';
        $result['message']        = "Friend request.";
      }
        break;

      // Wait for a friend : เพือนคนนี้ส่งคำขอ ขอเราเป็นเพือน
      case '12':{
        $result['result']         = TRUE;
        $result['friend_status']  = '-1';
        $result['message']        = "Wait for a friend.";
      }
        break;
      
      default:
        # code...
        break;
    }
  }

  return $result;
}

function list_friends($uid)
{
  $result = array();

  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
  $user_fields = user_load($uid);

  if (!$user_fields->uid) {
    // User is not logged in
    //services_error(t('User is not logged in.'), 406);

    $result['result'] = FALSE;
    $result['output'] = "uid not match is user";

    return $result;
  }

  $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile =  profile2_load($profile2_load_by_user['main']->pid);

  $uid_friends = array(0, 1, $uid);

  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // Build array of field collection values.

    $data = field_collection_item_load($value['value']);

    $uid_friends[] = $data->field_friend_uid[LANGUAGE_NONE][0]['value'];
  }
  // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user 


  $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', $uid_friends, 'NOT IN')
        ->execute()
        ->fetchCol();

  $users =  user_load_multiple($uids);

  $data = array();
  foreach ($users as $account) {
    # code...
    
    $tmp['uid'] = $account->uid;
    $tmp['name'] = $account->name;
    $tmp['mail'] = $account->mail;

    // $path= file_create_url($uri)  uri
    if(!is_null($account->picture)){
      $tmp['url_image'] = file_create_url($account->picture->uri); 
    }else{
      $tmp['url_image'] = "";
    }

    $data[] = $tmp;
  }

  $result['result'] = TRUE;
  $result['GET'] = $uid;
  $result['function'] = "add list friends";
  $result['data'] = $data;

  return $result;
}

function idna_fetch_profile($uid)
{

  $result = array();

  // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
  $profile2_load_by_user = profile2_load_by_user($uid, NULL);

  $result['result'] = TRUE;

  $profile = $profile2_load_by_user['main'];

  $result['name']         = $profile->field_profile_name[LANGUAGE_NONE][0]['value']; 
  $result['subname']      = $profile->field_profile_subname[LANGUAGE_NONE][0]['value']; 
  $result['address']      = $profile->field_profile_address[LANGUAGE_NONE][0]['value']; 

  $result['phone_number'] = $profile->field_profile_phone[LANGUAGE_NONE][0]['value'];
  $result['location']     = $profile->field_profile_location[LANGUAGE_NONE][0]['value'];
  $result['google_plus']  = $profile->field_profile_google_plus[LANGUAGE_NONE][0]['value'];
  $result['facebook']     = $profile->field_profile_facebook[LANGUAGE_NONE][0]['value'];
  

  $url_image = "";
  if(!is_null($profile->field_profile_image[LANGUAGE_NONE][0]['uri'])){
    $url_image = file_create_url($profile->field_profile_image[LANGUAGE_NONE][0]['uri']); 
  }else{
    $url_image = "";
  }

  // field_field_profile_bg
  $url_image_bg = "";
  if(!is_null($profile->field_field_profile_bg[LANGUAGE_NONE][0]['uri'])){
    $url_image_bg = file_create_url($profile->field_field_profile_bg[LANGUAGE_NONE][0]['uri']); 
  }else{
    $url_image_bg = "";
  }

  /*

  $url_qrcode = "";
  if(!is_null($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri'])){
    $url_qrcode = file_create_url($profile->field_profile_my_qrcode[LANGUAGE_NONE][0]['uri']); 
  }else{
    $url_qrcode = "";
  }


  $result['url_picture']  = $url_image;
  $result['url_picture_bg']  = $url_image_bg;
  $result['url_qrcode']   = $url_qrcode;

  // $result['uid']    = $uid;
  $result['profile'] = $profile;
  */

   
  return $result;
}

/*
  function = 0 : แก้ไขรูป, 1 : แก้ไขชื่อ, 2 : แก้ไข Category, 3 : แก้ไข email, 4 : แก้ไข phone, 5 : แก้ไข status 
*/
function update_my_application_profile(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['item_id']) || empty($_FILES["idna"]["tmp_name"])) {
    $result['result']   = FALSE;
    $result['message']  = "empty parameter : update_my_application_profile()";
    $result['_REQUEST']  = $_REQUEST;
    return $result;
  }

  global $firebase;

  $uid      = $_REQUEST['uid'];
  $item_id  = $_REQUEST['item_id'];
  $fi       = $_REQUEST['fi'];

  try {
    

    $time_start = microtime(true);

    /*
    $image = $_REQUEST['image'];

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);
    */

    // if(!empty($_FILES["idna"])){
    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);


    /*
    $data_item_load = field_collection_item_load($item_id);

    $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);  
    $wrapper->field_image->set($image_url);
    $wrapper->save();

    $data_update = array(
      "image_url"  => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']))
    );

    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/" . FIREBASE_MY_APPLIPATIONS_PATH . $item_id, $data_update);

    $result['result']     = TRUE;
    $result['image_url']  = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));
    */
    
    $node  = node_load($item_id);  
    $node_wrapper = entity_metadata_wrapper('node', $node);
    // $node_wrapper->field_image->set($image_url);
    $node_wrapper->field_my_app_picture->set($image_url);
    

    $uri = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));
    $data_update = array(
      "image_url"  => $uri
    );

    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/" . FIREBASE_MY_APPLIPATIONS_PATH . $item_id, $data_update);


    // update center ด้วยกรณีที่ application id แสดง อยู่บน center
    $on_store = $node_wrapper->field_on_store->value();
    if ($on_store) {
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . '/' . $node->nid , array('image_url'=>$uri));
    }
    // update center ด้วยกรณีที่ application id แสดง อยู่บน center



    // function ___update_image_url_of_my_application($uid ,$node_id, $image_url){

    background_process_start('___update_image_url_of_my_application', $uid, $item_id, $uri);

    /*
    // follower - following
    if (isset($node->field_my_app_follower[LANGUAGE_NONE])) {
      foreach ($node->field_my_app_follower[LANGUAGE_NONE] as $my_app_follower_k => $my_app_follower_v) {
        $my_app_follower_item = field_collection_item_load($my_app_follower_v['value']);

        $my_app_follower_item_uid = $my_app_follower_item->field_my_app_uid_follower[LANGUAGE_NONE][0]['value'];

        $my_app_follower_item_object_id = $my_app_follower_item->field_my_app_follower_object_id[LANGUAGE_NONE][0]['value'];

        $my_app_follower_item_uid_profile = profile2_by_uid_load($my_app_follower_item_uid, 'main');
        if(isset($my_app_follower_item_uid_profile->field_following[LANGUAGE_NONE])){
          foreach ($my_app_follower_item_uid_profile->field_following[LANGUAGE_NONE] as $following_k => $following_v) {
            $following_item = field_collection_item_load($following_v['value']);

          
            if (strcasecmp($following_item->field_my_app_follower_object_id[LANGUAGE_NONE][0]['value'], $my_app_follower_item_object_id) == 0 ) {
              # code...
              $following_item_wrapper = entity_metadata_wrapper('field_collection_item', $following_item);
              $following_item_wrapper->field_path_uri->set($uri);
              $following_item_wrapper->save();

              $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $my_app_follower_item_uid .'/'. PATH_FOLLOWING .'/' . $following_item_wrapper->field_my_app_follower_object_id->value() . "/", array('image_url'=>$uri) );
            }
          }
        }
      }
    }
    // follower - following


    // center chat
    // กรณีเราต้องวิ่งไป update ข้อมูลให้กับ field_my_app_chat ของเพือนที่เราคุยด้วย. โดยเราจะรู็จาก field_my_app_chat =>field_friend_uid
    $my_app_chat_query    = new EntityFieldQuery();
    $my_app_chat_entities = $my_app_chat_query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_my_app_chat')
                      ->fieldCondition('field_application_id', 'value', $item_id, '=')
                      ->fieldCondition('field_owner_id', 'value', $uid, '=')
                      ->execute();

    if (!empty($my_app_chat_entities['field_collection_item'])) {
      $item_ids = array_keys($my_app_chat_entities['field_collection_item']);
      foreach ($item_ids as $item_ids_k => $item_ids_v) {
        $item_id_item_load = field_collection_item_load($item_ids_v);
        // ต้องวิ่งไป update center_chat 
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $item_id_item_load->hostEntity()->uid . '/' . FIREBASE_CENTER_CHAT  . $item_ids_v . "/", array('image_url'=>$uri));

      }
    }
    // center chat
    */

    $node_wrapper->save();

    $time_end       = microtime(true);
    $execution_time = number_format(($time_end - $time_start), 2);

    $result['result']     = TRUE;
    $result['image_url']  = $uri;

    $result['execution_time']  = $execution_time;
    return $result;

  } catch (Exception $e) {
    // echo 'Caught exception: ',  $e->getMessage(), "\n";

    $result['result']     = FALSE;
    $result['message']    = $e->getMessage();
  }

  return $result;
}

function update_picture_profile(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }
  
  if (empty($_REQUEST['uid']) || empty($_FILES["idna"]["tmp_name"])) {
    $result['result']   = FALSE;
    $result['message']  = "function : update_picture_profile, parameter";
    $result['_REQUEST'] = $_REQUEST;
    $result['_FILES']   = $_FILES;
    return $result;
  }

  global $firebase;
  $uid   = $_REQUEST['uid'];

  $time_start = microtime(true);

  $profile = profile2_by_uid_load($uid, 'main');

  // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
  $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

  //Create the directory if it does not already exist, otherwise check the permissions
  $directory = 'public://';
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

  $currentDate = date("Ymd");
  $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
  
  //Saves a file to the specified destination and creates a database entry.
  $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);
  
  // save รูป profile
  $profile->field_profile_image[LANGUAGE_NONE][0] = $image_url;
  profile2_save($profile);

  // $image_url['uri']
  //   // dpm(image_style_url('medium',$uri));
  $url = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));
  // $url = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));

  // Firebase : update image url profile
  $data_update = array(
      "image_url"  =>$url
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/", $data_update);
  // Firebase : update image url profile

  /*
  $profile = profile2_by_uid_load($uid, 'main');
  // update chat group
  if(isset($profile->field_chat_group[LANGUAGE_NONE])){
    foreach ($profile->field_chat_group[LANGUAGE_NONE] as $chat_group_k => $chat_group_v) {
      $chat_group_item = field_collection_item_load($chat_group_v['value']);

      $chat_group_item_group_id = $chat_group_item->field_group_id[LANGUAGE_NONE][0]['value'];

      $chat_group_node         = node_load($chat_group_item_group_id);  
      // $chat_group_node_wrapper = entity_metadata_wrapper('node', $chat_group_node);

      // if (strcasecmp($chat_group_node_wrapper->title->value(), $data['name']) != 0) {
        // $chat_group_node_wrapper->title->set($data['name']);
        // $chat_group_node_wrapper->save();
      // }

      // watchdog(TAG, '1. > update_profile: %v', array('%v'=> $chat_group_item_group_id ), WATCHDOG_INFO);
      // field_members_group
      // watchdog(TAG, '1. update_profile: %v', array('%v'=> serialize($chat_group_node) ), WATCHDOG_INFO);
      if (isset($chat_group_node->field_members_group[LANGUAGE_NONE])) {
        # code...

        foreach ($chat_group_node->field_members_group[LANGUAGE_NONE] as $members_group_k => $members_group_v) {
          $members_group_item = field_collection_item_load($members_group_v['value']);
          
          $__friend_id = $members_group_item->field_members_group_friend_id[LANGUAGE_NONE][0]['value'];
          watchdog(TAG, '> update_profile: %v', array('%v'=> $__friend_id), WATCHDOG_INFO);
          if (strcasecmp($members_group_item->field_members_group_friend_id[LANGUAGE_NONE][0]['value'], $uid) == 0) {
            $chat_group_node_wrapper = entity_metadata_wrapper('field_collection_item', $members_group_item);
            $chat_group_node_wrapper->field_path_uri->set($url);
            $chat_group_node_wrapper->save();

            $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CHAT_GROUPS . '/' . $chat_group_item_group_id .'/members/'. $members_group_v['value'] . '/' , array('friend_image_url'=>$url));

            break;
          }
        }
      }
    }
  }
  // update chat group
  */

  // update_creator_image_url_post($uid, $url);


  background_process_start('___update_image_url_of_user', $uid, $url);

  $time_end       = microtime(true);
  $execution_time = number_format(($time_end - $time_start), 2);

  $result['result']          = TRUE;  
  $result['image_url']       = $url;
  $result['execution_time']  = $execution_time;
  return $result;
}

function update_picture_profile2(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }
  
  if (empty($_REQUEST['uid']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : update_picture_profile, parameter";
    $result['_REQUEST']  = $_REQUEST;
    return $result;
  }

  global $firebase;
  $uid   = $_REQUEST['uid'];
  $image = $_REQUEST['image'];

  $time_start = microtime(true);


  $profile = profile2_by_uid_load($uid, 'main');

  if($image != ""){

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    // $binary = file_get_contents($image['tmp_name']);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

    // save รูป profile
    $profile->field_profile_image[LANGUAGE_NONE][0] = $image_url;

    profile2_save($profile);

    // $uri = file_load($profile->field_profile_image[LANGUAGE_NONE][0]['fid'])->uri;
    

    // $image_url['uri']
    //   // dpm(image_style_url('medium',$uri));
    $url = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));
    // $url = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));

    // Firebase : update image url profile
    $data_update = array(
        "image_url"  =>$url
    );
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/", $data_update);
    // Firebase : update image url profile


    $time_end = microtime(true);
    $time = number_format(($time_end - $time_start), 2);
   
    $result['result']          = TRUE;  
    $result['image_url']       = $url;
    $result['execution_times'] = $time;
    return $result;
  }else{

    $result['result'] = FALSE;  
    return $result;
  }  
}

function chat_upload_picture(){
  $result = array();

  /*
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }
  */

  if ( empty($_REQUEST['uid']) || empty($_FILES["idna"]) ) {
    $result['result'] = FALSE;
    $result['message']  = "function : chat_upload_picture, parameter : uid, picture";
    // $result['_REQUEST']  = $_REQUEST;
    return $result;
  }

  $uid = $_REQUEST['uid'];

  $image_url;
  if(!empty($_FILES["idna"])){
      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");

      $types = explode('/', $_FILES["idna"]["type"]);
      if (count($types) == 1) {
        /*
          กรณีอาจเกิดได้
        */
        $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      }else{
        $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . "." . $types[1];
      }
      
      //Saves a file to the specified destination and creates a database entry.
      $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);


      // $values['field_image'][LANGUAGE_NONE][0] = $arr_file;  

      // $uri = file_load($arr_file['fid'])->uri;
      $thumbnail  = /*substr(*/ file_create_url(image_style_url('medium', $image_url['uri']));//, strlen($GLOBALS['base_url']));
      $original   = /*substr(*/ file_create_url($image_url['uri']);// , strlen($GLOBALS['base_url']));

      $result['result'] = TRUE; 
      $result['data']   = array('thumbnail_url'=>$thumbnail, 'original_url'=>$original);

      // $result['type']   = $_FILES["idna"]["type"];
      return $result; 
  }

  $result['result'] = FALSE; 
  return $result; 
}

function chat_upload_video(){
  $result = array();

  /*
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }
  */

  if ( empty($_REQUEST['uid']) || empty($_FILES["idna"]["tmp_name"]) ) {
    $result['result'] = FALSE;
    $result['message']  = "function : chat_upload_picture, parameter : uid, picture";
    return $result;
  }

  $array_type = array("image/mp4", "video/mp4", "application/mp4");

  watchdog(TAG, 'chat_upload_video: %type', array('%type'=> serialize(strtolower($_FILES["idna"]["type"])) ), WATCHDOG_INFO);

  if (!in_array(strtolower($_FILES["idna"]["type"]), $array_type)) {
    $result['result'] = FALSE;
    $result['message']  = "function : chat_upload_picture, format file = " . strtolower($_FILES["idna"]["type"]);
    return $result;
  }

  $uid = $_REQUEST['uid'];

  $image_url;
  if(!empty($_FILES["idna"]["tmp_name"])){
      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      // $pieces = explode(" ", $pizza); // type

      $currentDate = date("Ymd");
      // $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . "." . explode('/', $_FILES["idna"]["type"])[1];// . ".mp4";

      $types = explode('/', $_FILES["idna"]["type"]);
      if (count($types) == 1) {
        /*
          กรณีอาจเกิดได้
        */
        $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".mp4";
      }else{
        $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . "." . $types[1];
      }

      
      //Saves a file to the specified destination and creates a database entry.
      $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

      // $uri = file_load($arr_file['fid'])->uri;
    
      $result['result'] = TRUE; 
      /*
      $result['data']   = array('video_url'=>substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url'])), 
                                'original_url'=>substr(file_create_url(image_style_url('large', ffmpeg_thumbnail_extract_frame($image_url))), strlen($GLOBALS['base_url'])), 
                                'thumbnail_url'=>substr(file_create_url(image_style_url('medium', ffmpeg_thumbnail_extract_frame($image_url))), strlen($GLOBALS['base_url'])));
      */

      $result['data']   = array('video_url'     =>file_create_url($image_url['uri']), 
                                'original_url'  =>file_create_url(image_style_url('large', ffmpeg_thumbnail_extract_frame($image_url))), 
                                'thumbnail_url' =>file_create_url(image_style_url('medium', ffmpeg_thumbnail_extract_frame($image_url)))
                              );
      // $result['uri']    = $arr_file;
      // substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']))

      /*
 $thumbnail  = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
      $original   = substr(file_create_url($uri), strlen($GLOBALS['base_url']));
      */

      /*

  large

'thumbnail_url'=>

      */

      return $result; 
  }

  $result['result'] = FALSE; 
  return $result; 
}

function free_call(){
  $result = array();

  $result['result']   = TRUE; 
  $result['url']      = 'https://idea-dee.net/test890'; 
  return $result; 
}

function update_picture_bg(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  // $param = json_decode(file_get_contents('php://input'), true);

  // $result['result'] = TRUE;
  // $result['_REQUEST']  = $_REQUEST;
  // $result['_FILES']  = $_FILES;
  // $result['param']  = $param;

  // return $result;

  if (empty($_REQUEST['uid']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : update_picture_bg, parameter";
    $result['_REQUEST']  = $_REQUEST;
    return $result;
  }

  global $firebase;

  $uid   = $_REQUEST['uid'];
  $image = $_REQUEST['image'];

  $profile = profile2_by_uid_load($uid, 'main');

  if($image != ""){

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    // $binary = file_get_contents($image['tmp_name']);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

    // save รูป profile
    $profile->field_picture_bg[LANGUAGE_NONE][0] = $image_url;

    profile2_save($profile);
   
    $url = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));

    // Firebase : update image url profile
    $data_update = array(
        "bg_url"  =>$url
    );
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/profiles/", $data_update);
    // Firebase : update image url profile

    $result['result'] = TRUE;  
    $result['url']    = $url;
    // $result['uri']    = $uri;
    return $result;
  }else{
    $result['result'] = FALSE; 
    return $result; 
  }  
}

/*
  function ใช้สำหรับ update ชือของ creator post, comment, reply
*/
function update_creator_name_post($uid, $name){
  global $firebase;

  $creator_query      = new EntityFieldQuery();
  $creator_result = $creator_query->entityCondition('entity_type', 'field_collection_item')
                          ->entityCondition('bundle', 'field_creator')
                          ->fieldCondition('field_creator_uid', 'value', $uid, '=')
                          ->execute();

  if (!empty($creator_result['field_collection_item'])) {
    $creator_nids = array_keys($creator_result['field_collection_item']);
    // dpm(count($creator_nids));
    foreach ($creator_nids as $creator_k => $creator_v) { 
      // dpm($creator_v);
      // dpm(field_collection_item_load($creator_v));

      $creator_item = field_collection_item_load($creator_v);
      // dpm($creator_item->field_creator_name[LANGUAGE_NONE][0]['value']);


      /*
      สว่น update ค่า creator
      $creator_item_wrapper = entity_metadata_wrapper('field_collection_item', $creator_item);
      $creator_item_wrapper->field_creator_name->set('0');
      $creator_item_wrapper->save();
      */

      $hostEntity = $creator_item->hostEntity();
      if (property_exists($hostEntity, 'field_name')) {
        if (strcasecmp($hostEntity->field_name, 'field_my_app_update') == 0) {
          // post
          $post_id = $hostEntity->item_id;

          // dpm($hostEntity->field_name);
          // dpm($post_id);
          // dpm($hostEntity->field_my_app_message_update[LANGUAGE_NONE][0]['value']);

          // dpm($hostEntity->hostEntity());

          // application 
          if (property_exists($hostEntity->hostEntity(), 'type')) {
            if (strcasecmp($hostEntity->hostEntity()->type, 'application') == 0) {
              $application_nid = $hostEntity->hostEntity()->nid;
              $application_uid = $hostEntity->hostEntity()->uid;
              // dpm($application_nid);
              // dpm($application_uid);
              // break;

              // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profiles/device_access/' . $value['value'] . "/", $val);


              // dpm(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id);


              $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/creator/', array('name'=>$name));
            }
          }
        }else if (strcasecmp($hostEntity->field_name, 'field_my_app_update_comment') == 0) {
          // comment ของ post [comment->post]
          $comment_id = $hostEntity->item_id;
          // dpm('comment_id');
          // dpm($comment_id);
          if (property_exists($hostEntity->hostEntity(), 'field_name')) {
            if (strcasecmp($hostEntity->hostEntity()->field_name, 'field_my_app_update') == 0){
              $post_entity =  $hostEntity->hostEntity();
              $post_id     =  $post_entity->item_id;

              // dpm('post_id');
              // dpm($post_id);
              if (property_exists($post_entity->hostEntity(), 'type')) {
                if (strcasecmp($post_entity->hostEntity()->type, 'application') == 0) {
                  $application_nid = $post_entity->hostEntity()->nid;
                  $application_uid = $post_entity->hostEntity()->uid;
                  // dpm('application_nid');
                  // dpm($application_nid);
                  // dpm('application_uid');
                  // dpm($application_uid);
                  // break;


                  // dpm(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $comment_id);

                  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $comment_id . '/creator/', array('name'=>$name));
                }
              }
            }
          }

          // $post  = 
          // break;
        }else if (strcasecmp($hostEntity->field_name, 'field_reply_comment') == 0){
          // reply ของ comment ของ post [reply->comment->post]
          // dpm($hostEntity->field_name);
          $reply_id = $hostEntity->item_id;
          if (property_exists($hostEntity->hostEntity(), 'field_name')) {
            // dpm($hostEntity->hostEntity());
            // 
            if (strcasecmp($hostEntity->hostEntity()->field_name, 'field_my_app_update_comment') == 0) {
              # code...
              $comment_entity = $hostEntity->hostEntity();
              $comment_id     = $comment_entity->item_id;

              //////////
              if (property_exists($comment_entity->hostEntity(), 'field_name')) {
                if (strcasecmp($comment_entity->hostEntity()->field_name, 'field_my_app_update') == 0){
                  $post_entity =  $comment_entity->hostEntity();
                  $post_id     =  $post_entity->item_id;

                  // dpm('post_id');
                  // dpm($post_id);
                  if (property_exists($post_entity->hostEntity(), 'type')) {
                    if (strcasecmp($post_entity->hostEntity()->type, 'application') == 0) {
                      $application_nid = $post_entity->hostEntity()->nid;
                      $application_uid = $post_entity->hostEntity()->uid;
                      // dpm('application_nid');
                      // dpm($application_nid);
                      // dpm('application_uid');
                      // dpm($application_uid);
                      // break;

                      // dpm(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $comment_id . '/replys/' . $reply_id);


                      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $comment_id . '/replys/' . $reply_id . '/creator/', array('name'=>$name));
                    }
                  }
                }
              }

              //////////
            }
          }
        }
      }
    }
  }
}

/*
  function ใช้สำหรับ update image_url ของ my application :
*/
function ___update_image_url_of_my_application($uid, $node_id,$image_url){
  global $firebase;

  // background_process_start('___update_image_url_of_my_application', $uid, $item_id, $uri);

  $node  = node_load($node_id);  

  // follower - following
  if (isset($node->field_my_app_follower[LANGUAGE_NONE])) {
    foreach ($node->field_my_app_follower[LANGUAGE_NONE] as $my_app_follower_k => $my_app_follower_v) {
      $my_app_follower_item = field_collection_item_load($my_app_follower_v['value']);

      $my_app_follower_item_uid = $my_app_follower_item->field_my_app_uid_follower[LANGUAGE_NONE][0]['value'];

      $my_app_follower_item_object_id = $my_app_follower_item->field_my_app_follower_object_id[LANGUAGE_NONE][0]['value'];

      $my_app_follower_item_uid_profile = profile2_by_uid_load($my_app_follower_item_uid, 'main');
      if(isset($my_app_follower_item_uid_profile->field_following[LANGUAGE_NONE])){
        foreach ($my_app_follower_item_uid_profile->field_following[LANGUAGE_NONE] as $following_k => $following_v) {
          $following_item = field_collection_item_load($following_v['value']);

        
          if (strcasecmp($following_item->field_my_app_follower_object_id[LANGUAGE_NONE][0]['value'], $my_app_follower_item_object_id) == 0 ) {
            # code...
            $following_item_wrapper = entity_metadata_wrapper('field_collection_item', $following_item);
            $following_item_wrapper->field_path_uri->set($image_url);
            $following_item_wrapper->save();

            $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $my_app_follower_item_uid .'/'. PATH_FOLLOWING .'/' . $following_item_wrapper->field_my_app_follower_object_id->value() . "/", array('image_url'=>$image_url) );
          }
        }
      }
    }
  }
  // follower - following


  // center chat
  // กรณีเราต้องวิ่งไป update ข้อมูลให้กับ field_my_app_chat ของเพือนที่เราคุยด้วย. โดยเราจะรู็จาก field_my_app_chat =>field_friend_uid
  $my_app_chat_query    = new EntityFieldQuery();
  $my_app_chat_entities = $my_app_chat_query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_my_app_chat')
                    ->fieldCondition('field_application_id', 'value', $node_id, '=')
                    ->fieldCondition('field_owner_id', 'value', $uid, '=')
                    ->execute();

  if (!empty($my_app_chat_entities['field_collection_item'])) {
    $item_ids = array_keys($my_app_chat_entities['field_collection_item']);
    foreach ($item_ids as $item_ids_k => $item_ids_v) {
      $item_id_item_load = field_collection_item_load($item_ids_v);
      // ต้องวิ่งไป update center_chat 
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $item_id_item_load->hostEntity()->uid . '/' . FIREBASE_CENTER_CHAT  . $item_ids_v . "/", array('image_url'=>$image_url));

    }
  }
  // center chat
}

/*
  function ใช้สำหรับ update image_url ของ user : members chat_groups | creator post, comment, reply
*/
function ___update_image_url_of_user($uid, $image_url){
  global $firebase;

  // update members chat_groups
  $chat_groups_profile = profile2_by_uid_load($uid, 'main');
  if(isset($chat_groups_profile->field_chat_group[LANGUAGE_NONE])){
    foreach ($chat_groups_profile->field_chat_group[LANGUAGE_NONE] as $chat_group_k => $chat_group_v) {
      $chat_group_item = field_collection_item_load($chat_group_v['value']);

      $chat_group_item_group_id = $chat_group_item->field_group_id[LANGUAGE_NONE][0]['value'];

      $chat_group_node         = node_load($chat_group_item_group_id);  
      // $chat_group_node_wrapper = entity_metadata_wrapper('node', $chat_group_node);

      // if (strcasecmp($chat_group_node_wrapper->title->value(), $data['name']) != 0) {
        // $chat_group_node_wrapper->title->set($data['name']);
        // $chat_group_node_wrapper->save();
      // }

      // watchdog(TAG, '1. > update_profile: %v', array('%v'=> $chat_group_item_group_id ), WATCHDOG_INFO);
      // field_members_group
      // watchdog(TAG, '1. update_profile: %v', array('%v'=> serialize($chat_group_node) ), WATCHDOG_INFO);
      if (isset($chat_group_node->field_members_group[LANGUAGE_NONE])) {
        # code...

        foreach ($chat_group_node->field_members_group[LANGUAGE_NONE] as $members_group_k => $members_group_v) {
          $members_group_item = field_collection_item_load($members_group_v['value']);
          
          // $__friend_id = $members_group_item->field_members_group_friend_id[LANGUAGE_NONE][0]['value'];
          // watchdog(TAG, '> update_profile: %v', array('%v'=> $__friend_id), WATCHDOG_INFO);
          if (strcasecmp($members_group_item->field_members_group_friend_id[LANGUAGE_NONE][0]['value'], $uid) == 0) {
            $chat_group_node_wrapper = entity_metadata_wrapper('field_collection_item', $members_group_item);
            $chat_group_node_wrapper->field_path_uri->set($image_url);
            $chat_group_node_wrapper->save();

            //
            // idna/chat_groups/{chat_group_id}/members/{user_id}/friend_image_url
            //
            $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CHAT_GROUPS . '/' . $chat_group_item_group_id .'/members/'. $members_group_v['value'] . '/' , array('friend_image_url'=>$image_url));

            break;
          }
        }
      }
    }
  }
  // update members chat_groups



  // การ query creator ทั้งระบบของ uid ขึ้นมาเพือทำการ update field_creator_image_uri, และข้อมูลที่ firebase ด้วย
  $creator_query      = new EntityFieldQuery();
  $creator_result = $creator_query->entityCondition('entity_type', 'field_collection_item')
                          ->entityCondition('bundle', 'field_creator')
                          ->fieldCondition('field_creator_uid', 'value', $uid, '=')
                          ->execute();

  if (!empty($creator_result['field_collection_item'])) {
    $creator_nids = array_keys($creator_result['field_collection_item']);
    foreach ($creator_nids as $creator_k => $creator_v) { 
      $creator_item = field_collection_item_load($creator_v);

      // update ส่วนของ drupal : field_creator  > field_creator_image_uri
      $creator_item_wrapper = entity_metadata_wrapper('field_collection_item', $creator_item);
      $creator_item_wrapper->field_creator_image_uri->set($image_url);
      $creator_item_wrapper->save();
      // update ส่วนของ drupal

      //
      // เป็นการค้นหา item_id เพือที่เราจะสามารถเข้าไป update ข้อมูลได้ถูกต้อง
      //
      $hostEntity = $creator_item->hostEntity();
      if (property_exists($hostEntity, 'field_name')) {
        //
        // เป็นส่วนของ post ของ application
        //
        if (strcasecmp($hostEntity->field_name, 'field_my_app_update') == 0) {
          $post_id = $hostEntity->item_id;
          if (property_exists($hostEntity->hostEntity(), 'type')) {
            //
            // เราต้อง check ว่า parent ของ post ต้องเป้น type = 'application' เท่านั้น 
            //
            if (strcasecmp($hostEntity->hostEntity()->type, 'application') == 0) {
              $application_nid = $hostEntity->hostEntity()->nid;
              $application_uid = $hostEntity->hostEntity()->uid;
              
              //
              //idna/user/{user_id}/my_applications/{app_id}/posts/{post_id}/creator/ > array('image_url'=>$image_url) 
              //
              $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/creator/', array('image_url'=>$image_url));
            }
          }
        }else if (strcasecmp($hostEntity->field_name, 'field_my_app_update_comment') == 0) {
          //
          // เป็นส่วนของ comment ของ post ของ application
          //
          $comment_id = $hostEntity->item_id;
          if (property_exists($hostEntity->hostEntity(), 'field_name')) {
            //
            // เราต้อง check ว่า parent ของ comment ต้องเป้น field_name = 'field_my_app_update' เท่านั้น 
            //
            if (strcasecmp($hostEntity->hostEntity()->field_name, 'field_my_app_update') == 0){

              $post_entity =  $hostEntity->hostEntity();
              $post_id     =  $post_entity->item_id;

              if (property_exists($post_entity->hostEntity(), 'type')) {
                //
                // เราต้อง check ว่า parent ของ post ต้องเป้น type = 'application' เท่านั้น 
                //
                if (strcasecmp($post_entity->hostEntity()->type, 'application') == 0) {
                  $application_nid = $post_entity->hostEntity()->nid;
                  $application_uid = $post_entity->hostEntity()->uid;
                 
                  //
                  // idna/user/{user_id}/my_applications/{app_id}/posts/{post_id}/comments/{comment_id}/creator > array('image_url'=>$image_url) 
                  //
                  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $comment_id . '/creator/', array('image_url'=>$image_url));
                }
              }
            }
          }

        }else if (strcasecmp($hostEntity->field_name, 'field_reply_comment') == 0){
          //
          // เป็นส่วนของ reply ของ comment ของ post ของ application
          //
          $reply_id = $hostEntity->item_id;
          if (property_exists($hostEntity->hostEntity(), 'field_name')) {
            //
            // เราต้อง check ว่า parent ของ reply ต้องเป้น field_name = 'field_my_app_update_comment' เท่านั้น 
            //
            if (strcasecmp($hostEntity->hostEntity()->field_name, 'field_my_app_update_comment') == 0) {
  
              $comment_entity = $hostEntity->hostEntity();
              $comment_id     = $comment_entity->item_id;
              if (property_exists($comment_entity->hostEntity(), 'field_name')) {

                //
                // เราต้อง check ว่า parent ของ comment ต้องเป้น field_name = 'field_my_app_update' เท่านั้น 
                //
                if (strcasecmp($comment_entity->hostEntity()->field_name, 'field_my_app_update') == 0){
                  $post_entity =  $comment_entity->hostEntity();
                  $post_id     =  $post_entity->item_id;

                  //
                  // เราต้อง check ว่า parent ของ post ต้องเป้น type = 'application' เท่านั้น 
                  //
                  if (property_exists($post_entity->hostEntity(), 'type')) {
                    if (strcasecmp($post_entity->hostEntity()->type, 'application') == 0) {
                      $application_nid = $post_entity->hostEntity()->nid;
                      $application_uid = $post_entity->hostEntity()->uid;
                      
                      //
                      // idna/user/{user_id}/my_applications/{app_id}/posts/{post_id}/comments/{comment_id}/replys/{reply_id}/creator > array('image_url'=>$image_url) 
                      //
                      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $application_uid .'/'. FIREBASE_MY_APPLIPATIONS_PATH . $application_nid . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $comment_id . '/replys/' . $reply_id . '/creator/', array('image_url'=>$image_url));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  // การ query creator ทั้งระบบของ uid ขึ้นมาเพือทำการ update field_creator_image_uri, และข้อมูลที่ firebase ด้วย
}

/*
  เป็น function ที่ใช้ update profile ที่โดนเรียกใช้ cloud function firebase
  โดยใช้ Update
  1. name
  2. status_message 
*/
function update_profile(){

  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  // if (empty($_REQUEST['uid']) || empty($_REQUEST['data'])) {
  //   $result['result'] = FALSE;
  //   $result['message']  = "function : update_profile, parameter";
  //   return $result;
  // }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_profile : parameter";
    return $result;
  }

  global $firebase;
  $uid    = $param['uid'];
  $data   = $param['data'];

  // Load Profile ขึ้นมาเพือจะทำการแก้ไข
  $profile = profile2_by_uid_load($uid, 'main');

  $check = 0;
  // name
  if (array_key_exists('name', $data)) {
    if (strcmp($profile->field_profile_name[LANGUAGE_NONE][0]['value'], $data['name']) != 0) {
      # code...
      // 
      $profile->field_profile_name[LANGUAGE_NONE][0]['value'] =$data['name'] ;//preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['name']) ;


      // เราต้องวิ่งไป update chat_group ด้วย
      if(isset($profile->field_chat_group[LANGUAGE_NONE])){
        foreach ($profile->field_chat_group[LANGUAGE_NONE] as $chat_group_k => $chat_group_v) {
          $chat_group_item = field_collection_item_load($chat_group_v['value']);

          $chat_group_item_group_id = $chat_group_item->field_group_id[LANGUAGE_NONE][0]['value'];

          $chat_group_node         = node_load($chat_group_item_group_id);  
          // $chat_group_node_wrapper = entity_metadata_wrapper('node', $chat_group_node);

          // if (strcasecmp($chat_group_node_wrapper->title->value(), $data['name']) != 0) {
            // $chat_group_node_wrapper->title->set($data['name']);
            // $chat_group_node_wrapper->save();
          // }

          // watchdog(TAG, '1. > update_profile: %v', array('%v'=> $chat_group_item_group_id ), WATCHDOG_INFO);
          // field_members_group
          // watchdog(TAG, '1. update_profile: %v', array('%v'=> serialize($chat_group_node) ), WATCHDOG_INFO);
          if (isset($chat_group_node->field_members_group[LANGUAGE_NONE])) {
            # code...

            foreach ($chat_group_node->field_members_group[LANGUAGE_NONE] as $members_group_k => $members_group_v) {
              $members_group_item = field_collection_item_load($members_group_v['value']);
              
              // $__friend_id = $members_group_item->field_members_group_friend_id[LANGUAGE_NONE][0]['value'];
              // watchdog(TAG, '> update_profile: %v', array('%v'=> $__friend_id), WATCHDOG_INFO);
              if (strcasecmp($members_group_item->field_members_group_friend_id[LANGUAGE_NONE][0]['value'], $uid) == 0) {
                $chat_group_node_wrapper = entity_metadata_wrapper('field_collection_item', $members_group_item);
                $chat_group_node_wrapper->field_members_group_friend_name->set($data['name']);
                $chat_group_node_wrapper->save();

                $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CHAT_GROUPS . '/' . $chat_group_item_group_id .'/members/'. $members_group_v['value'] . '/' , array('friend_name'=>$data['name']));

                break;
              }
            }
          }
        }
      }

      update_creator_name_post($uid, $data['name']);

      $check++;
    }

    if (strcmp($profile->field_profile_display_name[LANGUAGE_NONE][0]['value'], $data['name']) != 0) {
      # code...
      $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'] = $data['name'];//preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['name']);

      $check++;
    }
  }

  // My ID 
  if (array_key_exists('my_id', $data)) {
    foreach ($data['my_id'] as $key => $value) {
      $item_load = field_collection_item_load($key);
      if ($item_load) {
        if ($item_load->field_profile_my_id_value[LANGUAGE_NONE][0]['value'] != $value['value'] ) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          $wrapper->field_profile_my_id_value->set($value['value']);
          $wrapper->field_profile_my_id_is_edit->set($value['is_edit']);    
          $wrapper->save();
        }
      }else{
        $val['field_name'] = 'field_profile_my_id';
        $val['field_profile_my_id_value'][LANGUAGE_NONE][0]['value'] = $value['value'];
        $val['field_profile_my_id_is_edit'][LANGUAGE_NONE][0]['value'] = $value['is_edit'];

        $field_entity = entity_create('field_collection_item', $val);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();
      }
    }
  }

  // status message
  if (array_key_exists('status_message', $data)) {
    if (strcmp($profile->field_profile_status_message[LANGUAGE_NONE][0]['value'], $data['status_message']) != 0) {
      # code...

      $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'] = $data['status_message'];//preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['status_message']);

      $check++;
    }
  }

  // image_url
  /*
  if (array_key_exists('image_url', $data)) {

    $image_url = substr(file_create_url(image_style_url('medium', $profile->field_profile_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));

    $result['x'] = 'x';
    $result['y'] = $image_url;
    $result['z'] = $data['image_url'];
    if (strcmp($image_url, $data['image_url']) != 0) {

      $result['image_url'] = $image_url;
      $check++;
    }
  }
  */

  // badge
  /*
  if (array_key_exists('badge', $data)) {
    if (strcmp($profile->field_profile_badge[LANGUAGE_NONE][0]['value'], $data['badge']) != 0) {
      $profile->field_profile_badge[LANGUAGE_NONE][0]['value'] = $data['badge'];

      $check++;
    }
  }
  */

  if (array_key_exists('badges', $data)) {
    foreach ($data['badges'] as $badges_key => $badges_value) {
      $badges_item_load = field_collection_item_load($badges_key);
      if ($badges_item_load) {
        
        $badges_wrapper = entity_metadata_wrapper('field_collection_item', $badges_item_load);
        $badges_wrapper->field_profile_badge_contact->set($badges_value['contact']);
        $badges_wrapper->field_profile_badge_recent->set($badges_value['recent']);
        $badges_wrapper->field_profile_badge_center->set($badges_value['center']);
        $badges_wrapper->field_profile_badge_setting->set($badges_value['setting']);
        $badges_wrapper->save();
        
      }else{
        $badges_v['field_name'] = 'field_profile_badges';

        // watchdog(TAG, 'badges contact: %v', array('%v'=> $badges_value['contact']), WATCHDOG_INFO);
        // watchdog(TAG, 'badges recent: %v', array('%v'=> $badges_value['recent']), WATCHDOG_INFO);
        // watchdog(TAG, 'badges center: %v', array('%v'=> $badges_value['center']), WATCHDOG_INFO);
        // watchdog(TAG, 'badges setting: %v', array('%v'=> $badges_value['setting']), WATCHDOG_INFO);

        
        if (isset($badges_value['contact'])) {
          $badges_v['field_profile_badge_contact'][LANGUAGE_NONE][0]['value'] = $badges_value['contact'];
        }else{
          $badges_v['field_profile_badge_contact'][LANGUAGE_NONE][0]['value'] = '0';
        }
        
        if (isset($badges_value['recent'])) {
          $badges_v['field_profile_badge_recent'][LANGUAGE_NONE][0]['value']  = $badges_value['recent'];
        }else{
          $badges_v['field_profile_badge_recent'][LANGUAGE_NONE][0]['value']  = '0';
        }
        
        if (isset($badges_value['center'])) {
          $badges_v['field_profile_badge_center'][LANGUAGE_NONE][0]['value']  = $badges_value['center'];
        }else{
          $badges_v['field_profile_badge_center'][LANGUAGE_NONE][0]['value']  = '0';
        }

        if (isset($badges_value['setting'])) {
          $badges_v['field_profile_badge_setting'][LANGUAGE_NONE][0]['value'] = $badges_value['setting'];
        }else{
          $badges_v['field_profile_badge_setting'][LANGUAGE_NONE][0]['value'] = '0';
        }
        
        $field_entity = entity_create('field_collection_item', $badges_v);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();
      }
    }
  }

  // mails
  if (array_key_exists("mails", $data)) {
    // $mails = $data['mails'];
    foreach ($data['mails'] as $key => $value) {
      $item_load = field_collection_item_load($key);
      if ($item_load) {
        if ($item_load->field_email_text[LANGUAGE_NONE][0]['value'] != $value['name'] ) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          $wrapper->field_email_text->set($value['name']);
          $wrapper->save();
        }
      }else{
        $val['field_name'] = 'field_profile_multi_email';
        $val['field_email_text'][LANGUAGE_NONE][0]['value'] = $value['name'];

        $field_entity = entity_create('field_collection_item', $val);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();
      }
    }
  }

  // phone 
  if (array_key_exists("phones", $data)) {
    foreach ($data['phones'] as $key => $value) {
      $item_load = field_collection_item_load($key);
      if ($item_load) {
        if ($item_load->field_phone_number[LANGUAGE_NONE][0]['value'] != $value['name'] ) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);
          $wrapper->field_phone_number->set($value['name']);
          $wrapper->save();
        }
      }else{
        $val['field_name'] = 'field_profile_multi_email';
        $val['field_phone_number'][LANGUAGE_NONE][0]['value'] = $value['name'];

        $field_entity = entity_create('field_collection_item', $val);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();
      }
    }
  }

  // address
  if (array_key_exists('address', $data)) {
    if (isset($profile->field_profile_address[LANGUAGE_NONE])) {
      if (strcmp($profile->field_profile_address[LANGUAGE_NONE][0]['value'], $data['address']) != 0) {
        # code...


        $profile->field_profile_address[LANGUAGE_NONE][0]['value'] = $data['address'];//preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['address']);

        $check++;
      }
    }
  }

  // gender 
  if (array_key_exists('gender', $data)) {
    if (isset($profile->field_profile_gender[LANGUAGE_NONE])) {
      if (strcmp($profile->field_profile_gender[LANGUAGE_NONE][0]['tid'], $data['gender']) != 0) {
        # code...
        $profile->field_profile_gender[LANGUAGE_NONE][0]['tid'] = $data['gender'];

        $check++;
      }
    }
  }

  // field_profile_school
  if (array_key_exists('school', $data)) {
    if (isset($profile->field_profile_school[LANGUAGE_NONE])) {
      if (strcmp($profile->field_profile_school[LANGUAGE_NONE][0]['value'], $data['school']) != 0) {
        # code...
        $profile->field_profile_school[LANGUAGE_NONE][0]['value'] = $data['school'];//preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['school']);

        $check++;
      }
    }
  }

  // field_profile_company
  if (array_key_exists('company', $data)) {
    if (isset($profile->field_profile_company[LANGUAGE_NONE])) {
      if (strcmp($profile->field_profile_company[LANGUAGE_NONE][0]['value'], $data['company']) != 0) {
        # code...
        $profile->field_profile_company[LANGUAGE_NONE][0]['value'] = $data['company'];//preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['company']);

        $check++;
      }
    }
  }

  // birthday
  if (array_key_exists('birthday', $data)) {
    if (isset($profile->field_profile_birthday[LANGUAGE_NONE])) {
      if (strcmp($profile->field_profile_birthday[LANGUAGE_NONE][0]['value'], $data['birthday']) != 0) {
        # code...
        $profile->field_profile_birthday[LANGUAGE_NONE][0]['value'] = $data['birthday'];

        $check++;
      }
    }
  }

  // line_id
  if (array_key_exists('line_id', $data)) {
    if (isset($profile->field_profile_line_id[LANGUAGE_NONE])) {
      if (strcmp($profile->field_profile_line_id[LANGUAGE_NONE][0]['value'], $data['line_id']) != 0) {
        # code...
        $profile->field_profile_line_id[LANGUAGE_NONE][0]['value'] = $data['line_id'];//preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data['line_id']);

        $check++;
      }
    }
  }


  // field_sound_call_waiting
  // sound_call_waiting
  if (array_key_exists('sound_call_waiting', $data)) {
    foreach ($data['sound_call_waiting'] as $sound_call_waiting_key => $sound_call_waiting_value) {
      $sound_call_waiting_item_load = field_collection_item_load($sound_call_waiting_key);
      if ($sound_call_waiting_item_load) {
        if ($sound_call_waiting_item_load->field_sound_call_waiting_item_id[LANGUAGE_NONE][0]['value'] != $sound_call_waiting_value['nid'] ) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $sound_call_waiting_item_load);
          $wrapper->field_sound_call_waiting_item_id->set($sound_call_waiting_value['nid']);
          $wrapper->field_sound_call_waiting_title->set($sound_call_waiting_value['title']);   
          $wrapper->field_sound_call_waiting_uri->set($sound_call_waiting_value['sound_url']);    
          $wrapper->save();

          // watchdog(TAG, 'sound_call_waiting: %v', array('%v'=> serialize($value) ), WATCHDOG_INFO);
          $check++;
        }
      }else{

        // watchdog(TAG, 'else sound_call_waiting: %v', array('%v'=> serialize($value) ), WATCHDOG_INFO);
        $sound_call_waiting_v['field_name'] = 'sound_call_waiting';
        $sound_call_waiting_v['field_sound_call_waiting_item_id'][LANGUAGE_NONE][0]['value'] = $sound_call_waiting_value['nid'];
        $sound_call_waiting_v['field_sound_call_waiting_title'][LANGUAGE_NONE][0]['value']   = $sound_call_waiting_value['title'];
        $sound_call_waiting_v['field_sound_call_waiting_uri'][LANGUAGE_NONE][0]['value']     = $sound_call_waiting_value['sound_url'];

        $field_entity = entity_create('field_collection_item', $sound_call_waiting_v);
        $field_entity->setHostEntity('profile2', $profile);
        $field_entity->save();

        $check++;
      }
    }
  }

  if (array_key_exists('device_access', $data)) {
    foreach ($data['device_access'] as $device_access_key => $device_access_value) {
      $device_access_item_load = field_collection_item_load($device_access_key);
      if ($device_access_item_load) {
        if (strcmp($device_access_item_load->field_udid[LANGUAGE_NONE][0]['value'], $device_access_value['udid']) == 0) {
      
          $device_access_wrapper = entity_metadata_wrapper('field_collection_item', $device_access_item_load);

          $device_access_wrapper->field_device_access_build->set($device_access_value['build']);
          $device_access_wrapper->field_bundle_identifier->set($device_access_value['bundle_identifier']);
          $device_access_wrapper->field_device_name->set($device_access_value['device_name']);
          $device_access_wrapper->field_is_login->set($device_access_value['is_login']);
          $device_access_wrapper->field_model_number->set($device_access_value['model_number']);
          $device_access_wrapper->field_online->set($device_access_value['online']);
          $device_access_wrapper->field_platform->set($device_access_value['platform']);
          $device_access_wrapper->field_key_token_notification->set($device_access_value['token_notification']);
          $device_access_wrapper->field_pushkit_token->set($device_access_value['token_pushkit']);
          $device_access_wrapper->field_udid->set($device_access_value['udid']);
          $device_access_wrapper->field_device_access_version->set($device_access_value['version']);

          $device_access_wrapper->save();

          $check++;
        }
      }
    }
  }

  /*
    เราจะ udpate database ก็ต่อเมือมีการ udpate ข้อมูลเท่านั้น
  */ 
  if ($check > 0) {
    profile2_save($profile);
  }
  
  $result['result'] = TRUE;
  return  $result;
}


function create_my_card()
{
  $result = array();

  if (!empty($_POST['uid']) && !empty($_POST['name'])) {
    $content_type = "page_my_card";

    $node = new stdClass();
    $node->title = $_POST['name'];
    $node->type  = $content_type;
    $node->uid   = $_POST['uid'];
    // $node->body[LANGUAGE_NONE][0]['value']  = "";
    // $node->field_verify_token[LANGUAGE_NONE][0]['value']  = $_POST['UDID'];
    // $node->field_verify_key[LANGUAGE_NONE][0]['value']    = $verify_key;
    
    $node->language = LANGUAGE_NONE;
    // $node->revision = 0;

    $node = node_submit($node);
    node_save($node);


    // create to firebase
    /*
        // insert new 12/24/2559
        if ( $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profile/') == 'null') {
          # code...
          
          $extension = explode('@', $account->mail);

          if (strcasecmp($extension[1], 'annmousu') == 0) {
             $data_profile = array(
              "uid"             => $account->uid,
              "display_name"    => generate_name_annmousu($account->name),
              "picture"         => '',
              "phone"           => '',
              "status_message"  => '',
              "heart"           => DEFUALT_NUMBER_HEART,
              "create"          => time(),
              "update"          => time()
            );

          }else{

            $data_profile = array(
              "uid"             => $account->uid,
              "display_name"    => $account->name,
              "picture"         => '',
              "phone"           => '',
              "status_message"  => '',
              "heart"           => DEFUALT_NUMBER_HEART,
              "create"          => time(),
              "update"          => time()
            );
          }

          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profile/', $data_profile);

        }else{
          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid . '/profile/', $data);
        }
        // insert new 12/24/2559

      }


      // เก้บเครื่องที่ user ใช้
      $data = array(
        "udid" => $_GET['udid'],
        "platform"=>$_GET['platform'],
        "token"=>$_GET['token'],
        "online"=>'1',
        "create" => time(),
        "update" => time()
      );

      $firebase->push(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $account->uid .'/HW/', $data);
    */
      /*
    $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
    // if ( $firebase->get(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $_POST['uid'] . '/my-id/my-card/') == 'null') {

      $data = array(
              "name"      => $_POST['name'],
              "photo"     => '',
              "email"     => array(),
              "phone"     => array(),
              "create"    => time(),
              "update"    => time()
            );
      $firebase->push(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $_POST['uid'] . '/my-id/my-card/', $data);
    // }
      */


    // create to firebase

    $result['result'] = TRUE;
  }else{
    $result['result'] = FALSE;
    $result['message'] = "Empty uid & name.";
  }

  $result['$_POST'] = $_POST;
  return $result;
}


function _load_imag_defualt_card_background(){
  $filename = 'ic_defualt_card_background.png';
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'file')
    ->propertyCondition('filename', $filename)
    ->execute();
  // if you are guaranteed there is exactly one result, then:
  $file_object = reset($result['file']);
  $fid = $file_object->fid;

  return file_load($fid);
}

function _load_imag_defualt_profile(){
  $filename = 'ic_defualt_profile.png';
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'file')
    ->propertyCondition('filename', $filename)
    ->execute();
  // if you are guaranteed there is exactly one result, then:
  $file_object = reset($result['file']);
  $fid = $file_object->fid;

  return file_load($fid);
}

function _load_imag_defualt_application(){
  $filename = 'bg.png';
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'file')
    ->propertyCondition('filename', $filename)
    ->execute();
  // if you are guaranteed there is exactly one result, then:
  $file_object = reset($result['file']);
  $fid = $file_object->fid;

  return file_load($fid);
}

function create_defualt_application($uid){
  global $firebase;

  $name         = 'Default';
  $category     = '9';
  $subcategory  = '14';

  $image_url    = (array)getDefualtPictureProfileMyApplication();


  $node = new stdClass();
  $node->title = $name;
  $node->type  = "application";
  $node->uid   = $uid;

  // $node->field_my_app_name[LANGUAGE_NONE][0]['value']     = $name;

  // $node->field_image[LANGUAGE_NONE][0]                      = $image_url;
  $node->field_my_app_picture[LANGUAGE_NONE][0]             = $image_url;
  $node->field_my_app_category[LANGUAGE_NONE][0]['tid']     = $category;
  $node->field_my_app_subcategoty[LANGUAGE_NONE][0]['tid']  = $subcategory;

  $node->language = LANGUAGE_NONE;
  $node->status   = 0;
  $node->comment  = 0; 
  $node = node_submit($node);
  node_save($node);


  $data_update = array(
      "owner_id"    => $uid,
      "is_defualt"  => "1",
      "name"        => $name,
      "category"    => $category,
      "subcategory" => $subcategory,
      "status"      => "0",
      "image_url"   => substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']))
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/" . FIREBASE_MY_APPLIPATIONS_PATH . $node->nid, $data_update);

  $result['result']   = TRUE;
  return $result; 
}

function create_my_application(){
  $result = array();

  global $firebase;

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['name']) || empty($_REQUEST['image']) || empty($_REQUEST['category']) || empty($_REQUEST['subcategory'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : create_my_application, parameter";
    return $result;
  }

  $uid      = $_REQUEST['uid'];
  $name     = $_REQUEST['name'];
  $image    = $_REQUEST['image'];
  $category = $_REQUEST['category'];
  $subcategory = $_REQUEST['subcategory'];

  if($image != ""){

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

  }

  /*
  $profile = profile2_by_uid_load($uid, 'main');

  # code...
  $val = array();
  $val['field_name'] = 'field_my_application'; // field collection name

  $val['field_my_application_uid'][LANGUAGE_NONE][0]['value']   = $uid;
  $val['field_my_app_name'][LANGUAGE_NONE][0]['value']          = $name;
  $val['field_my_app_category'][LANGUAGE_NONE][0]['tid']        = $category;
  $val['field_my_app_subcategoty'][LANGUAGE_NONE][0]['tid']     = $subcategory;

  $val['field_image'][LANGUAGE_NONE][0]                         = $image_url;
  

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $val);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();


  // Firebase : update image url profile
  $data_update = array(
      "owner_id"   => $uid,
      "is_defualt" => "0",
      "name"       => $name,
      "category"   => $category,
      "subcategory"   => $subcategory,
      "image_url"  => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']))
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/" . FIREBASE_MY_APPLIPATIONS_PATH . $field_entity->item_id, $data_update);

  
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $field_entity->item_id, $data_update);

  $result['result']   = TRUE;
  $result['item']     = $data_update;
  $result['item_id']  = $field_entity->item_id;
  */



  // 
  $node = new stdClass();
  $node->title = $name;// preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $name);
  $node->type  = "application";
  $node->uid   = $uid;

  // $node->field_my_app_name[LANGUAGE_NONE][0]['value']     = $name;//preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $name);

  // $node->field_image[LANGUAGE_NONE][0]                      = $image_url;
  $node->field_my_app_picture[LANGUAGE_NONE][0]             = $image_url;
  $node->field_my_app_category[LANGUAGE_NONE][0]['tid']     = $category;
  $node->field_my_app_subcategoty[LANGUAGE_NONE][0]['tid']  = $subcategory;

  $node->language = LANGUAGE_NONE;
  $node->status   = 0;
  $node->comment  = 0; 
  $node = node_submit($node);
  node_save($node);

  $data_update = array(
      "owner_id"    => $uid,
      "is_defualt"  => "0",
      "name"        => $name,
      "category"    => $category,
      "subcategory" => $subcategory,
      "status"      => "0",

      // $url = substr(file_create_url(image_style_url('medium',$image_url['uri'])), strlen($GLOBALS['base_url']));
      "image_url"   => substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']))
  );
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $uid ."/" . FIREBASE_MY_APPLIPATIONS_PATH . $node->nid, $data_update);

  // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $node->nid, $data_update);

  $result['result']   = TRUE;
  $result['item']     = $data_update;
  $result['item_id']  = $node->nid;

  return $result;
}

function create_my_application_follow(){
  $result = array();

  global $firebase;

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['owner_id']) || empty($_REQUEST['app_id']) || empty($_REQUEST['friend_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : create_my_application_follow, parameter";

    return $result;
  }
  /*
    เจ้าของ application
  */
  $owner_id    = $_REQUEST['owner_id'];

  /*
  เพือนที่กด follow application
  */
  $friend_id    = $_REQUEST['friend_id'];

  /*
  id application
  */
  $app_id = $_REQUEST['app_id'];


  /*
    เพิ่มเติม
    เราต้องวิ่งไปเพิ่ม following ของ friend_id ด้วย
  */ 
  $friend_profile = profile2_by_uid_load($friend_id, 'main');

  $flag = false;
  if(isset($friend_profile->field_following)){
    foreach ($friend_profile->field_following[LANGUAGE_NONE] as $key => $value) {
      $items = field_collection_item_load($value['value']);
      if ($items->field_id_my_app_following[LANGUAGE_NONE][0]['value'] == $app_id ) {
        $flag = true;
        break;
      }
    }
  }
  
  if (!$flag) {
    $values = array();
    $values['field_name'] = 'field_following'; 

    // #1 field_class_image_profile
    $values['field_id_my_app_following'][LANGUAGE_NONE][0]['value'] = $app_id;
  
    // #2 field_name_group
    $values['field_status_following'][LANGUAGE_NONE][0]['value'] = "1";

    // Create the field collection entry and associate it with the profile
    $field_entity = entity_create('field_collection_item', $values);
    $field_entity->setHostEntity('profile2', $friend_profile);
    $field_entity->save();


    $data_update = array(
      "item_id"    => $field_entity->item_id,
      "status"     => "1",
      "create"     => time(),
      "update"     => time()
    );
    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $friend_id ."/" . PATH_FOLLOWING ."/". $app_id, $data_update);
  }

  // เพิ่มเติม

  /*
    เป็นการ load my_app_follower  ทั้งหมด เพือ check ว่าเราเคยกด follow หรือไม่ ถ้าไม่ ก็ สร้าง ปกติ แต่ถ้า เคยแล้วให้  return item_id 
  */
    
  $data_item = field_collection_item_load($app_id);
  foreach ($data_item->field_my_app_follower[LANGUAGE_NONE] as $key => $value) {
    $items = field_collection_item_load($value['value']);
    if ($items->field_my_app_uid_follower[LANGUAGE_NONE][0]['value'] == $friend_id ) {
      # code...
      $result['result']   = TRUE;
      $result['item_id']  = $value['value'];

      return $result;
      break;
    } 
  }


  $profile = profile2_by_uid_load($owner_id, 'main');
  foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
    if ($app_id == $value['value']) {

      $data = field_collection_item_load($value['value']);

      // $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      //$wrapper->field_my_app_follower->value();

/*
      $result['p'] = $app_id;
      $result['w'] = $wrapper = entity_metadata_wrapper('field_collection_item', $data);
      $result['x'] =  $data->field_my_app_follower[LANGUAGE_NONE];

      $result['y'] =  $data->field_my_app_follower;

      if (!empty($data->field_my_app_follower[LANGUAGE_NONE])) {
        foreach ($data->field_my_app_follower[LANGUAGE_NONE] as $ckey => $cvalue) {
          $result[][$ckey] =  $cvalue;
        }
      }
*/




      $values = array();
      $values['field_name'] = 'field_my_app_follower'; 
      /*
      uid friend ที่กด follow
      */
      $values['field_my_app_uid_follower'][LANGUAGE_NONE][0]['value'] = $friend_id;
      $values['field_status_follow'][LANGUAGE_NONE][0]['value'] = '1';
      // $val['field_image'][LANGUAGE_NONE][0] = (array)$file;

      
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity("field_my_app_follower", $data);
      $field_entity->save();  //  ยังมีปัญหาอยู่ ต้องแก้ใขเพราะว่าไม่ได้ return สถานะเอามาว่าสำเร็จหรือเปล่า แต่ save สำเร็จ      

      /*
      $value = array(
        "title"     => $title,                        
        "message"   => $detail,
        "image_url" => substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url'])),
        "create"    => time(),
        "update"    => time()
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $field_entity->item_id .'/' , $value);


      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $data->field_my_app_category[LANGUAGE_NONE][0]['tid'] .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $field_entity->item_id .'/' , $value);
      */

      $result['result']   = TRUE;
      $result['item_id']  = $field_entity->item_id;

      return $result;
      break;
    }
  }

  $result['result']   = FALSE;
  return $result;
}

function delete_following(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['owner_id']) || empty($param['object_id']) || empty($param['data'])) {
    $result['result']  = FALSE;
    $result['message'] = "function delete_following : parameter";
    $result['_REQUEST']= $param;
    return $result;
  }
  // global $firebase;
  // $uid  = $param['uid'];
  $data = $param['data'];

  entity_delete_multiple('field_collection_item', array($data['item_id']));

  $result['result']  = TRUE;
  $result['param']  = $param;
  return $result;
}

function update_chat_group(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['chat_group_id']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_chat_group : parameter";
    return $result;
  }

  $chat_group_id   = $param['chat_group_id'];     //  uid เจ้าของ application 
  $data            = $param['data'];    


  $node         = node_load($chat_group_id);  
  $node_wrapper = entity_metadata_wrapper('node', $node);

  if (strcasecmp($node_wrapper->title->value(), $data['name']) != 0) {
    $node_wrapper->title->set($data['name']);
  }

  $node_wrapper->save();

  $result['result'] = TRUE;
  $result['param']  = $param;
  return $result;
}

function go_live_streaming(){
    $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['application_id'])) {
    $result['result'] = FALSE;
    $result['message'] = "function go_live_streaming : parameter";
    return $result;
  }

  global $firebase;
  $uid             = $_REQUEST['uid'];
  $application_id  = $_REQUEST['application_id']; 

  $live_name       = base64_encode($application_id);

  $collection_item_query    = new EntityFieldQuery();
  $collection_item_output   = $collection_item_query->entityCondition('entity_type', 'field_collection_item')
                              ->entityCondition('bundle', 'field_my_app_live_streaming')
                              ->fieldCondition('field_ls_object_id', 'value', $live_name, '=')
                              ->execute();

  if (!empty($collection_item_output['field_collection_item'])) {
    $collection_item = array_keys($collection_item_output['field_collection_item']);
    foreach ($collection_item as $k => $v) {
      $collection_item_load = field_collection_item_load($v);
      
      $wrapper = entity_metadata_wrapper('field_collection_item', $collection_item_load);
      $wrapper->field_ls_status->set('init'); 
      $wrapper->save();
    }
  }else{
    $val = array();
    $val['field_name'] = 'field_my_app_live_streaming';
    $val['field_ls_object_id'][LANGUAGE_NONE][0]['value']  = $live_name;
    $val['field_ls_status'][LANGUAGE_NONE][0]['value']     = 'init' ;
    
    $field_entity = entity_create('field_collection_item', $val);
    $field_entity->setHostEntity('node', node_load($application_id));
    $field_entity->save();
  }

  $result['result']  = TRUE;
  return $result;
}

function update_my_applications_live(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['owner_id']) || empty($param['node_id']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_my_applications_live : parameter";
    return $result;
  }
  global $firebase;

  $uid        = $param['owner_id'];
  $node_id    = $param['node_id']; 
  $data       = $param['data'];    


  /*
  // field_collection_item -- field_my_app_live_streaming --
  $application_node = node_load($node_id);

  if (isset($application_node->field_my_app_live_streaming[LANGUAGE_NONE])) {
    foreach ($application_node->field_my_app_live_streaming[LANGUAGE_NONE] as $k => $v) {
      $item = field_collection_item_load($v['value']);

      $wrapper = entity_metadata_wrapper('field_collection_item', $item);

      $ls_object_id =  $item->field_ls_object_id[LANGUAGE_NONE][0]['value'];
      if (strcasecmp($ls_object_id, $data['object_id']) != 0 ) {
        $wrapper->field_ls_object_id->set($data['object_id']);
        $wrapper->field_ls_status->set('init');
      }
      
      $wrapper->save();
    }
  }else{
    $val = array();
    $val['field_name'] = 'field_my_app_live_streaming';
    $val['field_ls_object_id'][LANGUAGE_NONE][0]['value']  = $data['object_id'];
    $val['field_ls_status'][LANGUAGE_NONE][0]['value']     = 'init' ;
    
    $field_entity = entity_create('field_collection_item', $val);
    $field_entity->setHostEntity('node', $application_node);
    $field_entity->save();
  }
  // field_collection_item -- field_my_app_live_streaming --
  */

  $result['result']  = TRUE;
  return $result;
}

function update_my_applications(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['owner_id']) || empty($param['node_id']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_my_applications : parameter";
    return $result;
  }
  global $firebase;

  $uid     = $param['owner_id'];     //  uid เจ้าของ application 
  $node_id = $param['node_id'];     //  app_id 
  $data    = $param['data'];    

  $node    = node_load($node_id);  
  $node_wrapper = entity_metadata_wrapper('node', $node);

  $result['nid'] = $node->nid;
  
  if (strcasecmp($node_wrapper->title->value(), $data['name']) != 0) {
    // $node_wrapper->title->set(preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $param['data']['name']));
    $node_wrapper->title->set($param['data']['name']);

    $on_store = $node_wrapper->field_on_store->value();
    if ($on_store) {
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . '/' . $node->nid , array('name'=>$param['data']['name']));
    }


    // กรณีเราต้องวิ่งไป update ข้อมูลให้กับ field_my_app_chat ของเพือนที่เราคุยด้วย. โดยเราจะรู็จาก field_my_app_chat =>field_friend_uid
    $my_app_chat_query    = new EntityFieldQuery();
    $my_app_chat_entities = $my_app_chat_query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_my_app_chat')
                      ->fieldCondition('field_application_id', 'value', $node_id, '=')
                      ->fieldCondition('field_owner_id', 'value', $uid, '=')
                      ->execute();

    if (!empty($my_app_chat_entities['field_collection_item'])) {
      $item_ids = array_keys($my_app_chat_entities['field_collection_item']);
      foreach ($item_ids as $item_ids_k => $item_ids_v) {
        $item_id_item_load = field_collection_item_load($item_ids_v);
        // ต้องวิ่งไป update center_chat 
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $item_id_item_load->hostEntity()->uid . '/' . FIREBASE_CENTER_CHAT  . $item_ids_v . "/", array("name"=> $param['data']['name']));

      }
    }

    // watchdog(TAG, '> update_my_applications header: %hostEntity - %uid', array('%hostEntity'=> $node_id, '%uid'=>$uid), WATCHDOG_INFO);


    // follower - following
    if (isset($node->field_my_app_follower[LANGUAGE_NONE])) {
      foreach ($node->field_my_app_follower[LANGUAGE_NONE] as $my_app_follower_k => $my_app_follower_v) {
        $my_app_follower_item = field_collection_item_load($my_app_follower_v['value']);

        $my_app_follower_item_uid = $my_app_follower_item->field_my_app_uid_follower[LANGUAGE_NONE][0]['value'];

        $my_app_follower_item_object_id = $my_app_follower_item->field_my_app_follower_object_id[LANGUAGE_NONE][0]['value'];

        $my_app_follower_item_uid_profile = profile2_by_uid_load($my_app_follower_item_uid, 'main');
        if(isset($my_app_follower_item_uid_profile->field_following[LANGUAGE_NONE])){
          foreach ($my_app_follower_item_uid_profile->field_following[LANGUAGE_NONE] as $following_k => $following_v) {
            $following_item = field_collection_item_load($following_v['value']);

          
            if (strcasecmp($following_item->field_my_app_follower_object_id[LANGUAGE_NONE][0]['value'], $my_app_follower_item_object_id) == 0 ) {
              # code...
              $following_item_wrapper = entity_metadata_wrapper('field_collection_item', $following_item);
              $following_item_wrapper->field_my_app_name->set($param['data']['name']);
              $following_item_wrapper->save();

              $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $my_app_follower_item_uid .'/'. PATH_FOLLOWING .'/' . $following_item_wrapper->field_my_app_follower_object_id->value() . "/", array('name'=>$param['data']['name']) );
            }
          }
        }
      }
    }
    // follower - following


  }

  // mails
  if (array_key_exists("mails", $data)) {

    foreach ($data['mails'] as $key => $value) {
      $query  = new EntityFieldQuery();
      $entities = $query->entityCondition('entity_type', 'field_collection_item')
                        ->entityCondition('bundle', 'field_my_app_multi_email')
                        ->fieldCondition('field_object_id', 'value', $key, '=')
                        ->fieldCondition('field_item_id', 'value', $value['item_id'], '=')
                        ->execute();

      if (!empty($entities['field_collection_item'])) {
        $item_id = array_keys($entities['field_collection_item'])[0];
        $data_item = field_collection_item_load($item_id);

        if ($data_item) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
          if (strcmp($wrapper->field_enable->value(), $value["enabled"]) != 0) {
            $wrapper->field_enable->set($value["enabled"]);
            $wrapper->save();
          }
        }
      }else{

        $val = array();
        $val['field_name'] = 'field_my_app_multi_email';
        $val['field_object_id'][LANGUAGE_NONE][0]['value']  = $key;
        $val['field_item_id'][LANGUAGE_NONE][0]['value']    = $value['item_id'];
        $val['field_email_text'][LANGUAGE_NONE][0]['value'] = $value['name'];
        $val['field_enable'][LANGUAGE_NONE][0]['value']     = $value["enabled"];

        $field_entity = entity_create('field_collection_item', $val);
        $field_entity->setHostEntity('node', $node);
        $field_entity->save();
      }
    }
  }else{
    if (!empty($node->field_my_app_multi_email[LANGUAGE_NONE])) {
      foreach ($node->field_my_app_multi_email[LANGUAGE_NONE] as $k => $v) {
        $item_load = field_collection_item_load($v['value']);
        if (is_array($item_load)) {
          entity_delete_multiple('field_collection_item', array($item_load->item_id));
        }
      }
    }
  }

  // phones 
  if (array_key_exists("phones", $data)) {
    foreach ($data['phones'] as $key => $value) {
      $query  = new EntityFieldQuery();
      $entities = $query->entityCondition('entity_type', 'field_collection_item')
                        ->entityCondition('bundle', 'field_my_app_multi_phone')
                        ->fieldCondition('field_object_id', 'value', $key, '=')
                        ->fieldCondition('field_item_id', 'value', $value['item_id'], '=')
                        ->execute();

      if (!empty($entities['field_collection_item'])) {
        $item_id = array_keys($entities['field_collection_item'])[0];
        $data_item = field_collection_item_load($item_id);

        if ($data_item) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
          if (strcmp($wrapper->field_enable->value(), $value["enabled"]) != 0) {
            $wrapper->field_enable->set($value["enabled"]);
            $wrapper->save();
          }
        }
      }else{

        $val = array();
        $val['field_name'] = 'field_my_app_multi_phone';
        $val['field_object_id'][LANGUAGE_NONE][0]['value']  = $key;
        $val['field_item_id'][LANGUAGE_NONE][0]['value']    = $value['item_id'];
        $val['field_phone_number'][LANGUAGE_NONE][0]['value'] = $value['name'];
        $val['field_enable'][LANGUAGE_NONE][0]['value']     = $value["enabled"];

        $field_entity = entity_create('field_collection_item', $val);
        $field_entity->setHostEntity('node', $node);
        $field_entity->save();
      }
    }
  }else{
    if (!empty($node->field_my_app_multi_phone[LANGUAGE_NONE])) {
      foreach ($node->field_my_app_multi_phone[LANGUAGE_NONE] as $k => $v) {
        $item_load = field_collection_item_load($v['value']);
        if (is_array($item_load)) {
          entity_delete_multiple('field_collection_item', array($item_load->item_id));
        }
      }
    }
  }

  if (array_key_exists("follow", $data)) {
    $app_node_id   = $node->nid;
    $app_name      = $node->title;
    $app_image_url = substr(file_create_url(image_style_url('medium', $node->field_my_app_picture[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));


    $owner_profile = profile2_by_uid_load($uid, 'main');

    foreach ($data['follow'] as $k_follow => $v_follow) {
      // $result['follow'][] = $k_follow;

      // user following profile ที่กด following
      $user_following = profile2_by_uid_load($v_follow['uid'], 'main');

      $follower_query  = new EntityFieldQuery();
      $follower_entities = $follower_query->entityCondition('entity_type', 'field_collection_item')
                        ->entityCondition('bundle', 'field_my_app_follower')
                        ->fieldCondition('field_my_app_follower_object_id', 'value', $k_follow, '=')
                        ->fieldCondition('field_my_app_uid_follower', 'value', $v_follow['uid'], '=')
                        ->execute();

      if (!empty($follower_entities['field_collection_item'])) {
        $follower_item_id = array_keys($follower_entities['field_collection_item'])[0];


        /*
        กรณีนี้แสดงว่า user คนนี้เคยกด following application นี้แล้ว เราเคย update status = following [1] || unfollow [0]
        */
        $follower_data_item = field_collection_item_load($follower_item_id);
        $follower_wrapper = entity_metadata_wrapper('field_collection_item', $follower_data_item);
        if (strcmp($follower_wrapper->field_status_following->value(), $v_follow["status"]) != 0) {
            $follower_wrapper->field_status_following->set($v_follow["status"]);
            $follower_wrapper->save();
        }
      }else{
        /*
        กรณีนี้แสดงว่า user คนนี้ยังไม่เคยกด following application นี้
        */
        $follower_value = array();
        $follower_value['field_name'] = 'field_my_app_follower'; 
        $follower_value['field_my_app_follower_object_id'][LANGUAGE_NONE][0]['value'] = $k_follow;
        $follower_value['field_my_app_uid_follower'][LANGUAGE_NONE][0]['value']       = $v_follow["uid"];
        $follower_value['field_status_following'][LANGUAGE_NONE][0]['value']          = $v_follow["status"];
        $follower_value['field_my_app_name'][LANGUAGE_NONE][0]['value']               = $v_follow["name"];
        $follower_value['field_path_uri'][LANGUAGE_NONE][0]['value']                  = $v_follow["image_url"];

        $follower_field_entity = entity_create('field_collection_item', $follower_value);
        $follower_field_entity->setHostEntity("node", $node);
        $follower_field_entity->save(); 
      }


      // เป้นการเก้บ follow ของ user ที่กด follow
      $query_following    = new EntityFieldQuery();
      $entities_following = $query_following->entityCondition('entity_type', 'field_collection_item')
                        ->entityCondition('bundle', 'field_following')
                        ->fieldCondition('field_id_my_app_following', 'value',  $app_node_id, '=')
                        //->fieldCondition('field_my_application_uid', 'value', $v['uid'], '=')
                        ->fieldCondition('field_my_app_follower_object_id', 'value', $k_follow, '=')
                        ->execute();

      if (!empty($entities_following['field_collection_item'])) {
        $item_id_following = array_keys($entities_following['field_collection_item'])[0];
        $data_item_following = field_collection_item_load($item_id_following);

        if ($data_item_following) {
          $wrapper_following = entity_metadata_wrapper('field_collection_item', $data_item_following);
          if (strcmp($wrapper_following->field_status_following->value(), $v_follow["status"]) != 0) {
            $wrapper_following->field_status_following->set($v_follow["status"]);
            $wrapper_following->save();

            $v = array('status'      => $v_follow["status"]);
            $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $v_follow["uid"] . '/following/' . $k_follow . "/", $v);
          }
        }
      }else{
        // เป้นการเก้บ follow ของ user ที่กด follow
        $following_value = array();
        $following_value['field_name'] = 'field_following'; // field collection name

        $following_value['field_my_app_follower_object_id'][LANGUAGE_NONE][0]['value'] = $k_follow;
        $following_value['field_id_my_app_following'][LANGUAGE_NONE][0]['value']       = $app_node_id;
        $following_value['field_status_following'][LANGUAGE_NONE][0]['value']          = $v_follow["status"];
        $following_value['field_my_application_uid'][LANGUAGE_NONE][0]['value']        = $node->uid; // UID เจ้าของ application
        $following_value['field_my_app_name'][LANGUAGE_NONE][0]['value']               = $app_name;
        $following_value['field_path_uri'][LANGUAGE_NONE][0]['value']                  = $app_image_url;

        // Create the field collection entry and associate it with the profile
        $following_field_entity = entity_create('field_collection_item', $following_value);
        $following_field_entity->setHostEntity('profile2', $user_following);
        $following_field_entity->save();

        $v = array( 'owner_id'    => $uid, 
                    'owner_name'  => $owner_profile->field_profile_name[LANGUAGE_NONE][0]['value'],
                    'node_id'     => $node->nid,
                    'name'        => $node->title,//$node->field_my_app_name[LANGUAGE_NONE][0]['value'],
                    'image_url'   => $app_image_url,
                    'status'      => $v_follow["status"],
                    'item_id'     => $following_field_entity->item_id,
                     );

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $v_follow["uid"] . '/following/' . $k_follow . "/", $v);
      }

      
    }


    /*
    foreach ($data['follow'] as $k => $v) {
      $query  = new EntityFieldQuery();
      $entities = $query->entityCondition('entity_type', 'field_collection_item')
                        ->entityCondition('bundle', 'field_my_app_follower')
                        ->fieldCondition('field_my_app_follower_object_id', 'value', $k, '=')
                        ->fieldCondition('field_my_app_uid_follower', 'value', $v['uid'], '=')
                        ->execute();

                        // เป้นการเก้บ follow ของ user ที่กด follow
      $app_node_id   = $node->nid;
      $app_name      = $node->title;
      $app_image_url = substr(file_create_url(image_style_url('medium', $node->field_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));

      if (!empty($entities['field_collection_item'])) {
        // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
        
        $item_id = array_keys($entities['field_collection_item'])[0];
        $data_item = field_collection_item_load($item_id);

        if ($data_item) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
          if (strcmp($wrapper->field_status_following->value(), $v["status"]) != 0) {
            $wrapper->field_status_following->set($v["status"]);
            $wrapper->save();


            $profile = profile2_by_uid_load($uid, 'main');
            $friend = profile2_by_uid_load($v['uid'], 'main');


            // เป้นการเก้บ follow ของ user ที่กด follow
            $query_following    = new EntityFieldQuery();
            $entities_following = $query_following->entityCondition('entity_type', 'field_collection_item')
                              ->entityCondition('bundle', 'field_following')
                              ->fieldCondition('field_id_my_app_following', 'value', $node->nid, '=')
                              ->fieldCondition('field_my_application_uid', 'value', $v['uid'], '=')
                              ->fieldCondition('field_my_app_follower_object_id', 'value', $k, '=')
                              ->execute();

            if (!empty($entities_following['field_collection_item'])) {
              $item_id_following = array_keys($entities_following['field_collection_item'])[0];
              $data_item_following = field_collection_item_load($item_id_following);

              if ($data_item_following) {
                $wrapper_following = entity_metadata_wrapper('field_collection_item', $data_item_following);
                if (strcmp($wrapper_following->field_status_following->value(), $v["status"]) != 0) {
                  $wrapper_following->field_status_following->set($v["status"]);
                  $wrapper_following->save();
                }
              }
            }else{

              // เป้นการเก้บ follow ของ user ที่กด follow
              $value = array();
              $value['field_name'] = 'field_following'; // field collection name

              $value['field_my_app_follower_object_id'][LANGUAGE_NONE][0]['value'] = $k;
              $value['field_id_my_app_following'][LANGUAGE_NONE][0]['value']  = $app_node_id;
              $value['field_status_following'][LANGUAGE_NONE][0]['value']     = $v["status"];
              $value['field_my_application_uid'][LANGUAGE_NONE][0]['value']   = $node->uid; // UID เจ้าของ application
              $value['field_my_app_name'][LANGUAGE_NONE][0]['value']          = $app_name;
              $value['field_path_uri'][LANGUAGE_NONE][0]['value']             = $app_image_url;

              // Create the field collection entry and associate it with the profile
              $field_entity = entity_create('field_collection_item', $value);
              // $field_entity->uid = $data["uid"];
              $field_entity->setHostEntity('profile2', $friend);
              $field_entity->save();
            }

            $app_image_url = substr(file_create_url(image_style_url('medium', $node->field_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));

            $vv = array('owner_id' =>$uid, 
                        'owner_name' => $profile->field_profile_name[LANGUAGE_NONE][0]['value'],
                       'item_id'   =>$node->nid,
                       'name'      =>$node->title,
                       'image_url' =>$app_image_url,
                       'status'    =>$v["status"],
                       );

            $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $v["uid"] . '/following/' . $k . "/", $vv);

            // เป้นการเก้บ follow ของ user ที่กด follow



            // send notification บอกเจ้าของ application ว่ามีคน follow
            if (strcmp($v["status"], "1") == 0) {
              // เป็นการเพิ่มตัวเรา  ให้เพือน
              foreach ($profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
                $item_load = field_collection_item_load($value['value']);
                    
                if($item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'] != ""){
                  $friend_name = $friend->field_profile_display_name[LANGUAGE_NONE][0]['value'];
                  $message =  $friend_name . ' following '. $node->title .'.';


                  $friend_url_image = '';
                  if (isset($friend->field_profile_image)) {
                    # code...
                    if (!empty($friend->field_profile_image[LANGUAGE_NONE])) {
                      $friend_url_image = substr(file_create_url($friend->field_profile_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));
                    }
                  }

                  $notification_val = array('type'            =>'friend_follow',
                                'friend_id'       =>$v['uid'],
                                'friend_name'     =>$friend_name,
                                'friend_url_image'=>$friend_url_image);

                  send_push_notification($item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'], TAG, $message, $notification_val);
                }
              }
            }
            //   send notification บอกเจ้าของ application ว่ามีคน follow
          }
        }
        
      }else{
        // $data = field_collection_item_load($value['value']);

        $profile = profile2_by_uid_load($uid, 'main');
        $friend_profile = profile2_by_uid_load($v['uid'], 'main');

        $follower_value = array();
        $follower_value['field_name'] = 'field_my_app_follower'; 
        $follower_value['field_my_app_follower_object_id'][LANGUAGE_NONE][0]['value'] = $k;
        $follower_value['field_my_app_uid_follower'][LANGUAGE_NONE][0]['value']       = $v["uid"];
        $follower_value['field_status_following'][LANGUAGE_NONE][0]['value']          = $v["status"];
        $follower_value['field_my_app_name'][LANGUAGE_NONE][0]['value']               = $v["name"];
        $follower_value['field_path_uri'][LANGUAGE_NONE][0]['value']                  = $v["image_url"];

        $follower_field_entity = entity_create('field_collection_item', $follower_value);
        $follower_field_entity->setHostEntity("node", $node);
        $follower_field_entity->save(); 


        $following_value = array();
        $following_value['field_name'] = 'field_following'; // field collection name

        $following_value['field_my_app_follower_object_id'][LANGUAGE_NONE][0]['value'] = $k;
        $following_value['field_id_my_app_following'][LANGUAGE_NONE][0]['value']  = $app_node_id;
        $following_value['field_status_following'][LANGUAGE_NONE][0]['value']     = $v["status"];
        $following_value['field_my_application_uid'][LANGUAGE_NONE][0]['value']   = $node->uid; // UID เจ้าของ application
        $following_value['field_my_app_name'][LANGUAGE_NONE][0]['value']          = $app_name;
        $following_value['field_path_uri'][LANGUAGE_NONE][0]['value']             = $app_image_url;

        // Create the field collection entry and associate it with the profile
        $following_field_entity = entity_create('field_collection_item', $following_value);
        $following_field_entity->setHostEntity('profile2', $friend_profile);
        $following_field_entity->save();

        
        $vv = array('owner_id'     =>$node->uid, 
                    'owner_name'   =>$profile->field_profile_name[LANGUAGE_NONE][0]['value'],
                    'item_id'      =>$app_node_id, 
                    'name'         =>$app_name,
                    'image_url'    =>$app_image_url,
                    'status'       =>$v["status"]);

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $v["uid"] . '/following/' . $k . "/", $vv);
        // เป้นการเก้บ follow ของ user ที่กด follow

        //   send notification บอกเจ้าของ application ว่ามีคน follow
        if (strcmp($v["status"], "1") == 0) {
          

          $friend = profile2_by_uid_load($v['uid'], 'main');

          // เป็นการเพิ่มตัวเรา  ให้เพือน
          foreach ($profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
            $item_load = field_collection_item_load($value['value']);
                
            if($item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'] != ""){
              $friend_name = $friend->field_profile_display_name[LANGUAGE_NONE][0]['value'];
              $message =  $friend_name . ' following '. $node->title .'.';


              $friend_url_image = '';
              if (isset($friend->field_profile_image)) {
                # code...
                if (!empty($friend->field_profile_image[LANGUAGE_NONE])) {
                  $friend_url_image = substr(file_create_url($friend->field_profile_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));
                }
              }

              $notification_val = array('type'            =>'friend_follow',
                            'friend_id'       =>$v['uid'],
                            'friend_name'     =>$friend_name,
                            'friend_url_image'=>$friend_url_image);

              send_push_notification($item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'], TAG, $message, $notification_val);
            }
          }
        }
        //  send notification บอกเจ้าของ application ว่ามีคน follow
        
      }
    } // end-foreach
    */
  } // end-if

  if (array_key_exists("posts", $data)) {
    # code...
    foreach ($data['posts'] as $k => $v) {
      // $result['posts2'][] = $k;
      $data_item_post = field_collection_item_load($k);

      $wrapper_post = entity_metadata_wrapper('field_collection_item', $data_item_post);

      if (strcmp($wrapper_post->field_my_app_message_update->value(), $v["message"]) != 0) {
        $wrapper_post->field_my_app_message_update->set($v["message"]);
      }

      if (array_key_exists("comments", $v)) {
        # code...
        // $result['comments'] = "have comments";
        foreach ($v["comments"] as $k_comment => $v_comment) {
          $data_item_post_comment = field_collection_item_load($k_comment);
          $wrapper_post_comment = entity_metadata_wrapper('field_collection_item', $data_item_post_comment);

          // เราไม่ check image เพราะว่า image เราจะวิ่งไป update โดยตรง
          if (isset($v_comment['name'])) {
            if (strcmp($wrapper_post_comment->field_friend_name->value(), $v_comment['name']) != 0) {
              $wrapper_post_comment->field_friend_name->set($v_comment['name']);
            }
          }

          if (isset($v_comment['text'])) {
            if (strcmp($wrapper_post_comment->field_comment_message->value(), $v_comment['text']) != 0) {
              $wrapper_post_comment->field_comment_message->set($v_comment['text']);
            }
          } 

          if (isset($v_comment['uid'])) {
            if (strcmp($wrapper_post_comment->field_friend_uid->value(), $v_comment['uid']) != 0) {
              $wrapper_post_comment->field_friend_uid->set($v_comment['uid']);
            }
          } 

          if (array_key_exists("likes", $v_comment)) {
            foreach ($v_comment["likes"] as $k_comment_like => $v_comment_like) {

              $query_comment_like  = new EntityFieldQuery();
              $entities_comment_like = $query_comment_like->entityCondition('entity_type', 'field_collection_item')
                                ->entityCondition('bundle', 'field_my_app_post_like')
                                ->fieldCondition('field_object_id', 'value', $k_comment_like, '=')
                                ->fieldCondition('field_friend_uid', 'value', $v_comment_like['uid'], '=')
                                ->execute();

              if (!empty($entities_comment_like['field_collection_item'])) {
                $item_comment_like = array_keys($entities_comment_like['field_collection_item'])[0];
                $data_item_comment_like = field_collection_item_load($item_comment_like);

                if ($data_item_comment_like) {
                  $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_comment_like);
                  if (strcmp($wrapper->field_status_following->value(), $v_comment_like["status"]) != 0) {
                    $wrapper->field_status_following->set($v_comment_like["status"]);
                    $wrapper->save();
                  }
                }
              }else{
                // กรณีไม่มีแสดงว่าเราต้องสร้างขึ้นมาใหม่
                $value = array();
                $value['field_name'] = 'field_my_app_post_like'; // field collection name

                $value['field_object_id'][LANGUAGE_NONE][0]['value']          = $k_comment_like;
                $value['field_friend_uid'][LANGUAGE_NONE][0]['value']         = $v_comment_like['uid'];
                $value['field_status_following'][LANGUAGE_NONE][0]['value']   = $v_comment_like["status"];
                
                $field_entity = entity_create('field_collection_item', $value);
                $field_entity->setHostEntity('field_my_app_post_like', $data_item_post_comment);
                $field_entity->save();
              }
            }
          }


          if (array_key_exists("replys", $v_comment)) {

            // field_reply_comment
            foreach ($v_comment["replys"] as $k_comment_reply => $v_comment_reply) {
              $data_item_post_comment_reply = field_collection_item_load($k_comment_reply);
              $wrapper_post_comment_reply = entity_metadata_wrapper('field_collection_item', $data_item_post_comment_reply);

              // name
              if (isset($v_comment_reply['name'])) {
                if (strcmp($wrapper_post_comment_reply->field_friend_name->value(), $v_comment_reply['name']) != 0) {
                  $wrapper_post_comment_reply->field_friend_name->set($v_comment['name']);
                }
              }

              // text
              if (isset($v_comment_reply['text'])) {
                if (strcmp($wrapper_post_comment_reply->field_reply_message->value(), $v_comment_reply['text']) != 0) {
                  $wrapper_post_comment_reply->field_reply_message->set($v_comment['text']);
                }
              }

              // uid
              if (isset($v_comment_reply['uid'])) {
                if (strcmp($wrapper_post_comment_reply->field_friend_uid->value(), $v_comment_reply['uid']) != 0) {
                  $wrapper_post_comment_reply->field_friend_uid->set($v_comment['uid']);
                }
              }

              // likes
              
              if (array_key_exists("likes", $v_comment_reply)) {
                foreach ($v_comment_reply["likes"] as $k_comment_reply_like => $v_comment_reply_like) {

                  $query_comment_reply_like  = new EntityFieldQuery();
                  $entities_comment_reply_like = $query_comment_reply_like->entityCondition('entity_type', 'field_collection_item')
                                    ->entityCondition('bundle', 'field_reply_like')
                                    ->fieldCondition('field_object_id', 'value', $k_comment_reply_like, '=')
                                    ->fieldCondition('field_friend_uid', 'value', $v_comment_reply_like['uid'], '=')
                                    ->execute();

                  if (!empty($entities_comment_reply_like['field_collection_item'])) {
                    $item_comment_reply_like = array_keys($entities_comment_reply_like['field_collection_item'])[0];
                    $data_item_comment_reply_like = field_collection_item_load($item_comment_reply_like);

                    if ($data_item_comment_reply_like) {
                      $wrapper_comment_reply_like = entity_metadata_wrapper('field_collection_item', $data_item_comment_reply_like);
                      if (strcmp($wrapper_comment_reply_like->field_status_following->value(), $v_comment_reply_like["status"]) != 0) {
                        $wrapper_comment_reply_like->field_status_following->set($v_comment_reply_like["status"]);
                        $wrapper_comment_reply_like->save();
                      }
                    }
                  }else{
                    // กรณีไม่มีแสดงว่าเราต้องสร้างขึ้นมาใหม่
                    $value_comment_reply_like = array();
                    $value_comment_reply_like['field_name'] = 'field_reply_like'; // field collection name

                    $value_comment_reply_like['field_object_id'][LANGUAGE_NONE][0]['value']          = $k_comment_reply_like;
                    $value_comment_reply_like['field_friend_uid'][LANGUAGE_NONE][0]['value']         = $v_comment_reply_like['uid'];
                    $value_comment_reply_like['field_status_following'][LANGUAGE_NONE][0]['value']   = $v_comment_reply_like["status"];
                    $value_comment_reply_like['field_friend_name'][LANGUAGE_NONE][0]['value']        = $v_comment_reply_like["name"];
                    $value_comment_reply_like['field_path_uri'][LANGUAGE_NONE][0]['value']           = $v_comment_reply_like["image_url"];
                    
                    $field_entity_comment_reply_like = entity_create('field_collection_item', $value_comment_reply_like);
                    $field_entity_comment_reply_like->setHostEntity('field_reply_like', $data_item_post_comment_reply);
                    $field_entity_comment_reply_like->save();
                  }
                }
              }
              
              $wrapper_post_comment_reply->save();
            }
          }
      

          $wrapper_post_comment->save();
        }
      }


      if (array_key_exists("likes", $v)) {

        foreach ($v["likes"] as $k_like => $v_like) {
          $query_like  = new EntityFieldQuery();
          $entities_like = $query_like->entityCondition('entity_type', 'field_collection_item')
                            ->entityCondition('bundle', 'field_my_app_post_like')
                            ->fieldCondition('field_object_id', 'value', $k_like, '=')
                            ->fieldCondition('field_friend_uid', 'value', $v_like['uid'], '=')
                            ->execute();

          if (!empty($entities_like['field_collection_item'])) {
            $item_like = array_keys($entities_like['field_collection_item'])[0];
            $data_item_like = field_collection_item_load($item_like);

            if ($data_item_like) {
              $wrapper_like = entity_metadata_wrapper('field_collection_item', $data_item_like);
              if (strcmp($wrapper_like->field_status_following->value(), $v_like["status"]) != 0) {
                $wrapper_like->field_status_following->set($v_like["status"]);
                $wrapper_like->save();
              }
            }
          }else{
            // กรณีไม่มีแสดงว่าเราต้องสร้างขึ้นมาใหม่
            $value = array();
            $value['field_name'] = 'field_my_app_post_like'; // field collection name

            $value['field_object_id'][LANGUAGE_NONE][0]['value']          = $k_like;
            $value['field_friend_uid'][LANGUAGE_NONE][0]['value']         = $v_like['uid'];
            
            $value['field_friend_name'][LANGUAGE_NONE][0]['value']        = $v_like["name"];
            $value['field_path_uri'][LANGUAGE_NONE][0]['value']           = $v_like["image_url"];
            $value['field_status_following'][LANGUAGE_NONE][0]['value']   = $v_like["status"];
            
            $field_entity = entity_create('field_collection_item', $value);
            $field_entity->setHostEntity('field_my_app_post_like', $data_item_post);
            $field_entity->save();
          }
        }
      }

      $wrapper_post->save();
    }

    // $result['posts'] = $data['posts'];
  }

  // published || unpublished
  if (array_key_exists("status", $data)) {
    if (strcmp($data["status"], "1") == 0) {
      if (strcmp($node_wrapper->status->value(), $data["status"]) != 0) {
        $node_wrapper->status->set(1);
      }
    }else{

      if ($node_wrapper->field_on_store->value()) {
        $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $node->nid .'/');
      }
     
      if (strcmp($node_wrapper->status->value(), $data["status"]) != 0) {
        $node_wrapper->status->set(0);
      }
    }  
  }

  $node_wrapper->save();

  $result['result']  = TRUE;
  // $result['param']   = $param;
  return $result;
}

/*
  "uid"   : event.params.uid,
  "node_id"   : event.params.node_id,
  "object_id" : event.params.object_id,
  "data"    : event.data.val()
      */
function update_my_applications_follow(){
  $result = array();
  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['owner_id']) || empty($param['node_id']) || empty($param['object_id']) || empty($param['data']) ) {
    $result['result'] = FALSE;
    $result['message'] = "function update_my_applications_follow : parameter";
    return $result;
  }

  $owner_id   = $param['owner_id'];   // uid     : ของเจ้าของ application
  $node_id    = $param['node_id'];    // node id : ของ application
  $object_id  = $param['object_id'];
  $data       = $param['data'];

  //   send notification บอกเจ้าของ application ว่ามีคน follow
  if (strcmp($data["status"], "1") == 0) {
    $owner_profile  = profile2_by_uid_load($owner_id, 'main');
    $friend_profile = profile2_by_uid_load($data['uid'], 'main');

    $node = node_load($node_id);  
    
    // $friend = profile2_by_uid_load($v['uid'], 'main');
    foreach ($owner_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
      $owner_profile_item_load = field_collection_item_load($value['value']);
          
      if($owner_profile_item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'] != ""){
        $friend_profile_name = $friend_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
        $message =  $friend_profile_name . ' following '. $node->title .'.';


        $friend_url_image = '';
        // if (isset($user_following->field_profile_image)) {
        //   # code...
        //   if (!empty($owner_profile->field_profile_image[LANGUAGE_NONE])) {
        //     $friend_url_image = substr(file_create_url($owner_profile->field_profile_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));
        //   }
        // }

        $notification_val = array('type'            =>'friend_follow',
                                  'friend_id'       =>$data['uid'],
                                  'friend_name'     =>$friend_profile_name,
                                  'friend_url_image'=>$friend_url_image);

        send_push_notification($owner_profile_item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'], TAG, $message, $notification_val);
      }
    }
  }
  
  //  send notification บอกเจ้าของ application ว่ามีคน follow

  /*
  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_my_app_follower')
                    ->fieldCondition('field_my_app_follower_object_id', 'value', $object_id, '=')
                    ->execute();

  $node = node_load($app_id);

  if (!empty($entities['field_collection_item'])) {
    // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
    $item_id = array_keys($entities['field_collection_item'])[0];

    $data_item = field_collection_item_load($item_id);
    if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
      if (strcmp($wrapper->field_status_following->value(), $data["status"]) != 0) {
        $wrapper->field_status_following->set($data["status"]);
        $wrapper->save();
      }
    }
  }else{
    // $data = field_collection_item_load($value['value']);

    $post_value = array();
    $post_value['field_name'] = 'field_my_app_follower'; 
    $post_value['field_my_app_follower_object_id'][LANGUAGE_NONE][0]['value'] = $object_id;
    $post_value['field_my_app_uid_follower'][LANGUAGE_NONE][0]['value']       = $data["uid"];
    $post_value['field_status_following'][LANGUAGE_NONE][0]['value']          = $data["status"];

    $field_entity = entity_create('field_collection_item', $post_value);
    $field_entity->uid = $data["uid"];
    $field_entity->setHostEntity("node", $node);
    $field_entity->save(); 
  }

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $node->uid ."/my_applications/" .$app_id.  "/follows/" . $object_id . "/", $data);
 



  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_following')
                    ->fieldCondition('field_id_my_app_following', 'value', $app_id, '=')
                    ->execute();

  if (!empty($entities['field_collection_item'])) {
    // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
    $item_id = array_keys($entities['field_collection_item'])[0];

    $data_item = field_collection_item_load($item_id);
    if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
      if (strcmp($wrapper->field_status_following->value(), $data["status"]) != 0) {
        $wrapper->field_status_following->set($data["status"]);
        $wrapper->save();
      }
    }
  }else{
    $profile = profile2_by_uid_load($data["uid"], 'main');
    $value = array();
    $value['field_name'] = 'field_following'; // field collection name

    $value['field_id_my_app_following'][LANGUAGE_NONE][0]['value'] = $app_id;
    $value['field_status_following'][LANGUAGE_NONE][0]['value'] =  $data["status"];
    $value['field_my_application_uid'][LANGUAGE_NONE][0]['value'] = $data["uid"];

    // Create the field collection entry and associate it with the profile
    $field_entity = entity_create('field_collection_item', $value);
    $field_entity->uid = $data["uid"];
    $field_entity->setHostEntity('profile2', $profile);
    $field_entity->save();
  }

  $value = array( "uid"     => $node->uid,                        
                  "status"   => $data["status"]);
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $data["uid"] ."/following/" .$app_id , $value);
  */

  $result['result'] = TRUE;
  $result['param']  = $param;
  return $result;
}

function update_my_application_post_like(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  /*
  "owner_id"  : event.params.owner_id,
  "node_id"   : event.params.node_id,
  "post_id"   : event.params.post_id,
  "object_id" : event.params.object_id,
  "data"    : event.data.val()
  */

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['owner_id']) || empty($param['node_id']) || empty($param['post_id'])  || empty($param["object_id"]) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_my_application_post_like : parameter";
    return $result;
  }

  global $firebase;

  $owner_id   = $param["owner_id"];  
  $node_id    = $param["node_id"];  
  $post_id    = $param["post_id"];  
  $object_id  = $param["object_id"];
  $data       = $param["data"];   

  $friend_id  = $data["uid"];  

  /*
  เจ้าของ application กด like aplication ตัวเองเราจะไม่ส่ง notification
  */
  if (strcmp($owner_id, $friend_id) == 0){
    $result['result']   = TRUE;
    return $result;
  }

  if (strcmp($data["status"], "1") == 0) {
    $owner_profile  = profile2_by_uid_load($owner_id, 'main');
    $friend_profile = profile2_by_uid_load($friend_id, 'main');

    $node = node_load($node_id);  


    $data_item = field_collection_item_load($post_id);
    if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
      // if (strcmp($wrapper->field_status_following->value(), $data["status"]) != 0) {
      //   $wrapper->field_status_following->set($data["status"]);
      //   $wrapper->save();
      // }

      // 
      $post_message = $wrapper->field_my_app_message_update->value();
    }
    
    // $friend = profile2_by_uid_load($v['uid'], 'main');
    foreach ($owner_profile->field_device_access[LANGUAGE_NONE] as $key => $value) {
      $owner_profile_item_load = field_collection_item_load($value['value']);
          
      if($owner_profile_item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'] != ""){
        $friend_profile_name = $friend_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
        $message =  $friend_profile_name . ' like post ' . $post_message  .'[ Application name : '. $node->title .'].';


        $friend_url_image = '';
        // if (isset($user_following->field_profile_image)) {
        //   # code...
        //   if (!empty($owner_profile->field_profile_image[LANGUAGE_NONE])) {
        //     $friend_url_image = substr(file_create_url($owner_profile->field_profile_image[LANGUAGE_NONE][0]['uri']), strlen($GLOBALS['base_url']));
        //   }
        // }

        $notification_val = array('type'            =>'friend_follow',
                                  'friend_id'       =>$data['uid'],
                                  'friend_name'     =>$friend_profile_name,
                                  'friend_url_image'=>$friend_url_image);

        send_push_notification($owner_profile_item_load->field_key_token_notification[LANGUAGE_NONE][0]['value'], TAG, $message, $notification_val);
      }
    }
  }

  /*
  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_my_app_post_like')
                    ->fieldCondition('field_object_id', 'value', $object_id, '=')
                    ->execute();

  $node = node_load($app_id);

  if (!empty($entities['field_collection_item'])) {
    // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
    $item_id = array_keys($entities['field_collection_item'])[0];

    $data_item = field_collection_item_load($item_id);
    if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
      if (strcmp($wrapper->field_status_following->value(), $data["status"]) != 0) {
        $wrapper->field_status_following->set($data["status"]);
        $wrapper->save();
      }
    }
  }else{

    $data_post = field_collection_item_load($post_id);

    $values = array();
    $values['field_name'] = 'field_my_app_post_like'; 
    $values['field_friend_uid'][LANGUAGE_NONE][0]['value']        = $data["uid"];
    $values['field_object_id'][LANGUAGE_NONE][0]['value']         = $object_id;
    $values['field_status_following'][LANGUAGE_NONE][0]['value']  = $data["status"];
    
    $field_entity = entity_create('field_collection_item', $values);
    $field_entity->uid = $data["uid"];
    $field_entity->setHostEntity("field_my_app_post_like", $data_post);
    $field_entity->save();
  }

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $node->uid ."/my_applications/" .$app_id. '/posts/'. $post_id .'/likes/' . $object_id, $data);
  */

  $result['result']   = TRUE;
  // $result['param']    = $param;
  return $result;
}

function center_post_comments_like(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['app_id']) || empty($param['post_id']) || empty($param["comment_id"]) || empty($param["object_id"]) || empty($param['data']) ) {
    $result['result'] = FALSE;
    $result['message'] = "function update_my_application_post_like : parameter";
    return $result;
  }
  

  global $firebase;

  $app_id     = $param["app_id"];  
  $post_id    = $param["post_id"];  
  $comment_id = $param["comment_id"];  
  $object_id  = $param["object_id"];
  $data       = $param["data"];  

  try{
    $query  = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_my_app_post_like')
                      ->fieldCondition('field_object_id', 'value', $object_id, '=')
                      ->execute();

    //field_my_app_update_comment


    $node = node_load($app_id);

    if (!empty($entities['field_collection_item'])) {
      // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
      $item_id = array_keys($entities['field_collection_item'])[0];

      $data_item = field_collection_item_load($item_id);
      if ($data_item) {
        $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
        // if (strcmp($node->uid, $data["uid"]) != 0) {
          $wrapper->field_status_following->set($data["status"]);
          $wrapper->save();
        // }
        $result['b'] = $wrapper->field_status_following->value();

      }
    }else{

      $data_comment = field_collection_item_load($comment_id);

      $values = array();
      $values['field_name'] = 'field_my_app_post_like'; 
      $values['field_friend_uid'][LANGUAGE_NONE][0]['value']        = $data["uid"];
      $values['field_object_id'][LANGUAGE_NONE][0]['value']         = $object_id;
      $values['field_status_following'][LANGUAGE_NONE][0]['value']  = $data["status"];
      
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->uid = $data["uid"];
      $field_entity->setHostEntity("field_my_app_post_like", $data_comment);
      $field_entity->save();

      $result['field_entity->item_id']    = $field_entity->item_id;
    }
  } catch (Exception $e) {
    $result['result']   = FALSE;
    $result['error']    = $e->getMessage();
  }

  // [NSString stringWithFormat:@"%@center/%@/%@/posts/%@/comments/%@/likes/"
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $node->uid ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/'. $comment_id .'/likes/' . $object_id, $data);

  $result['result']   = TRUE;
  $result['param']    = $param;
  return $result;
}

function center_post_update_comments(){
  $result = array();

  if (!check_header()) {
    $result['result']   = FALSE;
    $result['message']  = "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['app_id']) || empty($param['post_id']) || empty($param["object_id"]) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function center_post_update_comments : parameter";
    return $result;
  }

  global $firebase;

  $app_id     = $param['app_id'];
  $post_id    = $param['post_id'];
  $object_id  = $param["object_id"];
  $data       = $param['data'];

  $node = node_load($app_id);


  $query  = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                    ->entityCondition('bundle', 'field_my_app_update_comment')
                    ->fieldCondition('field_object_id', 'value', $object_id, '=')
                    ->execute();

  if (!empty($entities['field_collection_item'])) {
    // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
    $item_id = array_keys($entities['field_collection_item'])[0];

    $data_item = field_collection_item_load($item_id);
    if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);

      $wrapper->field_comment_message->set($data["message"]);
      $wrapper->save();
    }

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $node->uid ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $object_id . '/', $data);
  }

  /*else{
    $data_post = field_collection_item_load($post_id);

    $values = array();
    $values['field_name'] = 'field_my_app_update_comment'; 
    $values['field_friend_uid'][LANGUAGE_NONE][0]['value']        = $data["uid"];
    // $values['field_object_id'][LANGUAGE_NONE][0]['value']         = $object_id;
    $values['field_comment_message'][LANGUAGE_NONE][0]['value']   = $data["message"];
    
    $field_entity = entity_create('field_collection_item', $values);
    $field_entity->uid = $data["uid"];
    $field_entity->setHostEntity("field_my_app_update_comment", $data_post);
    $field_entity->save();
  }

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $node->uid ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $object_id . '/', $data);
  */

  $result['result']   = TRUE;
  // $result['param']    = $param;
  return $result;
}

function edit_reply_comment_child(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['owner_id']) || empty($_REQUEST['app_id'])|| empty($_REQUEST['post_id']) || empty($_REQUEST['text'])) {
    $result['result']   = FALSE;
    $result['message']  = "function : edit_reply_comment_child, parameter";
    // $result['_REQUEST'] = $_REQUEST;
    // $result['$_FILES']  = $_FILES;
    return $result;
  }

  global $firebase;

  $uid        = $_REQUEST['uid'];
  $name       = $_REQUEST['name'];
  $owner_id   = $_REQUEST['owner_id'];
  $app_id     = $_REQUEST['app_id'];
  $post_id    = $_REQUEST['post_id'];
  $comment_id = $_REQUEST['comment_id'];
  $reply_id   = $_REQUEST['reply_id'];
  $text       = $_REQUEST['text'];

  //return $_REQUEST;

  $data_reply = field_collection_item_load($reply_id);
  if ($data_reply) {
    $wrapper = entity_metadata_wrapper('field_collection_item', $data_reply);

    if(!empty($_FILES["idna"])){
      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

      // $arr_file = (array)$file;

      $wrapper->field_image->set($image_url);       
      $wrapper->save();

      // $uri = file_load($arr_file['fid'])->uri;
      // $image_url = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));

      $thumbnail_uri  = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));
      $original_uri   = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));


      $value = array(                     
          "thumbnail_uri"     => $thumbnail_uri,
          "original_uri"      => $original_uri
      );

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/replys/'. $reply_id . '/', $value);
    }


    if (strcmp($wrapper->field_reply_message->value(), $text) != 0) {
        
        // $wrapper->field_reply_message->set(preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $text));
        $wrapper->field_reply_message->set($text);
        $wrapper->save();

        // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/', array("message" => $detail));

        // inser new user
        $value = array(                     
          "text"      => $text
        );

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/replys/'. $reply_id . '/', $value);

        // . '/replys/' . $field_entity->item_id . '/', $value);
    }

    $result['result']   = TRUE;
    return $result;

  }else{
    $result['result']   = FALSE;
    return $result;
  }
}

function add_reply_comment_child(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['owner_id']) || empty($_REQUEST['app_id'])|| empty($_REQUEST['post_id']) || empty($_REQUEST['comment_id']) || empty($_REQUEST['text'])) {
    $result['result']   = FALSE;
    $result['message']  = "function : add_reply_comment_child, parameter";
    return $result;
  }

  global $firebase;

  $uid        = $_REQUEST['uid'];
  $name       = $_REQUEST['name'];
  $owner_id   = $_REQUEST['owner_id'];
  $app_id     = $_REQUEST['app_id'];
  $post_id    = $_REQUEST['post_id'];
  $comment_id = $_REQUEST['comment_id'];
  $text       = $_REQUEST['text'];

  // $result['result']   = TRUE;
  // $result['_REQUEST']   = $_REQUEST;

  // return $result;
  $data_comment = field_collection_item_load($comment_id);
  if ($data_comment) {
    $values = array();
    $values['field_name'] = 'field_reply_comment'; 
    $values['field_friend_uid'][LANGUAGE_NONE][0]['value']      = $uid;
    $values['field_friend_name'][LANGUAGE_NONE][0]['value']     = $name;
    $values['field_reply_message'][LANGUAGE_NONE][0]['value']   = $text;// preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $text);


    $image_url;
    if(!empty($_FILES["idna"])){
      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

    
      $values['field_image'][LANGUAGE_NONE][0] = $image_url;  


      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->uid = $uid;
      $field_entity->setHostEntity("field_reply_comment", $data_comment);
      $field_entity->save();


      // $uri = file_load($arr_file['fid'])->uri;
      $thumbnail_uri  = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));
      $original_uri   = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));

      //dpm($field_entity->item_id);

      // $node     = node_load($app_id);
      // $category = $node->field_my_app_category[LANGUAGE_NONE][0]['tid'];

      // $thumbnail_uri = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));
      // $original_uri = substr(file_create_url($uri), strlen($GLOBALS['base_url']));

      // $images[$multi_image_field_entity->item_id] = array("thumbnail_uri" => $thumbnail_uri, "original_uri" => $original_uri);

      $value = array(                     
        "text"      => $text,
        "uid"       => $uid,
        "name"      => $name,
        "creator"   => get_creator(field_collection_item_load($field_entity->item_id), $uid),
        "thumbnail_uri" =>$thumbnail_uri,
        "original_uri"  =>$original_uri
      );

      // insert new center 
      // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id . '/comments/' .$field_entity->item_id, $value);

      // inser new user
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/replys/' . $field_entity->item_id . '/', $value);

      $result['result']   = TRUE;
      $result['item_id']  = $field_entity->item_id;
      $result['value']    = $value;
      $result['firebase'] = FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/replys/' . $field_entity->item_id . '/';
      // $result['$field_entity'] = field_collection_item_load($field_entity->item_id);;
      return $result;
    }else{

      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->uid = $uid;
      $field_entity->setHostEntity("field_reply_comment", $data_comment);
      $field_entity->save();

      $value = array(                     
          "text"      => $text,
          "uid"       => $uid,
          "name"      => $name,
          "creator"   => get_creator(field_collection_item_load($field_entity->item_id), $uid),
        );

      // inser new user
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/replys/' . $field_entity->item_id . '/', $value);

      $result['result']   = TRUE;
      $result['item_id']  = $field_entity->item_id;
      $result['value']    = $value;
      $result['firebase'] = FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/replys/' . $field_entity->item_id . '/';
      return $result;
    }
  }

  $result['result']   = FALSE;
  return $result;
}

function edit_comment_parent(){

  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['owner_id']) || empty($_REQUEST['app_id'])|| empty($_REQUEST['post_id']) || empty($_REQUEST['comment_id']) || empty($_REQUEST['text'])) {
    $result['result']   = FALSE;
    $result['message']  = "function : edit_comment_parent, parameter";
    // $result['_REQUEST'] = $_REQUEST;
    // $result['$_FILES']  = $_FILES;
    return $result;
  }

  global $firebase;

  $uid     = $_REQUEST['uid'];
  $owner_id= $_REQUEST['owner_id'];
  $app_id  = $_REQUEST['app_id'];
  $post_id = $_REQUEST['post_id'];
  $comment_id = $_REQUEST['comment_id'];
  $text    = $_REQUEST['text'];

  // return $_REQUEST;

  $data_comment = field_collection_item_load($comment_id);
  if ($data_comment) {
    $wrapper = entity_metadata_wrapper('field_collection_item', $data_comment);

    if(!empty($_FILES["idna"])){
      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

      // $arr_file = (array)$file;

      $wrapper->field_image->set($image_url);       
      $wrapper->save();

      // $uri = file_load($arr_file['fid'])->uri;
      // $image_url = substr(file_create_url(image_style_url('medium', $uri)), strlen($GLOBALS['base_url']));

      $thumbnail_uri  = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));
      $original_uri   = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));

/*
  $value = array(                     
        "text"      => $text,
        "uid"       => $uid,
        "name"      => $name,
        "creator"   => get_creator(field_collection_item_load($field_entity->item_id), $uid),
        "thumbnail_uri" =>$thumbnail_uri,
        "original_uri"  =>$original_uri
      );
*/


      $value["thumbnail_uri"] = $thumbnail_uri;    
      $value["original_uri"]  = $original_uri;  

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/', $value);
    }


    if (strcmp($wrapper->field_comment_message->value(), $text) != 0) {
        
        // $wrapper->field_comment_message->set(preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $text));
        $wrapper->field_comment_message->set($text);
        $wrapper->save();

        // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/', array("message" => $detail));

        // inser new user
        $value["text"]  = $text;

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $comment_id . '/', $value);
    }

    // $value["text"] = $wrapper->field_comment_message->value();
    $value["uid"]  = $uid;
    $value["name"] = '';

    $creator = array(); // field_creator
    if(isset($data_comment->field_creator[LANGUAGE_NONE])){
      foreach ($data_comment->field_creator[LANGUAGE_NONE] as $k_reply_creator => $v_reply_creator) {
          $item_comment = field_collection_item_load($v_reply_creator['value']);

          $item_comment_user_id  = $item_comment->field_creator_uid[LANGUAGE_NONE][0]['value'];
          $item_comment_name     = $item_comment->field_creator_name[LANGUAGE_NONE][0]['value'];
          $item_comment_image_url= $item_comment->field_creator_image_uri[LANGUAGE_NONE][0]['value'];
          $item_comment_create   = $item_comment->field_creator_time_create[LANGUAGE_NONE][0]['value'];
          $item_comment_update   = $item_comment->field_creator_time_update[LANGUAGE_NONE][0]['value'];

          $creator = array("user_id"   => $item_comment_user_id,
                           "name"      => $item_comment_name, 
                           "image_url" => $item_comment_image_url, 
                           "create"    => $item_comment_create,
                           "update"    => $item_comment_update);
      }
    }
    $value["creator"] = (object)$creator;


    $result['result']   = TRUE;
    $result['item_id']  = $comment_id;
    $result['value']    = $value;
    return $result;
  }else{
    $result['result']   = FALSE;
    return $result;
  }

}

function add_comment_parent(){

  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['owner_id']) || empty($_REQUEST['app_id'])|| empty($_REQUEST['post_id']) || empty($_REQUEST['text'])) {
    $result['result']   = FALSE;
    $result['message']  = "function : add_comment_parent, parameter";
    return $result;
  }

  global $firebase;

  $uid     = $_REQUEST['uid'];
  $name     = $_REQUEST['name'];
  $owner_id= $_REQUEST['owner_id'];
  $app_id  = $_REQUEST['app_id'];
  $post_id = $_REQUEST['post_id'];
  // $image   = $_REQUEST['image'];
  $text    = $_REQUEST['text'];
  
  $data_post = field_collection_item_load($post_id);
  if ($data_post) {
    
    $values = array();
    $values['field_name'] = 'field_my_app_update_comment'; 
    $values['field_friend_uid'][LANGUAGE_NONE][0]['value']        = $uid;
    $values['field_friend_name'][LANGUAGE_NONE][0]['value']       = $name;
    $values['field_comment_message'][LANGUAGE_NONE][0]['value']   = $text;

    $image_url;
    if(!empty($_FILES["idna"])){

      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);
    
      $values['field_image'][LANGUAGE_NONE][0] = $image_url;  

      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->uid = $uid;
      $field_entity->setHostEntity("field_my_app_update_comment", $data_post);
      $field_entity->save();


      // $uri = file_load($arr_file['fid'])->uri;
      $thumbnail_uri  = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));
      $original_uri   = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));


      $value = array(                     
          "text"          => $text,
          "uid"           => $uid,
          "name"          => $name,
          "thumbnail_uri" => $thumbnail_uri,
          "original_uri"  => $original_uri,
          "creator"       => get_creator(field_collection_item_load($field_entity->item_id), $uid)
        );

      // inser new user
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $field_entity->item_id . '/', $value);

      $result['result']   = TRUE;
      $result['item_id']  = $field_entity->item_id;
      $result['value']    = $value;
      // $result['firebase'] = FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $field_entity->item_id . '/';
      return $result;
    }else{
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->uid = $uid;
      $field_entity->setHostEntity("field_my_app_update_comment", $data_post);
      $field_entity->save();

      $value = array(                     
          "text"      => $text,
          "uid"       => $uid,
          "name"      => $name,
          "creator"   => get_creator(field_collection_item_load($field_entity->item_id), $uid)
        );

      // inser new user
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $field_entity->item_id . '/', $value);

      $result['result']   = TRUE;
      $result['item_id']  = $field_entity->item_id;
      $result['value']    = $value;
      // $result['firebase'] = FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH .  $owner_id ."/my_applications/" .$app_id. '/posts/'. $post_id .'/comments/' . $field_entity->item_id . '/';
      return $result;
    }
  }else{
    $result['result']   = FALSE;
    return $result;
  } 
}

function add_post(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['app_id']) || empty($_REQUEST['detail']) ) {
    $result['result'] = FALSE;
    $result['message']  = "function : add_post(), parameter";
    return $result;
  }

  global $firebase;

  $uid        = $_REQUEST['uid'];
  $app_id     = $_REQUEST['app_id'];
  $detail     = $_REQUEST['detail'];
  $pictures   = $_REQUEST['pictures'];

  try {
    $time_start = microtime(true);

    // 1. Load All node by nid 
    $node = node_load($app_id);

    $post_value = array();
    $post_value['field_name'] = 'field_my_app_update'; 
    $post_value['field_my_app_message_update'][LANGUAGE_NONE][0]['value'] = $detail;

    $field_entity = entity_create('field_collection_item', $post_value);
    // $field_entity->uid = $uid;
    $field_entity->setHostEntity("node", $node);
    $field_entity->save(); 

    $my_app_update = field_collection_item_load($field_entity->item_id);

    $images = array();
    foreach ($pictures as $key => $value){
      $val = array();
      $val['field_name'] = 'field_multi_image';

      $binary = base64_decode($value);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $image_url =  (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

      $val['field_image'][LANGUAGE_NONE][0] = $image_url;

      $multi_image_field_entity = entity_create('field_collection_item', $val);
      $multi_image_field_entity->setHostEntity('field_multi_image', $my_app_update);
      $multi_image_field_entity->save();

      $thumbnail_uri = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));
      $original_uri = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));

      $images[$multi_image_field_entity->item_id] = array("thumbnail_uri" => $thumbnail_uri, "original_uri" => $original_uri);
    }

    $creator = get_creator($my_app_update, $uid);

    $value = array(                     
          "message"   => $detail,
          "images"    => $images,
          "creator"   => $creator
        );

    $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $node->uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $field_entity->item_id .'/' , $value);

    $result['result']   = TRUE;
    $result['item_id']  = $field_entity->item_id;
    $result['value']    = $value;

    $time_end = microtime(true);
    $execution_times = number_format(($time_end - $time_start), 2);
    $result['execution_times'] = $execution_times;
  } catch (Exception $e) {
    $result['result']   = FALSE;
    $result['message']  = $e->getMessage();
  }

  return $result;
}


/*
  @param 
  uid                 : uid ขอเจ้าของ app_id นี้
  app_id              : app_id
  post_id             : post_id
  detail              : เป็นข้อความ เราต้องเช็ดการ update ด้วยว่าได้แก้ไข ไม ถ้าแก้ไขต้อง update
  pictures[array]     : เราต้องเช็ดด้วยว่าใน array pictures มี item_id อะไรบ้างถ้าไม่อยู่ใน array pictures ให้ลบทิ้ง
  new_pictures[array] : เป็น array image ใหม่เราสามารถ insert เพิ่มลงไปได้เลย
*/
function edit_post(){
  $result = array();
  global $firebase;

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['app_id'])  || empty($_REQUEST['post_id']) || empty($_REQUEST['detail']) ) {
    $result['result'] = FALSE;
    $result['message']  = "function : edit_post, parameter";
    return $result;
  }

  $uid      = $_REQUEST['uid'];
  $app_id   = $_REQUEST['app_id'];
  $post_id  = $_REQUEST['post_id'];


  // $input = base64_decode($_REQUEST['detail']);//$BB6B>8l8@B,;n(B - testing
  // $input_encoding = 'iso-2022-jp';


  $detail   = $_REQUEST['detail'];
  $pictures = $_REQUEST['pictures'];

  

  // 1. เป็นการโหลด ข้อมูล post ขึ้นมากเพือจะทำการแก้ใขข้อมูล 
  $data_item = field_collection_item_load($post_id);

  if ($data_item) {
    $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);

    if (strcmp($wrapper->field_my_app_message_update->value(), $detail) != 0) {
        /*
          กรณี อักษระเป็น emoji จะมีปัญหาตอน save เราต้องใช้  preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', ข้อความ) ก่อนทำการบันทึก
        */
        // $wrapper->field_my_app_message_update->set(preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $detail));
        $wrapper->field_my_app_message_update->set($detail);
        $wrapper->save();

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/', array("message" => $detail));
    }

    // $result['field_multi_image']   = $wrapper->field_multi_image->value();

    foreach ($wrapper->field_multi_image->value() as $i_image) {
      if (!in_array($i_image->item_id, $pictures)){
        // จะมีกรณีที user ต้องการลบรูปเก่าทีเคย post เราต้องเช็ดด้วย 
        entity_delete_multiple('field_collection_item', array($i_image->item_id));

        /*
       //  เราต้อง update firebase ด้วย
        */
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/images/'. $i_image->item_id);
      }
    }

    // เป้นการ insert รูปใหม่ลงไป
    // $my_app_update = field_collection_item_load($field_entity->item_id);

    if (!empty($_REQUEST['new_pictures'])) {

      $new_pictures  = $_REQUEST['new_pictures'];
      $images = array();
      foreach ($new_pictures as $key => $value){
        $val = array();
        $val['field_name'] = 'field_multi_image';

        $binary = base64_decode($value);

        //Create the directory if it does not already exist, otherwise check the permissions
        $directory = 'public://';
        file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

        $currentDate = date("Ymd");
        $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
        
        //Saves a file to the specified destination and creates a database entry.
        $image_url =  (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

        $val['field_image'][LANGUAGE_NONE][0] = $image_url;

        $multi_image_field_entity = entity_create('field_collection_item', $val);
        $multi_image_field_entity->setHostEntity('field_multi_image', $data_item);
        $multi_image_field_entity->save();

        // $image_url =  (array)$file;

        // $uri = file_load($image_url['fid'])->uri;

        $thumbnail_uri = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));
        $original_uri = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));

        // $images[$multi_image_field_entity->item_id] = array("thumbnail_uri" => $thumbnail_uri, "original_uri" => $original_uri);

        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/images/' . $multi_image_field_entity->item_id .'/' , array("thumbnail_uri" => $thumbnail_uri, "original_uri" => $original_uri));
      }
    }
    
    // $value = array(
    //       "title"     => $title,                        
    //       "message"   => $detail,
    //       "images"    => $images
    //     );

    
  }

  

  /*
  $data_item = field_collection_item_load($post_id);

  if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);

      if (strcmp($wrapper->field_my_app_title->value(), $title) != 0) {
        $wrapper->field_my_app_title->set($title);
        $wrapper->save();


        
        // เราจำเป้นต้องวิ่ง ไป udpate 2 ที่ด้วยกันคือ my_application , center
        

        $value = array(
          "title"     => $title,
          "update"    => time()
        );

        // #1
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);

        // เราจะวิ่งไปแก้ไข post center/category ด้วย
        // #2
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category_id .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);
      }

      if (strcmp($wrapper->field_my_app_message_update->value(), $detail) != 0) {
        $wrapper->field_my_app_message_update->set($detail);
        $wrapper->save();
        
        // เราจำเป้นต้องวิ่ง ไป udpate 2 ที่ด้วยกันคือ my_application , center
        $value = array(
          "message"     => $detail,
          "update"    => time()
        );

        // #1
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);
        
        // เราจะวิ่งไปแก้ไข post center/category ด้วย 
        // #2
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category_id .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);
      }

      if ($image != "") {
        # code...
         // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
        $binary = base64_decode($image);

        //Create the directory if it does not already exist, otherwise check the permissions
        $directory = 'public://';
        file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

        $currentDate = date("Ymd");
        $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
        
        //Saves a file to the specified destination and creates a database entry.
        $file = klovers_file_save_data($_REQUEST['uid'], $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

        // https://www.drupal.org/node/1803286 update file image
        // $wrapper->field_image[0]->set((array)$file);     

        $image_url = (array)$file;

        $wrapper->field_image->set($image_url);       
        $wrapper->save();
        
        $result['image_url'] = substr(file_create_url($image_url['uri']), strlen($GLOBALS['base_url']));

        // เราจำเป้นต้องวิ่ง ไป udpate 2 ที่ด้วยกันคือ my_application , center
        $value = array(
          "image_url" => $result['image_url'],
          "update"    => time()
        );


        // #1
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);
    
        // เราจะวิ่งไปแก้ไข post center/category ด้วย
        // #2
        $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CENTER . $category_id .'/'. $app_id . '/' . FIREBASE_MY_APPLIPATIONS_POSTS_PATH . $post_id .'/' , $value);
      }
  }
  */

  $result['result']   = TRUE;
  return $result;

}

function like_post(){

  $result = array();

  global $firebase;

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['friend_id']) || empty($_REQUEST['post_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : like_post, parameter";
    return $result;
  }

  return $result;
}

function AED_post()
{
  $result = array();

  if (empty($_REQUEST['uid'])) {
    $result['result'] = FALSE;
    return $result;
  }

  if ($_REQUEST['is_add'] == 1) {
    // เป็นการเพิ่มใหม่

    $profile = profile2_by_uid_load($_REQUEST['uid'], 'main');

    foreach ($profile->field_my_application[LANGUAGE_NONE] as $key => $value) {
        if ($_REQUEST['item_id'] == $value['value']) {
   
          $data = field_collection_item_load($value['value']);

          $values = array();
          $values['field_name'] = 'field_my_app_update'; 
          $values['field_my_app_title'][LANGUAGE_NONE][0]['value'] = $_REQUEST['title'];
          $values['field_my_app_message_udate'][LANGUAGE_NONE][0]['value'] = $_REQUEST['detail'];
          // $val['field_image'][LANGUAGE_NONE][0] = (array)$file;

          if($_POST['image'] != ""){

            $image = $_POST['image'];

            // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
            $binary = base64_decode($image);

            //Create the directory if it does not already exist, otherwise check the permissions
            $directory = 'public://';
            file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

            $currentDate = date("Ymd");
            $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
            
            //Saves a file to the specified destination and creates a database entry.
            $file = klovers_file_save_data($_POST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

            $values['field_image'][LANGUAGE_NONE][0] = (array)$file;
          }   

          $field_entity = entity_create('field_collection_item', $values);
          $field_entity->setHostEntity("field_my_app_update", $data);
          $field_entity->save();  //  ยังมีปัญหาอยู่ ต้องแก้ใขเพราะว่าไม่ได้ return สถานะเอามาว่าสำเร็จหรือเปล่า แต่ save สำเร็จ      

          $value = array();
          $value[$field_entity->item_id]["title"]   = $_REQUEST['title'];
          $value[$field_entity->item_id]["message"] = $_REQUEST['detail'];
          $value[$field_entity->item_id]["picture"] = (array)$file;
    
          $result['result']   = TRUE;
          $result['post_id']  = $field_entity->item_id;
          $result['values']   = $value;

          return $result;
          break;
        }
      }
  }else if ($_REQUEST['is_add'] == 0){
    // เป็นการแก้ไข
    $items  = field_collection_item_load($_REQUEST['post_nid']);
    $wrapper = entity_metadata_wrapper('field_collection_item', $items);

    try {
      //Update value
      $wrapper->field_my_app_title->set($_REQUEST['title']);
      $wrapper->field_my_app_message_udate->set(array(
                                                    'value' => $_REQUEST['detail'],
                                                    'summary' => 'This is the summary',
                                                    'format' => 'full_html',
                                                  ));
      $image = $_REQUEST['image'];

      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary = base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $file = klovers_file_save_data($_REQUEST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);

      // https://www.drupal.org/node/1803286 update file image
      // $wrapper->field_image[0]->set((array)$file);     
      $wrapper->field_image->set((array)$file);       
      $wrapper->save();

    } catch (Exception $e) {
      $result['error'] = $e->getMessage();
    }
    $result['result'] = TRUE;
  }else if($_REQUEST['is_add'] == -1){
    // เป็นการ Delete post
    entity_delete_multiple('field_collection_item', array($_REQUEST['post_nid']));

    $result['result'] = TRUE;
  }

  return $result;
}

function delete_replycomment_of_myapplication(){
   if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['reply_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : delete_replycomment_of_myapplication, parameter";
    return $result;
  }

  global $firebase;
  $reply_id = $param['reply_id'];

  entity_delete_multiple('field_collection_item', array($reply_id));

  $result['result']   = TRUE; 
  $result['reply_id'] = $reply_id; 
  return $result;
}

function delete_post(){
  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['post_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : delete_post, parameter";
    return $result;
  }

  global $firebase;
  $post_id = $param['post_id'];

  /*
  $item_load = field_collection_item_load($post_id);

  $uid    = $item_load->hostEntity()->uid;
  $app_id = $item_load->hostEntity()->nid;

  $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id .'/'.FIREBASE_MY_APPLIPATIONS_POSTS_PATH .$post_id );
  */

  entity_delete_multiple('field_collection_item', array($post_id));

  $result['result'] = TRUE; 
  return $result;
}

function delete_comment_of_posts(){
  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) || empty($param['comment_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : delete_comment_of_posts, parameter";
    return $result;
  }

  global $firebase;
  $uid = $param['uid'];
  $comment_id = $param['comment_id'];

  entity_delete_multiple('field_collection_item', array($comment_id));

  $result['result'] = TRUE; 
  return $result;
}

function center_post_delete_comments(){
  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['app_id']) || empty($param['post_id']) || empty($param['object_id'])) {
    $result['result']   = FALSE;
    $result['message']  = "function : center_post_delete_comments, parameter";
    $result['param']    = $param;
    return $result;
  }

  try {
    global $firebase;
    $app_id     = $param['app_id'];
    $post_id    = $param['post_id'];
    $object_id  = $param['object_id'];
    // $data       = $param['data'];

    $item_load = field_collection_item_load($post_id);
    $uid    = $item_load->hostEntity()->uid;

    $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . FIREBASE_MY_APPLIPATIONS_PATH . $app_id .'/'.FIREBASE_MY_APPLIPATIONS_POSTS_PATH .$post_id .'/'. FIREBASE_MY_APPLIPATIONS_POSTS_COMMENTS_PATH . $object_id);

    $query  = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'field_collection_item')
                      ->entityCondition('bundle', 'field_my_app_update_comment')
                      ->fieldCondition('field_object_id', 'value', $object_id, '=')
                      ->execute();

    if (!empty($entities['field_collection_item'])) {
      // กรณีนี้อาจไม่เกิดขึ้นเลยก็ได้
      $item_id = array_keys($entities['field_collection_item'])[0];
      entity_delete_multiple('field_collection_item', array($item_id));
    }
  } catch (Exception $e) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
    $result['result'] = FALSE; 
    $result['message'] = $e->getMessage(); 
  }

  $result['result'] = TRUE; 
  return $result;
}

// https://www.drupal.org/node/2382811
function comment_post()
{
  $result = array();

  /*
  $result = array();
  if (empty($_REQUEST['uid']) || empty($_REQUEST['name']) || empty($_REQUEST['category']) || empty($_REQUEST['image'])) {
    $result['result'] = FALSE;
    $result['$_REQUEST'] = $_REQUEST;
    return $result;
  }
  */

  /*
  a_id : application id
  p_id : post id
  */

  if (empty($_REQUEST['uid']) || empty($_REQUEST['a_id']) || empty($_REQUEST['p_id']) || empty($_REQUEST['text'])) {
    $result['result'] = FALSE;
    $result['$_REQUEST'] = $_REQUEST;
    return $result;
  }

  /*
  // 1. Load All node by nid 
  $node = node_load($_POST['nid']);

  // 2. Get field_my_app_update 
  foreach ($node->field_my_app_update[LANGUAGE_NONE] as $key => $value) {
    $data = field_collection_item_load($value['value']);
    
    // 3. Check itme_id == nid_item ?
    if($data->item_id == $_POST['nid_item']){
      
      
      // 4. Create Comment  
      $values = array();
      $values['field_name'] = 'field_my_app_update_comment'; 
      $values['field_comment_message'][LANGUAGE_NONE][0]['value'] = $_POST['text'];

      $entity_data = $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity("field_my_app_update_comment", $data);
      $field_entity->save();  //  ยังมีปัญหาอยู่ ต้องแก้ใขเพราะว่าไม่ได้ return สถานะเอามาว่าสำเร็จหรือเปล่า แต่ save สำเร็จ      
      
      break;
    }
  }
  */

  $result['result'] = TRUE;
  
  return $result;
}

function update_new_password()
{
  $result = array();

  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

  $account = user_load($_POST['uid']);

  $check = user_check_password($_POST['old_password'], $account);

  if ($check) {
    # code...

    $account->pass = $_POST['new_password'];

    // save existing user
    user_save((object) array('uid' => $account->uid), (array) $account);
    

    $result['result'] = TRUE;
    $result['function'] = "update_new_password";
    $result["$_POST"]  = $_POST;
  }else{

    $result['result'] = FALSE;
    $result["message"]  = "Old password not match.";
  }

  
  return $result;
}

function idna_update_profile($data)
{
  $result = array();

  try {

    $user_fields = user_load($_POST['uid']);
    // เป็นการ โหลด profile เพือเราจะหา pid ของ user นั้นๆ
    $profile2_load_by_user = profile2_load_by_user($user_fields, NULL)['main'];

    if($_POST['image'] != ""){


      $image = $_POST['image'];

      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary = base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://services_image';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $file = klovers_file_save_data($_POST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);


      // save รูป profile
      $profile2_load_by_user->field_profile_image[LANGUAGE_NONE][0] = (array)$file;
    }

    if($_POST['imageBG'] != ""){


      $image = $_POST['imageBG'];

      // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
      $binary = base64_decode($image);

      //Create the directory if it does not already exist, otherwise check the permissions
      $directory = 'public://services_image';
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

      $currentDate = date("Ymd");
      $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
      
      //Saves a file to the specified destination and creates a database entry.
      $file = klovers_file_save_data($_POST['uid'], $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);


      // save รูป profile
      $profile2_load_by_user->field_field_profile_bg[LANGUAGE_NONE][0] = (array)$file;
    }

    // &phone_number=%@&google_plus=%@&facebook=%@
    $profile2_load_by_user->field_profile_name[LANGUAGE_NONE][0]['value'] = $_POST['name'];
    $profile2_load_by_user->field_profile_phone[LANGUAGE_NONE][0]['value'] = $_POST['phone_number'];
    $profile2_load_by_user->field_profile_location[LANGUAGE_NONE][0]['value'] = $_POST['location'];
    $profile2_load_by_user->field_profile_google_plus[LANGUAGE_NONE][0]['value'] = $_POST['google_plus'];
    $profile2_load_by_user->field_profile_facebook[LANGUAGE_NONE][0]['value'] = $_POST['facebook'];

    profile2_save($profile2_load_by_user);

    
    $result['file'] = (array)$file ;
    $result['message'] = "klovers_update_profile";
    $result['data'] = $data;
    $result['uid'] = $_POST['uid'];
    $result['x'] =  $profile2_load_by_user;
    $result['profile2_load_by_user'] = $profile2_load_by_user;


    $result['result'] = TRUE;

  }catch (Exception $e) {
    $result['message'] = 'Caught exception: '.  $e->getMessage(). "\n";

    $result['result'] = FALSE;
    $result['message'] = 'Caught exception: '.  $e->getMessage(). "\n";
  }

  return $result;
}

function delete_user(){
  
  $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', 0, '!=')
        ->condition('ur.uid', 1, '!=')
        ->execute()
        ->fetchCol();

  // $mul_users =  user_delete_multiple($uids);

  foreach ($uids as &$value) {
    // echo "--> " . $value . '<\br>';
    user_delete($value);
  }
  

  // global $firebase;
  // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL, FIREBASE_BASIC_KEY);
  // dpm($firebase);

  return "Delete completion.";
}

function reset_heart()
{

  $uids = db_select('users', 'ur')
        ->fields('ur', array('uid'))
        // ->condition('ur.uid', $uid, '!=')
        // ->condition('ur.uid', 0, '!=')
        // ->condition('ur.uid', 1, '!=')
        ->condition('ur.uid', 0, '!=')
        ->condition('ur.uid', 1, '!=')
        ->execute()
        ->fetchCol();

  $mul_users =  user_load_multiple($uids);

  // $data = array();
  foreach ($mul_users as $account) {
    # code...
    
    // $tmp['uid'] = $account->uid;
    // $tmp['name'] = $account->name;
    // $tmp['mail'] = $account->mail;

    // // $path= file_create_url($uri)  uri
    // if(!is_null($account->picture)){
    //   $tmp['url_image'] = file_create_url($account->picture->uri); 
    // }else{
    //   $tmp['url_image'] = "";
    // }

    // เป้นการโหลดข้อมูลของ profile user ซึ่งจะได้รู้ว่า friend ของ user
    $user_fields = user_load($account->uid);

    if (!$user_fields->uid) {
      // User is not logged in
      //services_error(t('User is not logged in.'), 406);

      $result['result'] = FALSE;
      $result['output'] = "uid not match is user";

      return $result;
    }

    $profile2_load_by_user = profile2_load_by_user($user_fields, NULL);

    // $profile2_load_by_user->field_profile_heart[LANGUAGE_NONE][0]['value'] = LIMIT_SEND_HEART;

    profile2_save($profile2_load_by_user);
  }

  // echo "<pre>";
  // var_dump($data);
  // echo "</pre>";

  // watchdog("Reset Heart", "1", WATCHDOG_ERROR);
  // watchdog("idna", 'Reset Heart = %uid', array('%uid' => '1'), WATCHDOG_ERROR);


  return "Reset Heart";
}

function getNameImageURLFriend($friend_id){
  $friend_profile = profile2_by_uid_load($friend_id, 'main');

  $friend_profile_name = $friend_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
  if (IsNullOrEmptyString($friend_profile_name)) {
    $friend_profile_name = $friend_profile->field_profile_name[LANGUAGE_NONE][0]['value'];
  }

  $friend_profile_image_url = "";
  if(isset($friend_profile->field_profile_image[LANGUAGE_NONE])){
    $friend_profile_image_url = substr(file_create_url(image_style_url('medium', $friend_profile->field_profile_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
  }

  return array('friend_id'=>$friend_id, 'friend_name'=>$friend_profile_name, 'friend_image_url'=>$friend_profile_image_url);
}

/*
  การสร้าง กลุ่มสนทนา(Group chat) version ใหม่เราจะแยก chat group ออกมาเป้น content type
*/
function create_chat_group(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['name'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : create_chat_group, parameter";
    return $result;
  }

  global $firebase;

  $param_uid    = $_REQUEST['uid'];
  $param_name   = $_REQUEST['name'];
  $param_members= (array)json_decode($_REQUEST['members']);

  if (count($param_members) == 0) {
    $result['result']   = FALSE;
    $result['message']  = "Members empty.";
    return $result;
  }

  // chat_id เป้น id ที่ไว้สำหรับอ้างอิงเป้น chat id  
  $chat_id = generateRandomString(LENGTH_CHAT_ID);

  $node = new stdClass();
  $node->title = $param_name;
  $node->type  = "chat_group";
  $node->uid   = $param_uid;

  $image_url = array();
  if(!empty($_FILES["idna"])){
    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $image_url =(array)klovers_file_save_data($param_uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);
  }

  $node->field_image_chat_group[LANGUAGE_NONE][0]       = $image_url;
  $node->field_object_id[LANGUAGE_NONE][0]['value']     = $chat_id;
  // $node->field_status_group[LANGUAGE_NONE][0]['value']  = "open";

  $node->language = LANGUAGE_NONE;
  $node->status   = 1;
  $node->comment  = 0; 
  $node = node_submit($node);
  node_save($node);

  /*
  invited: 35
  joined : 36
  */

  $user_profile = profile2_by_uid_load($param_uid, 'main');

  $user_name    = $user_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

  $f_members = array();

  $m_profile = getNameImageURLFriend($param_uid);
  
  // เราต้อง insert คนที่สร้าง group ลงไปก่อนด้วย
  $member_v = array();
  $member_v['field_name'] = 'field_members_group';
  $member_v['field_members_group_friend_id'][LANGUAGE_NONE][0]['value']  = $param_uid;
  $member_v['field_members_group_friend_name'][LANGUAGE_NONE][0]['value']= $m_profile['friend_name'];
  $member_v['field_path_uri'][LANGUAGE_NONE][0]['value']                 = $m_profile['friend_image_url'];
  $member_v['field_mg_status'][LANGUAGE_NONE][0]['tid']                  = '36';

  $member_field_entity = entity_create('field_collection_item', $member_v);
  $member_field_entity->setHostEntity('node', $node);
  $member_field_entity->save();


  $m_profile['status'] = '36';
  $f_members[$member_field_entity->item_id] = $m_profile;


  /*
  

  $members_friend_profile_name = $members_friend_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];
  if (IsNullOrEmptyString($members_friend_profile)) {
    $members_friend_profile_name = $members_friend_profile->field_profile_name[LANGUAGE_NONE][0]['value'];
  }

  $members_friend_profile_image_url = "";
  if(isset($members_friend_profile->field_profile_image[LANGUAGE_NONE])){
    $members_friend_profile_image_url = substr(file_create_url(image_style_url('medium', $members_friend_profile->field_profile_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
  }
  */

  

  // โหลดเพือนขึ้นมาเพือบันทึก field_chat_group

  $members_friend_profile = profile2_by_uid_load($param_uid, 'main');

  $members_friend_v = array();
  $members_friend_v['field_name'] = 'field_chat_group';
  $members_friend_v['field_group_id'][LANGUAGE_NONE][0]['value']  = $node->nid;
  $members_friend_v['field_mg_status'][LANGUAGE_NONE][0]['tid']   = '36';

  /*
  return array('friend_id'=>$friend_id, 'friend_name'=>$friend_profile_name, 'friend_image_url'=>$friend_profile_image_url);
  */

  // Create the field collection entry and associate it with the profile
  $members_friend_field_entity = entity_create('field_collection_item', $members_friend_v);
  $members_friend_field_entity->setHostEntity('profile2', $members_friend_profile);
  $members_friend_field_entity->save();

  $t = array();

  $f_v = array( "item_id"  => $members_friend_field_entity->item_id,
                "status"   => '36'
              );

  // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $param_uid . '/' . PATH_GROUPS . '/' . $node->nid . '/' , $f_v);

  $t[$param_uid][$node->nid] = $f_v;

  // โหลดเพือนขึ้นมาเพือบันทึก field_chat_group

  // เราต้อง insert คนที่สร้าง group ลงไปก่อนด้วย
  $result['item_id'] = $node->nid;
  $result['group']   = $f_v;


  $members   = array_keys($param_members);
  foreach ($members as $members_key => $members_friend_id){

    // if(strcmp($param_uid, $members_friend_id) == 0){
    //   // กรณี  members_friend_id == param_uid ก็คือคนสร้างกลุ่มสนทนาเราจะให้สถานะเป้น joined 
    //   $f_status = '36';
    // }else{
    //   $f_status = '35';
    // }

    $m_profile = getNameImageURLFriend($members_friend_id);

    $member_v = array();
    $member_v['field_name'] = 'field_members_group';
    $member_v['field_members_group_friend_id'][LANGUAGE_NONE][0]['value']  = $members_friend_id;
    $member_v['field_members_group_friend_name'][LANGUAGE_NONE][0]['value']= $m_profile['friend_name'];
    $member_v['field_path_uri'][LANGUAGE_NONE][0]['value']                 = $m_profile['friend_image_url'];
    $member_v['field_mg_status'][LANGUAGE_NONE][0]['tid']                  = '35';

    $member_field_entity = entity_create('field_collection_item', $member_v);
    $member_field_entity->setHostEntity('node', $node);
    $member_field_entity->save();

    $m_profile['status'] = '35';
    $f_members[$member_field_entity->item_id] = $m_profile;
    

    // โหลดเพือนขึ้นมาเพือบันทึก field_chat_group
    $members_friend_profile = profile2_by_uid_load($members_friend_id, 'main');

    $members_friend_v = array();
    $members_friend_v['field_name'] = 'field_chat_group';
    $members_friend_v['field_group_id'][LANGUAGE_NONE][0]['value']  = $node->nid;
    $members_friend_v['field_mg_status'][LANGUAGE_NONE][0]['tid']   = '35';

    // Create the field collection entry and associate it with the profile
    $members_friend_field_entity = entity_create('field_collection_item', $members_friend_v);
    $members_friend_field_entity->setHostEntity('profile2', $members_friend_profile);
    $members_friend_field_entity->save();


    //watchdog(TAG, '> create_chat_group header: %item_id, %friend_id', array('%item_id'=> $members_friend_field_entity->item_id, '%friend_id'=>$members_friend_id), WATCHDOG_INFO);

    $f_v = array( "item_id"  => $members_friend_field_entity->item_id,
                  "status"   => '35'
                );

    // $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $members_friend_id . '/' . PATH_GROUPS . '/' . $node->nid . '/' , $f_v);


    $t[$members_friend_id][$node->nid] = $f_v;


    // ส่ง notification บอกเพือนว่ามี การเชิญเข้ากลุ่ม
    foreach ($members_friend_profile->field_device_access[LANGUAGE_NONE] as $k => $v) {
      $item_load_device_access = field_collection_item_load($v['value']);

      if($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'] != ""){
        if (empty($members_friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'])) {
          # code...
          $badge = '1';
        }else{
          $badge = $members_friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] + 1;
        }

        $members_friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] = $badge;
        profile2_save($members_friend_profile);


        // $friend_name = $user_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

        $message = $user_name .' send invited request group ' . $param_name . '.';

        $sval = array('type'       =>'request_group',
                      'friend_id'  =>$param_uid,
                      'friend_name'=>$user_name);

        send_push_notification($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'], '', $message, $sval, $badge);
      }
    }
    // ส่ง notification บอกเพือนว่ามี การเชิญเข้ากลุ่ม

    // โหลดเพือนขึ้นมาเพือบันทึก field_chat_group
  }

  $f_item = array("chat_id"    => $chat_id,
                  "name"       => $param_name,
                  "creator_id" => $param_uid,
                  "members"    => $f_members,
                  "image_url"  => substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url'])));

  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CHAT_GROUPS . '/' . $node->nid, $f_item);

  $result['result']       = TRUE;
  $result['group_detail'] = $f_item;
  // $result['t']            = $t;

  /*
  การที่เราเก้บเอามา วน loop สร้างหลังจาก /idna/chat_groups/{node_id}  เพราะว่าเราตั้งใจ เพราะเครื่อง client จะ tack chat_groupd ไม่เจอเราจึ่งแก้ปัญหาแบบนี้ไปก่อน
  */ 
  foreach ($t as $t_key => $t_value){
    foreach ($t_value as $tt_key => $tt_value) {
      // $tt[] = FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $t_key . '/' . PATH_GROUPS . '/' . $tt_key . '/';

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $t_key . '/' . PATH_GROUPS . '/' . $tt_key . '/' , $tt_value);
    }
  }

  // $result['tt']            = $tt;
  return  $result;
}

/*
  การสร้าง กลุ่มสนทนา(Group chat)
*/
function create_group_chat_1(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['name'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : create_group_chat, parameter";
    return $result;
  }

  global $firebase;

  $uid    = $_REQUEST['uid'];
  $name   = $_REQUEST['name'];
  // $image  = $_REQUEST['image'];

  // $result['result']     = TRUE;
  // $result['gettype']    = array_keys((array)json_decode($_REQUEST['members']));
  // $result['_REQUEST']   = $_REQUEST;
  // return $result;

  // chat_id เป้น id ที่ไว้สำหรับอ้างอิงเป้น chat id  
  $chat_id = generateRandomString(LENGTH_CHAT_ID);

  $profile = profile2_by_uid_load($uid, 'main');

  
  /*
  if($image != ""){

    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary = base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $image_url= (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

    // save รูป profile
    // $profile->field_profile_image[LANGUAGE_NONE][0] = (array)$file;


  }
  */

  $image_url = array();
  if(!empty($_FILES["idna"])){
    // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
    $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

    //Create the directory if it does not already exist, otherwise check the permissions
    $directory = 'public://';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $currentDate = date("Ymd");
    $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
    $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);
  }


  $values = array();
  $values['field_name'] = 'field_chat_group'; 

  // #1 chat_id
  $values['field_object_id'][LANGUAGE_NONE][0]['value'] = $chat_id;

  // #2 field_name_group
  $values['field_name_group'][LANGUAGE_NONE][0]['value'] = $name;

  // #3 fiele_picture_group
  $values['field_picture_group'][LANGUAGE_NONE][0] = $image_url;

  // #4 field_chat_group_owner_id
  $values['field_chat_group_owner_id'][LANGUAGE_NONE][0]['value'] = $uid;
  
  // #5 field_status_group
  $values['field_status_group'][LANGUAGE_NONE][0]['value'] = 'active';

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $values);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();
 
  // เป็น node id ของ group
  $group_id = $field_entity->item_id;

  // load field_profile_group by id ขึ้นมาเพือ insert  field_members_group ลงไป
  $data_profile_group = field_collection_item_load($group_id);

  $members = array();


  $a_m = (array)json_decode($_REQUEST['members']);
  $m   = array_keys($a_m);

  if (!empty($m)) {
    foreach ($m as $key => $friend_id){
      $values_profile_group = array();
      $values_profile_group['field_name'] = 'field_members_group'; 
      $values_profile_group['field_members_group_friend_id'][LANGUAGE_NONE][0]['value'] = $friend_id;
      // $values_profile_group['field_members_group_status'][LANGUAGE_NONE][0]['value'] = "pedding";

      $field_entity_members_group = entity_create('field_collection_item', $values_profile_group);
      $field_entity_members_group->setHostEntity("field_members_group", $data_profile_group);
      $field_entity_members_group->save(); 

      /*
      $field_entity_members_group->item_id : node id ของ member 
      $value  : เป็น friend id
      $status : สถานะ 3 status : join, invite, reject
      */
      $members[$field_entity_members_group->item_id] = array("friend_id"=>$friend_id, "status"=>"pedding");



      // send notification member
      $friend_profile = profile2_by_uid_load($friend_id, 'main');

      // เราจะเก้บ group_id ลงไปด้วย
      $values['field_group_id'][LANGUAGE_NONE][0]['value'] = $group_id;

      // Create the field collection entry and associate it with the profile
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity('profile2', $friend_profile);
      $field_entity->save();

       // เป็น node id ของ group
      $friend_group_id = $field_entity->item_id;

      $value = array(
        "chat_id"  => $chat_id,               // เป็น chat_id ของ group           
        "name"     => $name,
        "image_url"=> substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url'])),
        "group_id" => $friend_group_id,
        "owner_id" => $uid,
        "status"   => 'active'
      );
      $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/' . PATH_GROUPS . '/' . $group_id . '/' , $value);


      foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $k => $v) {
        $item_load_device_access = field_collection_item_load($v['value']);

        // $result['token_notification'] = $item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];

        if($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'] != ""){
          // $item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];

          if (empty($friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'])) {
            # code...
            $badge = '1';
          }else{
            $badge = $friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] + 1;
          }

          $friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] = $badge;
          profile2_save($friend_profile);


          $friend_name = $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

          $message = $friend_name .' send request group ' . $name . '.';

          $sval = array('type'=>'request_group',
                        'friend_id'=>$uid,
                        'friend_name'=>$friend_name);

          send_push_notification($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'], '', $message, $sval, $badge);
        }
      }
      // send notification member
    }
  }

  // $firebase = new \Firebase\FirebaseLib(FIREBASE_DEFAULT_URL);
  $value = array(
      "chat_id"  => $chat_id,               // เป็น chat_id ของ group           
      "name"     => $name,
      // เราจะไม่เอา path host เราจะเอาเฉพาะ ex. /sites/default/files/20171003_570645200.png
      "image_url"=> substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url'])),
      "members"  => $members,
      "owner_id" => $uid,
      "status"   => 'active'
  );

  $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . PATH_GROUPS . '/' . $group_id . '/' , $value);


  $result['result']   = TRUE;
  $result['item_id']  = $group_id;
  $result['value']    = $value;

  return  $result;
}

/*
  สร้าง Class ของแต่ละ Account
*/
function create_class(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['fction'])|| empty($_REQUEST['name']) ) {
    $result['result'] = FALSE;
    $result['message']  = "function : create_class, parameter";
    $result['_REQUEST'] = $_REQUEST;
    return $result;
  }

  global $firebase;

  $uid    = $_REQUEST['uid'];
  $fction = $_REQUEST['fction'];
  $item_id= $_REQUEST['item_id'];
  $name   = $_REQUEST['name'];
  // $image  = $_REQUEST['image'];

  switch ($fction) {
    case 'add':{
        $profile = profile2_by_uid_load($uid, 'main');

        $values = array();
        $values['field_name'] = 'field_field_my_class'; 

        /*
        $image_url = array();
        if($image != ""){

          // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
          $binary = base64_decode($image);

          //Create the directory if it does not already exist, otherwise check the permissions
          $directory = 'public://';
          file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

          $currentDate = date("Ymd");
          $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
          
          //Saves a file to the specified destination and creates a database entry.
          $image_url= (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);
        */

        $image_url = array();
        if(!empty($_FILES["idna"])){
          // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
          $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

          //Create the directory if it does not already exist, otherwise check the permissions
          $directory = 'public://';
          file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

          $currentDate = date("Ymd");
          $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
          
          //Saves a file to the specified destination and creates a database entry.
          $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

          // save รูป profile
          // $profile->field_profile_image[LANGUAGE_NONE][0] = (array)$file;

          // #1 field_name_group
          $values['field_class_name'][LANGUAGE_NONE][0]['value'] = $name;

          // #2 field_class_image_profile
          $values['field_class_image_profile'][LANGUAGE_NONE][0] = $image_url;

          $values['field_is_default'][LANGUAGE_NONE][0]['value'] = "0";
          
      
          // Create the field collection entry and associate it with the profile
          $field_entity = entity_create('field_collection_item', $values);
          $field_entity->setHostEntity('profile2', $profile);
          $field_entity->save();
         
          // เป็น node id ของ group
          $item_id = $field_entity->item_id;

          // $url = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));
          $value = array(      
              "name"     => $name,
              "is_defualt"=>"0",
              "image_url"=> substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']))
          );

          $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . PATH_CLASSS . '/' . $item_id . '/' , $value);

          $result['result'] = TRUE;
          $result['item_id']= $item_id;
          $result['value']  = $value;
          $result['fction'] = $fction;

          return  $result;

        }else{
          $result['result'] = FALSE;
          return  $result;
        }
      }
      break;

    case 'edit':{
        // field_field_my_class

        $item_load = field_collection_item_load($item_id);
        if ($item_load) {
          $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);

          if(strcmp($item_load->field_class_name[LANGUAGE_NONE][0]['value'], $name) !== 0){
            $wrapper->field_class_name->set($name);
          }   

          $value = array();

          $value["name"]    = $name;

          /*
          if($image != ""){
            // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
            $binary = base64_decode($image);

            //Create the directory if it does not already exist, otherwise check the permissions
            $directory = 'public://';
            file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

            $currentDate = date("Ymd");
            $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
            
            //Saves a file to the specified destination and creates a database entry.
            $image_url= (array)klovers_file_save_data($uid, $binary, $directory. '/' . $name, FILE_EXISTS_RENAME);
            */

          $image_url = array();
          if(!empty($_FILES["idna"])){
            // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
            $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

            //Create the directory if it does not already exist, otherwise check the permissions
            $directory = 'public://';
            file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

            $currentDate = date("Ymd");
            $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
            
            //Saves a file to the specified destination and creates a database entry.
            $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);

            // save รูป profile
            // $profile->field_profile_image[LANGUAGE_NONE][0] = (array)$file;

            $wrapper->field_class_image_profile->set($image_url);
            $value['image_url'] =  substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));

          }

          $wrapper->save();
            
          $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/' . PATH_CLASSS . '/' . $item_id .'/' , $value);

          $result['result'] = TRUE;
          $result['item_id']= $item_id;
          $result['value']  = $value;
          $result['fction'] = $fction;
          return  $result;
        }
      }
      break;
    
    default:
      # code...
      break;
  }

}


/**
 ถุกเรียกใช้ firebase เท่านั้น
*/
function update_user_chat_group(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  /*
  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id']) || empty($_REQUEST['data'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : update_user_chat_group, parameter";
    return $result;
  }
  */

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) || empty($param['chat_group_id']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_user_chat_group : parameter";
    return $result;
  }

  global $firebase;
  $uid      = $param['uid'];
  $chat_group_id = $param['chat_group_id'];
  $data     = $param['data'];

  
  // การ Update Profile types > field_chat_group > field_mg_status
  $chat_group_item = field_collection_item_load($data['item_id']);
  $chat_group_wrapper = entity_metadata_wrapper('field_collection_item', $chat_group_item);
  $chat_group_wrapper->field_mg_status->set($data['status']);
  $chat_group_wrapper->save();

  // Update node {chat_group} > field_members_group > field_mg_status

// field_members_group
  $i = array();
  $path = '';
  $chat_group_node = node_load($chat_group_id);
  foreach ($chat_group_node->field_members_group[LANGUAGE_NONE] as $chat_group_k => $chat_group_v) {
    $i[] = $chat_group_v['value'];
    $chat_group_item_load = field_collection_item_load($chat_group_v['value']);
    if (strcasecmp($chat_group_item_load->field_members_group_friend_id[LANGUAGE_NONE][0]['value'], $uid) == 0) {
      $chat_group_item_load_wrapper = entity_metadata_wrapper('field_collection_item', $chat_group_item_load);
      $chat_group_item_load_wrapper->field_mg_status->set($data['status']);
      $chat_group_item_load_wrapper->save();

      // Update firebase idna > chat_groups > {node_id} > members > {item_id} > status = $data['status']
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CHAT_GROUPS . '/' . $chat_group_id .'/members/'. $chat_group_v['value'] .'/', array('status'=>$data['status']));

      $path  = FIREBASE_DEFAULT_PATH . FIREBASE_CHAT_GROUPS . '/' . $chat_group_id .'/members/'. $chat_group_v['value'] .'/';

      break;
    }
  }

  $result['path'] =$path;
  $result['i']    =$i;

  $result['result'] = TRUE;
  $result['$param'] = $param;
  return  $result;
}


/**
 ถุกเรียกใช้จาก firebase เท่านั้น
 แก้ไข, เพิ่มเติม field friend ของ user
*/
function user_for_friend_editupdate(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  /*
  if (empty($_REQUEST['uid']) || empty($_REQUEST['friend_id']) || empty($_REQUEST['data'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : user_for_friend_editupdate, parameter";
    return $result;
  }

  global $firebase;

  $uid        = $_REQUEST['uid'];
  $friend_id  = $_REQUEST['friend_id'];
  $data     = $_REQUEST['data'];
  */

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) || empty($param['friend_id']) || empty($param['data'])) {
    $result['result'] = FALSE;
    $result['message'] = "function update_friend_of_user : parameter";
    return $result;
  }

  $uid        = $param['uid'];
  $friend_id  = $param['friend_id'];
  $data       = $param['data'];

  /*
  // ลบ group ออกตาม group id
  $data_item_load = field_collection_item_load($_REQUEST['group_id']);

  $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
  entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
  */

  if (!array_key_exists("item_id", $data)) {
    # code...
    $result['result'] = FALSE;
    return $result;
  }

  $item_id = $data['item_id'];

  $data_item = field_collection_item_load($item_id);
  if ($data_item) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);

      if (array_key_exists('block', $data)) {
        if (strcmp($wrapper->field_profile_friends_is_block->value(), $data['block']) != 0) {
          $wrapper->field_profile_friends_is_block->set($data['block']);
          $wrapper->save();
        }
      }else{
        $wrapper->field_profile_friends_is_block->set("0");
        $wrapper->save();
      }

      if (array_key_exists('hide', $data)) {
        if (strcmp($wrapper->field_profile_friends_is_hide->value(), $data['hide']) != 0) {
          $wrapper->field_profile_friends_is_hide->set($data['hide']);
          $wrapper->save();
        }
      }else{
        $wrapper->field_profile_friends_is_hide->set("0");
        $wrapper->save();
      }

      if (array_key_exists('change_friends_name', $data)) {
        if (strcmp($wrapper->field_change_friend_name->value(), $data['change_friends_name']) != 0) {
          $wrapper->field_change_friend_name->set($data['change_friends_name']);
          $wrapper->save();
        }
      }else{
        $wrapper->field_change_friend_name->set("");
        $wrapper->save();
      }


      if (array_key_exists('classs', $data)) {
        if (strcmp($wrapper->field_profile_friend_classs->value(), $data['classs']) != 0) {
          $wrapper->field_profile_friend_classs->set($data['classs']);
          $wrapper->save();
        }
      }else{
        $wrapper->field_profile_friend_classs->set("");
        $wrapper->save();
      }

      if (array_key_exists('status', $data)) {

        // watchdog(TAG, '<< ||| >> : %account', array('%account'=> $wrapper->field_friend_status->value()->tid), WATCHDOG_INFO);

       if (strcmp($wrapper->field_friend_status->value()->tid, $data['status']) != 0) {
          $wrapper->field_friend_status->set($data['status']);
          $wrapper->save();


          /*
          เราต้องมาวิเคราะห์ status ด้วย

          มาถึงขั้นตอนนี้เรา ต้องการ update 2 จุด คือ update database ของเพือน และ firebase ของเพือน
               
          switch ($data['status']) {
            case FRIEND_STATUS_FRIEND:{

                  // load profile ของเพือนขึ้นมา
                  $profile_friend = profile2_by_uid_load($friend_id, 'main');

                  foreach ($profile_friend->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
                    // Build array of field collection values.

                    $val = field_collection_item_load($value['value']);

                    // จะดึงที่ field_friend_uid = $uid แก้ใข friend status
                    if($val->field_friend_uid[LANGUAGE_NONE][0]['value'] == $_POST['uid_friend']){
                      $wrapper = entity_metadata_wrapper('field_collection_item', $val);
                      $wrapper->field_friend_status->set($data['status']);
                      $wrapper->save();

                      $values = array(
                          "status" => FRIEND_STATUS_FRIEND,
                          "update" => time()
                        );
                      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $friend_id . '/friends/', $values);
                    }
                  }
              }
              break;
            
            default:
              # code...
              break;
          }
          */

          
        }
      }

      if (array_key_exists('favorite', $data)) {
        if (strcmp($wrapper->field_profile_friends_favorite->value(), $data['favorite']) != 0) {
          $wrapper->field_profile_friends_favorite->set($data['favorite']);
          $wrapper->save();
        }
      }
  }

  $result['result'] = TRUE;
  return  $result;
}

/**
 ถุกเรียกใช้จาก firebase เท่านั้น
 ลบเพือน
*/
function user_for_friend_delete(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  // watchdog(TAG, 'user_for_friend_delete header: %header', array('%header'=> serialize($_REQUEST)), WATCHDOG_INFO);


  if (empty($_REQUEST['uid']) || empty($_REQUEST['friend_id'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : user_for_friend_delete, parameter";
    return $result;
  }

  global $firebase;
  $uid        = $_REQUEST['uid'];
  $friend_id  = $_REQUEST['friend_id'];

  // # 1 -- เป็นการลบเพือนของเราที่ friend_id ตรงกัน
  $profile = profile2_by_uid_load($uid, 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // ดึงเพือนมาทั้งหมด
    $data_item_load = field_collection_item_load($value['value']);
    if (strcmp($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'], $friend_id) == 0) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;
    }
  }
  // # 1 -- เป็นการลบเพือนของเราที่ friend_id ตรงกัน

  // # 2 -- เป็นการลบเพือนของเพือนที่ uid ตรงกัน
  $profile = profile2_by_uid_load($friend_id, 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $key => $value) {
    // ดึงเพือนมาทั้งหมด
    $data_item_load = field_collection_item_load($value['value']);
    if (strcmp($data_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'], $uid) == 0) {
      $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
      entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
      break;
    }
  }

  // # 2 -- เป็นการลบเพือนของเพือนที่ uid ตรงกัน

  $result['result']   = TRUE;
  return $result;
}

/** 
 ถุกเรียกใช้ firebase เท่านั้น. delete_member_group_chat
*/
function delete_chat_group(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  /*
  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id'])) { // 
    $result['result'] = FALSE;
    $result['message']  = "function : delete_chat_group, parameter";
    return $result;
  }

  $uid = $_REQUEST['uid'];
  $group_id = $_REQUEST['group_id'];

  // ลบ group ออกตาม group id
  $data_item_load = field_collection_item_load($group_id);

  $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
  entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
  */

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['chat_group_id']) || empty($param['data']) ) {
    $result['result'] = FALSE;
    $result['message'] = "function delete_chat_group : parameter";
    return $result;
  }

  global $firebase;
  $chat_group_id= $param['chat_group_id'];
  $data         = $param['data'];


  node_delete($chat_group_id);
  watchdog(TAG, 'node_delete > delete_chat_group chat_group_id : %chat_group_id', array('%chat_group_id'=>$chat_group_id), WATCHDOG_INFO);  

  $data_members = $data['members'];
  foreach ($data_members as $data_members_key => $data_members_value) {
    $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $data_members_value['friend_id'] . '/'. PATH_GROUPS .'/' . $chat_group_id);
  }

  $query    = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'field_collection_item')
                ->entityCondition('bundle', 'field_chat_group')
                ->fieldCondition('field_group_id', 'value', $chat_group_id, '=')
                ->execute();

  if (!empty($entities['field_collection_item'])) {
    // $item_id = array_keys($entities['field_collection_item'])[0];
    // $data_item = field_collection_item_load($item_id);

    // $wrapper = entity_metadata_wrapper('field_collection_item', $data_item);
    // $wrapper->field_twilio_room_sid->set($RoomSid);
    // $wrapper->field_twilio_room_status->set($_REQUEST['StatusCallbackEvent']);
    // $wrapper->save();

    $items =  array_keys($entities['field_collection_item']);
    foreach ($items as $key => $value) {
      entity_delete_multiple('field_collection_item', array($value));
    }
  }

  // ลบ ข้อมูล Conversation
  $conversations_query  = new EntityFieldQuery();
  $conversations_result = $conversations_query->entityCondition('entity_type', 'node')
                          ->entityCondition('bundle', 'conversation')
                          ->propertyCondition('title', $data['chat_id'], '=')
                          // ->propertyCondition('status', 1)
                          ->execute();

  $conversations = array();
  if (!empty($conversations_result['node'])) {
    $conversations_nids = array_keys($conversations_result['node']);

    foreach ($conversations_nids as $conversations_key => $conversations_nid) { 
      node_delete($conversations_nid);  

      watchdog(TAG, 'node_delete > delete_chat_group conversations_nid : %conversations_nid', array('%conversations_nid'=>$conversations_nid), WATCHDOG_INFO);   
    }
  }
  // ลบ ข้อมูล Conversation


  // chat_groups
  $firebase->delete('conversation/' . $data['chat_id']);


  $result['result'] = TRUE;
  $result['param']  = $param;
  $result['path']   = 'conversation/' . $data['chat_id'];
  return  $result;
}


/** 
 ถุกเรียกใช้ firebase เท่านั้น. delete_member_group_chat
*/
function delete_member_group_chat(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id']) || empty($_REQUEST['member_id'])) { // 
    $result['result'] = FALSE;
    $result['message']  = "function : delete_member_group_chat, parameter";
    return $result;
  }

  $uid = $_REQUEST['uid'];
  $group_id = $_REQUEST['group_id'];
  $member_id = $_REQUEST['member_id'];

  // ลบ group ออกตาม group id
  $data_item_load = field_collection_item_load($member_id);

  $wrapper = entity_metadata_wrapper('field_collection_item', $data_item_load);    
  entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));

  $result['result'] = TRUE;
  
  return  $result;
}

function delete_classs(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  $param = json_decode(file_get_contents('php://input'), true);
  if (empty($param['uid']) || empty($param['item_id'])) {
    $result['result'] = FALSE;
    $result['message'] = "function delete_center_chat : parameter";
    return $result;
  }

  global $firebase;
  $uid        = $param['uid'];
  $item_id    = $param['item_id'];

  $profile = profile2_by_uid_load($uid, 'main');
  foreach ($profile->field_profile_friends[LANGUAGE_NONE] as $profile_key => $profile_value) {
    $profile_item_load = field_collection_item_load($profile_value['value']);

    if (strcasecmp($profile_item_load->field_profile_friend_classs[LANGUAGE_NONE][0]['value'], $item_id) == 0) {
      $profile_wrapper = entity_metadata_wrapper('field_collection_item', $profile_item_load);
      $profile_wrapper->field_profile_friend_classs->set('');
      $profile_wrapper->save();


      $firebase->delete(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $uid . '/friends/' . $profile_item_load->field_friend_uid[LANGUAGE_NONE][0]['value'] .'/classs');
    }
  }


  // ลบ group ออกตาม group id
  $item_load = field_collection_item_load($item_id);
  if ($item_load) {
    # code...
    $wrapper = entity_metadata_wrapper('field_collection_item', $item_load);    
    entity_delete_multiple('field_collection_item', array($wrapper->getIdentifier()));
  }

  $result['result'] = TRUE;
  return  $result;
}

function update_picture_chat_group(){ 
  $result = array();
  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id']) || empty($_FILES["idna"]["tmp_name"])) {
    $result['result']   = FALSE;
    $result['message']  = "function : update_picture_chat_group, parameter";
    $result['_REQUEST'] = $_REQUEST;
    $result['_FILES']   = $_FILES;
    return $result;
  }
  global $firebase;

  $uid      = $_REQUEST['uid'];
  $group_id = $_REQUEST['group_id'];

  $time_start = microtime(true);

  // http://stackoverflow.com/questions/8241242/drupal-7-upload-image-programatically
  $binary =  file_get_contents($_FILES["idna"]["tmp_name"]);//base64_decode($image);

  //Create the directory if it does not already exist, otherwise check the permissions
  $directory = 'public://';
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

  $currentDate = date("Ymd");
  $file_name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
    
    //Saves a file to the specified destination and creates a database entry.
  $image_url = (array)klovers_file_save_data($uid, $binary, $directory. '/' . $file_name, FILE_EXISTS_RENAME);


  $node         = node_load($group_id);  
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $node_wrapper->field_image_chat_group->set($image_url);
  $node_wrapper->save();

  $uri = substr(file_create_url(image_style_url('medium', $image_url['uri'])), strlen($GLOBALS['base_url']));
  
  $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CHAT_GROUPS . '/' . $group_id, array("image_url"=> $uri));


  $time_end = microtime(true);
  $execution_times = number_format(($time_end - $time_start), 2);

  $result['result']     = TRUE;  
  $result['image_url']  = $uri;
  $result['execution_times'] = $execution_times;

  return $result;
}

/*
    $time_start = microtime(true);
    $time_end = microtime(true);
    $time = number_format(($time_end - $time_start), 2);
   
    $result['result']          = TRUE;  
    $result['image_url']       = $url;
    $result['execution_times'] = $time;
*/


function group_invite_new_members(){
  $result = array();

  if (!check_header()) {
    $result['result'] = FALSE;
    $result['message']= "check_header()";
    return $result;
  }

  if (empty($_REQUEST['uid']) || empty($_REQUEST['group_id']) || empty($_REQUEST['members'])) {
    $result['result'] = FALSE;
    $result['message']  = "function : group_invite_new_members, parameter";
    return $result;
  }

  global $firebase;
  $param_uid      = $_REQUEST['uid'];
  $param_group_id = $_REQUEST['group_id'];
  $param_members  = (array)json_decode($_REQUEST['members']);

  $time_start     = microtime(true);

  $members_group_node = node_load($param_group_id);
  // $node_wrapper = entity_metadata_wrapper('node', $node);
  // $node_wrapper->field_key_token_notification->set($token);


  // $node_wrapper->save();

  // 
  $f_members = array();

  $members   = array_keys($param_members);
  foreach ($members as $members_key => $members_friend_id){
    $flag = FALSE;
    if (!empty($members_group_node->field_members_group[LANGUAGE_NONE])) {
      foreach ($members_group_node->field_members_group[LANGUAGE_NONE] as $members_group_k => $members_group_v) {
        $members_group_item_load = field_collection_item_load($members_group_v['value']);
        if (strcasecmp($members_group_item_load->field_members_group_friend_id[LANGUAGE_NONE][0]['value'], $members_friend_id) == 0) {
          $flag = TRUE;
          break;
        }
      }
    }

    if (!$flag) {
      
      $m_profile = getNameImageURLFriend($members_friend_id);
      // $m_profile['status'] = '35';
      // $f_members[$member_field_entity->item_id] = $m_profile;

      $member_v = array();
      $member_v['field_name'] = 'field_members_group';
      $member_v['field_members_group_friend_id'][LANGUAGE_NONE][0]['value']  = $members_friend_id;
      $member_v['field_members_group_friend_name'][LANGUAGE_NONE][0]['value']= $m_profile['friend_name'];
      $member_v['field_path_uri'][LANGUAGE_NONE][0]['value']                 = $m_profile['friend_image_url'];
      $member_v['field_mg_status'][LANGUAGE_NONE][0]['tid']                  = '35';

      $member_field_entity = entity_create('field_collection_item', $member_v);
      $member_field_entity->setHostEntity('node', $members_group_node);
      $member_field_entity->save();





  // โหลดเพือนขึ้นมาเพือบันทึก field_chat_group
      $members_friend_profile = profile2_by_uid_load($members_friend_id, 'main');

      $members_friend_v = array();
      $members_friend_v['field_name'] = 'field_chat_group';
      $members_friend_v['field_group_id'][LANGUAGE_NONE][0]['value']  = $param_group_id;
      $members_friend_v['field_mg_status'][LANGUAGE_NONE][0]['tid']   = '35';

      // Create the field collection entry and associate it with the profile
      $members_friend_field_entity = entity_create('field_collection_item', $members_friend_v);
      $members_friend_field_entity->setHostEntity('profile2', $members_friend_profile);
      $members_friend_field_entity->save();


      $f_v = array( "item_id"  => $member_field_entity->item_id,
                    "status"   => '35'
              );

      // เป็นการ insert /idna/user/{friend_id}}/groups/{group_id}
      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $members_friend_id . '/' . PATH_GROUPS . '/' . $param_group_id . '/' , $f_v);

      // เป็นการ update members /idna/chat_groups/{node_id}/
      $m_profile['status'] = '35';
      $f_members[$member_field_entity->item_id] = $m_profile;

      $firebase->update(FIREBASE_DEFAULT_PATH . FIREBASE_CHAT_GROUPS . '/' . $param_group_id .'/members/' . $member_field_entity->item_id .'/', $m_profile);



      /// send notification

      $user_profile   = profile2_by_uid_load($members_group_node->uid, 'main');
      $friend_profile = profile2_by_uid_load($members_friend_id, 'main');

      foreach ($friend_profile->field_device_access[LANGUAGE_NONE] as $k => $v) {
        $item_load_device_access = field_collection_item_load($v['value']);

        // $result['token_notification'] = $item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];

        if($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'] != ""){
          // $item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'];

          if (empty($friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'])) {
            # code...
            $badge = '1';
          }else{
            $badge = $friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] + 1;
          }

          // update บันทึก badge
          // $wrapper = entity_metadata_wrapper('field_collection_item', $item_load_device_access);
          // $wrapper->field_profile_badge->set($badge);   
          // $wrapper->save();

          $friend_profile->field_profile_badge[LANGUAGE_NONE][0]['value'] = $badge;
          profile2_save($friend_profile);


          $friend_name = $user_profile->field_profile_display_name[LANGUAGE_NONE][0]['value'];

          $message = $friend_name .' send request group ' . $members_group_node->title. '.';

          $sval = array('type'=>'request_group',
                        'friend_id'=>$members_group_node->uid,
                        'friend_name'=>$friend_name);

          send_push_notification($item_load_device_access->field_key_token_notification[LANGUAGE_NONE][0]['value'], '', $message, $sval, $badge);

        }
      }
      /// send notification
    }
  }

  $time_end       = microtime(true);
  $execution_time = number_format(($time_end - $time_start), 2);

  $result['result']          = TRUE;
  $result['new_members']     = $f_members;
  $result['execution_time']  = $execution_time;
  return  $result;
}

/*
  สร้าง QRCode &  profile ที่ firebase ให้แต่ละ user โดยแต่ละ application (heart, dna)

  $account : user account
  $bundleidentifier : heart.idna or heart.dna
  $url     : url app store[heart, dna](ios), play store[heart, dna](android)
*/
function generatorQRCode($account, $platform, $bundleidentifier){
  try {
    $file = array();
        
    // Gen QRCode
    //set it to writable location, a place for temp generated PNG files
    $PNG_TEMP_DIR = PATH_FOLDER_QRCODE;//config_pages_get(CONFIG_PAGES_TYPE, 'field_path_folder_qrcode'); 

    //Create the directory if it does not already exist, otherwise check the permissions
    file_prepare_directory($PNG_TEMP_DIR, FILE_CREATE_DIRECTORY);

    $text     = dec_enc('encrypt', $account->uid);
    $errorCorrectionLevel = "M";
    $matrixPointSize = 8;

    // Create Profile2
    // Where 'main' is your profile2 type machine name.
    $profile = profile2_create(array('type' => 'main', 'uid' => $account->uid));

    // add field name
    $profile->field_profile_name[LANGUAGE_NONE][0]['value'] = $account->name;

    // Display name
    $profile->field_profile_display_name[LANGUAGE_NONE][0]['value'] = $account->name;

    // จำนวน heart
    // $profile->field_profile_heart[LANGUAGE_NONE][0]['value'] = DEFUALT_NUMBER_HEART;

    // status message
    $profile->field_profile_status_message[LANGUAGE_NONE][0]['value'] = 'status message';

    /*
    เราจะแยกออกกัน ระหว่าง heart, dna เพราะว่าต้อง scan qrcode มันต้องวิ่งไปเปด store ถูกเพราะว่าเราแยก app กัน
    */
    switch ($bundleidentifier) {
      // iDNA
      case BUNDLE_IDENTIFIER:
      {
        // ios
        $filename = $PNG_TEMP_DIR.'/'.md5($text.'|'.$errorCorrectionLevel.'|'.$matrixPointSize).'.png';
        QRcode::png(URL_SERVER() . "/qe?&bi=" . dec_enc('encrypt', BUNDLE_IDENTIFIER)  . "&bii=" . $text, $filename, $errorCorrectionLevel, $matrixPointSize, 2);  

        $currentDate = date("Ymd");
        $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
        $image = file_get_contents($filename); 
        //Saves a file to the specified destination and creates a database entry.
        $file = klovers_file_save_data($account->uid, $image, 'public://qrcode/' . $name, FILE_EXISTS_RENAME);
        
        // Delete file ที่  QRCode  สร้างขึ้นมาเพราะว่าเราเก็บเข้าระบบแล้ว
        unlink($filename);
        // Gen QRCode

        $profile->field_profile_my_qrcode[LANGUAGE_NONE][0] = (array)$file;


        /*
        // android 
        $filename = $PNG_TEMP_DIR.'/'.md5($text.'|'.$errorCorrectionLevel.'|'.$matrixPointSize).'.png';
        QRcode::png(URL_SERVER() . "/qe?&bi=" . dec_enc('encrypt',BI_ANDROID_IDNA) . "&bii=" . $text, $filename, $errorCorrectionLevel, $matrixPointSize, 2);  

        $currentDate = date("Ymd");
        $name  = $currentDate .'_'. rand(0, 999) . rand(0, 999) . rand(0, 999) . ".png";
        $image = file_get_contents($filename); 
        //Saves a file to the specified destination and creates a database entry.
        $file = klovers_file_save_data($account->uid, $image, 'public://qrcode/' . $name, FILE_EXISTS_RENAME);
        
        // Delete file ที่  QRCode  สร้างขึ้นมาเพราะว่าเราเก็บเข้าระบบแล้ว
        unlink($filename);
        // Gen QRCode
        */

        // $profile->field_profile_my_qrcode_dna_andr[LANGUAGE_NONE][0] = (array)$file;
        
        break;
      }
      
      default:
        # code...
        break;
    }

    $value['field_name'] = 'field_profile_multi_email'; // field collection name
    $value['field_email_text'][LANGUAGE_NONE][0]['value'] = $account->mail;

    // Create the field collection entry and associate it with the profile
    $field_entity = entity_create('field_collection_item', $value);
    $field_entity->setHostEntity('profile2', $profile);
    $field_entity->save();

    // Save the profile2 to the user account.
    profile2_save($profile); 
  } catch (Exception $e) {
    watchdog("idna", 'Erorr = %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

/*
 เป็นการ redirect url store
*/ 
function qe(){
  $detect = mobile_detect_get_object();
  switch (dec_enc('decrypt', $_REQUEST['bi'])) {
      case BUNDLE_IDENTIFIER:{  // 
        if($detect->is('iPod') || $detect->is('iPhone') || $detect->is('iPad')){
          header('Location: ' . DEFUALT_IOS_URL_STORE_IDNA); // <-apple store link here
        }else if($detect->is('Android')){ 
          header('Location: ' . DEFUALT_ANDROID_URL_STORE_IDNA); // <-play store link here
        }
        break;
      }
      
      default:{
        header('Location: ' . $GLOBALS['base_url']); 
      }
        break;
  }
}

// การกำหนด my id
function setDefualtMyID($profile, $my_id){
  $value = array();
  $value['field_name'] = 'field_profile_my_id'; // field collection name

  $value['field_profile_my_id_value'][LANGUAGE_NONE][0]['value'] = $my_id;
  $value['field_profile_my_id_is_edit'][LANGUAGE_NONE][0]['value'] = "1";

  // Create the field collection entry and associate it with the profile
  $field_entity = entity_create('field_collection_item', $value);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();

  return $field_entity->item_id;
}

// sound_call_waiting
function setDefualtSoundCallWaiting($profile){
  $value = array();
  $value['field_name'] = 'field_sound_call_waiting';
  $value['field_sound_call_waiting_item_id'][LANGUAGE_NONE][0]['value'] = '396';
  $value['field_sound_call_waiting_title'][LANGUAGE_NONE][0]['value']    = "Default Sound Call waiting";
  $value['field_sound_call_waiting_uri'][LANGUAGE_NONE][0]['value']     = "/sites/default/files/sound_call_waiting/sexiest_romantic_mp3.mp3";

  $field_entity = entity_create('field_collection_item', $value);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();

  return $field_entity->item_id;
}

function setDefualtBadges($profile){
  $values = array();
  $values['field_name'] = 'field_profile_badges';
  $values['field_profile_badge_contact'][LANGUAGE_NONE][0]['value'] = "0";
  $values['field_profile_badge_recent'][LANGUAGE_NONE][0]['value']  = "0";
  $values['field_profile_badge_center'][LANGUAGE_NONE][0]['value']  = "0";
  $values['field_profile_badge_setting'][LANGUAGE_NONE][0]['value'] = "0";

  $field_entity = entity_create('field_collection_item', $values);
  $field_entity->setHostEntity('profile2', $profile);
  $field_entity->save();

  return $field_entity->item_id;
}

/* 
 การสร้าง defualt classs ให้แต่ละ user โดยจะดึงมาจาก node content_type == 'defualt_classs', status == 1
*/
function setDefualtClasss($profile){
  global $firebase;

  $content_type = "defualt_classs";

  $query  = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->propertyCondition('status', 1)
    ->execute();

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $key => $nid) {
      $node = node_load($nid);

      $image_arr = (array)file_load($node->field_class_image_profile[LANGUAGE_NONE][0]['fid']);


      $values = array();
      $values['field_name'] = 'field_field_my_class'; // field_field_my_class
      $values['field_class_name'][LANGUAGE_NONE][0]['value'] = $node->title;
      $values['field_class_image_profile'][LANGUAGE_NONE][0] = $image_arr;
      $values['field_is_default'][LANGUAGE_NONE][0]['value'] = "1";


      // Create the field collection entry and associate it with the profile
      $field_entity = entity_create('field_collection_item', $values);
      $field_entity->setHostEntity('profile2', $profile);
      $field_entity->save();
     
      // เป็น node id ของ group
      $item_id = $field_entity->item_id;

      // 
      $value_classs = array(      
          "nid"      => $nid,
          "name"     => $node->title,
          "is_default" => "1",
          "image_url"=> substr(file_create_url(image_style_url('medium', $image_arr['uri'])), strlen($GLOBALS['base_url']))
      );

      $firebase->set(FIREBASE_DEFAULT_PATH . FIREBASE_LOGIN_PATH . $profile->uid . '/' . PATH_CLASSS . '/' . $item_id . '/' , $value_classs);

      // watchdog(TAG, '2. DefualtClasss header : %profile', array('%profile'=>serialize($profile)), WATCHDOG_INFO);

    }
  }
}


function getDefualtPictureProfileMyApplication(){
  $info = field_info_field('field_my_app_picture');
  if (!empty($info) && $info['settings']['default_image'] > 0) {
      $default_img_fid  = $info['settings']['default_image'];
      return file_load($default_img_fid);

      // return substr(file_create_url(image_style_url('medium', $default_img_file->uri)), strlen($GLOBALS['base_url']));
  }

  return;
}


function getDefualtProfilePicture(){
  $info = field_info_field('field_profile_image');
  if (!empty($info) && $info['settings']['default_image'] > 0) {
      $default_img_fid  = $info['settings']['default_image'];
      $default_img_file = file_load($default_img_fid);

      return substr(file_create_url(image_style_url('medium', $default_img_file->uri)), strlen($GLOBALS['base_url']));
  }

  return;
}

// card_background
function getDefualtBackgroundCardPicture(){
  $info = field_info_field('field_picture_bg');
  if (!empty($info) && $info['settings']['default_image'] > 0) {
      $default_img_fid  = $info['settings']['default_image'];
      $default_img_file = file_load($default_img_fid);

      return substr(file_create_url(image_style_url('medium', $default_img_file->uri)), strlen($GLOBALS['base_url']));
  }

  return;
}

/*
  $tid เราจะ fix ลงไป
  34 : รูป family class
  33 : รูป friend class
  32 : รูปแอพพลิเคชั่น
  30 : รูปโปรไฟล์
  31 : รูปพื้นหลังของนามบัตร
*/
function get_defualt_picture($tid){
  watchdog(TAG, 'get_defualt_picture ', array(), WATCHDOG_INFO);
  $tree = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('defualt_picture')->vid);
  foreach ($tree as $term) {
    if ($term->tid == $tid) {
      $term = taxonomy_term_load($term->tid);
      return file_load($term->field_image[LANGUAGE_NONE][0]['fid']);
    }
  }
  return;
}

function get_creator($entity, $uid){
  if (!IsNullOrEmptyString($uid)) {
    $profile = profile2_by_uid_load($uid, 'main');

    $name    = $profile->field_profile_name[LANGUAGE_NONE][0]['value'];

    $image_url = "";
    if(isset($profile->field_profile_image[LANGUAGE_NONE])){
      $image_url = substr(file_create_url(image_style_url('medium', $profile->field_profile_image[LANGUAGE_NONE][0]['uri'])), strlen($GLOBALS['base_url']));
    }

    $time = (string)time();

    $val = array();
    $val['field_name'] = 'field_creator';
    $val['field_creator_uid'][LANGUAGE_NONE][0]['value']         = $uid;
    $val['field_creator_name'][LANGUAGE_NONE][0]['value']        = $name;
    $val['field_creator_image_uri'][LANGUAGE_NONE][0]['value']   = $image_url;
    $val['field_creator_time_create'][LANGUAGE_NONE][0]['value'] = $time;
    $val['field_creator_time_update'][LANGUAGE_NONE][0]['value'] = $time;
    $multi_image_field_entity = entity_create('field_collection_item', $val);
    $multi_image_field_entity->setHostEntity('field_creator', $entity);
    $multi_image_field_entity->save();

    return array("user_id"=>$uid, "name"=>$name, "image_url"=>$image_url, "create"=>$time, "update"=>$time);
  }
  return;
}

